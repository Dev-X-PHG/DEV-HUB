
local b64decode = function(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f = '', (b:find(x) - 1)
        for i=6,1,-1 do r = r .. (f % 2^i - f % 2^(i-1) > 0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c = 0
        for i = 1, 8 do c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

local obf_code = "
dne
emiTtnerruc = emiTnoitacifitoNtsal    
)}    
1 = noitaruD        
,"yllufsseccuS" = txeT        
,"buH uriH" = eltiT        
{ ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag    
neht nwodlooCnoitacifiton => emiTnoitacifitoNtsal - emiTtnerruc fi
)(kcit = emiTtnerruc lacol
01 = nwodlooCnoitacifiton lacol
0 = emiTnoitacifitoNtsal lacol
)dne
dne    
dne        
dne            
kaerb                
)(poH                
neht ]emaN.v[sreyalPtegrat fi            
od ))(sreyalPteG:sreyalP.emag(sriap ni v ,_ rof        
)1(tiaw        
od eurt elihw    
)(noitcnuf(nwaps
}
eurt = ]"iogniH"[    
,eurt = ]"21tikidnayal"[    
,eurt = ]"amam_pird"[    
,eurt = ]"duf_pir"[    
,eurt = ]"decAetaerGehT"[    
,eurt = ]"nevonuL"[    
,eurt = ]"gniK_htaeD"[    
,eurt = ]"citemhtlra"[    
,eurt = ]"htrazA"[    
,eurt = ]"htozU"[    
,eurt = ]"eiboonlaiciffoo"[    
,eurt = ]"emmadivmaliot"[    
,eurt = ]"kcorgiaD"[    
,eurt = ]"daotkcolnew"[    
,eurt = ]"retskloP"[    
,eurt = ]"eroixA"[    
,eurt = ]"ardni_pir"[    
,eurt = ]"34emag_der"[    
{ = sreyalPtegrat lacol
)"--]]nimdA emaG teeM uoY fI revreS poH[[--"(tnirp
----------------------------------------------------------------------------------------------------
♡PIV♡ \\--
)dne
dne    
)dne        
)emag ,eslaf ,lortnoCtfeL.edoCyeK.munE ,eslaf(tnevEyeKdneS:reganaMtupnIlautriV            
)emag ,eslaf ,lortnoCtfeL.edoCyeK.munE ,eurt(tnevEyeKdneS:reganaMtupnIlautriV            
)(noitcnuf(refed.ksat        
neht reganaMtupnIlautriV fi    
)"reganaMtupnIlautriV"(ecivreSteG:emag = reganaMtupnIlautriV lacol    
dne    
nruter        
neht dedaoLegami ton fi    
)(noitcnuf(tcennoC:kcilC1nottuBesuoM.nottuB
)dne
eurt = dedaoLegami    
)(noitcnuf ,}egamI.nottuB{(cnysAdaolerP:redivorPtnetnoC
eslaf = dedaoLegami lacol
nottuB = tneraP.renroCIU
)0 ,1(wen.miDU = suidaRrenroC.renroCIU
)"renroCIU"(wen.ecnatsnI = renroCIU lacol
"917417728013001//:ditessaxbr" = egamI.nottuB
1 = ycnerapsnarTdnuorgkcaB.nottuB
)02 ,20.0 ,0 ,510.0(wen.2miDU = noitisoP.nottuB
)05 ,0 ,05 ,0(wen.2miDU = eziS.nottuB
iuGneercS = tneraP.nottuB
"nottuBmotsuC" = emaN.nottuB
)"nottuBegamI"(wen.ecnatsnI = nottuB lacol
iuGreyalp = tneraP.iuGneercS
"iuGneercSmotsuC" = emaN.iuGneercS
)"iuGneercS"(wen.ecnatsnI = iuGneercS lacol
dne
)(yortseD:iuGgnitsixe    
neht iuGgnitsixe fi
)"iuGneercSmotsuC"(dlihCtsriFdniF:iuGreyalp = iuGgnitsixe lacol
)"iuGreyalP"(dlihCroFtiaW:reyalPlacoL.sreyalP = iuGreyalp lacol
)"redivorPtnetnoC"(ecivreSteG:emag = redivorPtnetnoC lacol
)"sreyalP"(ecivreSteG:emag = sreyalP lacol
)"--]]nottuBegamI[[--"(tnirp
----------------------------------------------------------------------------------------------------
)}
dne     
eulaV = deepSklaW.)(vnegteg         
)eulaV(noitcnuf = kcabllaC     
,eurt = dehsiniF     
,eurt = ciremuN     
,"tupnI" = redlohecalP     
,001 = tluafeD     
,"deepSklaW tupnI" = eltiT     
{ ,"tupnI"(tupnIddA:PVP = tupnI
)dne
dne    
dne        
dne            
61 = deepSklaW.dionamuH                
neht dionamuH fi            
)"dionamuH"(ssalCfOdlihCtsriFdniF:retcarahC = dionamuH lacol            
neht retcarahC fi        
retcarahC.reyalP = retcarahC lacol        
dne        
lin = noitcennoCdeepS            
)(tcennocsiD:noitcennoCdeepS            
neht noitcennoCdeepS fi        
esle    
)deepSylppA(tcennoC:deddAretcarahC.reyalP        
)(deepSylppA        
neht eulaV fi    
)eulaV(noitcnuf(degnahCnO:elggoT
dne
dne    
dne        
)dne            
dne                
deepSklaW.)(vnegteg = deepSklaW.dionamuH                    
neht eulaV.elggoT fi                
)(noitcnuf(tcennoC:)"deepSklaW"(langiSdegnahCytreporPteG:dionamuH = noitcennoCdeepS            
dne            
)(tcennocsiD:noitcennoCdeepS                
neht noitcennoCdeepS fi            
deepSklaW.)(vnegteg = deepSklaW.dionamuH            
neht dionamuH fi        
)"dionamuH"(ssalCfOdlihCtsriFdniF:retcarahC = dionamuH lacol        
neht retcarahC fi    
retcarahC.reyalP = retcarahC lacol    
dne nruter neht eulaV.elggoT ton fi    
)(deepSylppA noitcnuf lacol
noitcennoCdeepS lacol
)}
eslaf = tluafeD    
,"deepSklaW egnahC" = eltiT    
{ ,"elggoT"(elggoTddA:PVP = elggoT
61 = deepSklaW.)(vnegteg
reyalPlacoL.sreyalP = reyalP lacol
)"sreyalP"(ecivreSteG:emag = sreyalP lacol
)dne
dne    
dne        
dne eurt = edilloCnaC.p neht )"traPesaB"(AsI:p fi            
od ))(stnadnecseDteG:retcarahC.reyalPlacoL.sreyalP.emag(sriapi ni p ,_ rof        
esle    
)dne        
dne            
dne eslaf = edilloCnaC.p neht )"traPesaB"(AsI:p fi                
od ))(stnadnecseDteG:retcarahC.reyalPlacoL.sreyalP.emag(sriapi ni p ,_ rof            
)(noitcnuf(tcennoC:deppetS.)"ecivreSnuR"(ecivreSteG:emag = noitcennoCpilCoN.)(vnegteg        
neht v fi    
dne )(tcennocsiD:noitcennoCpilCoN.)(vnegteg neht noitcennoCpilCoN.)(vnegteg fi    
v = pilCoN.)(vnegteg    
)v(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"pilC oN" = eltiT{ ,"elggoT"(elggoTddA:PVP = elggoT
)dne
dne    
)0001 ,08 ,0001(wen.3rotceV = eziS.enalPretaw        
esle    
)0001 ,211 ,0001(wen.3rotceV = eziS.enalPretaw        
neht retaWklaW.)(vnegteg fi    
]"enalP-esaBretaW"[paM.)"ecapskroW"(ecivreSteG:emag = enalPretaw lacol    
    eulaV = retaWklaW.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"retaW nO klaW" = eltiT { ,"elggoT"(elggoTddA:PVP = elggoT
)}
dne    
eulaV = efaS.)(vnegteg        
)eulaV(noitcnuf = kcabllaC    
,5 = gnidnuoR    
,001 = xaM    
,0 = niM    
,03 = tluafeD    
,"tA edoM efaS" = eltiT    
{ ,"redilS"(redilSddA:PVP = redilS
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
)0 ,05 ,0(wen.3rotceV + emarFC.traPtooRdionamuH.reyalPretcarahC = emarFC.traPtooRdionamuH.reyalPretcarahC                            
)1.0(tiaw.ksat                            
od reyalPniMhtlaeH =< htlaeH.dionamuH.reyalPretcarahC dna edoMefaS.)(vnegteg elihw                        
neht reyalPniMhtlaeH =< htlaeH.dionamuH.reyalPretcarahC fi                    
)001 / efaS.)(vnegteg( * htlaeHxaM.dionamuH.reyalPretcarahC = reyalPniMhtlaeH lacol                    
neht )"traPtooRdionamuH"(dlihCtsriFdniF:reyalPretcarahC dna )"dionamuH"(dlihCtsriFdniF:reyalPretcarahC dna reyalPretcarahC fi                
retcarahC.reyalPlacoL.sreyalP.emag = reyalPretcarahC lacol                
neht edoMefaS.)(vnegteg fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = edoMefaS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"sedoM efaS" = eltiT{ ,"elggoT"(elggoTddA:PVP = elggoT
)dne
dne    
dne        
dne            
)dne                
))276 ,0821(wen.2rotceV(nwoD1nottuB:resUlautriv                    
)"resUlautriV"(ecivreSteG:emag = resUlautriv lacol                    
))sgra(kcapnu(revreSekovnI:toohSnoitcnuFetomeR.nopaew                    
}                    
traPtooRdionamuHtegrat = ]2[                        
,noitisoP.traPtooRdionamuHtegrat = ]1[                        
{ = sgra lacol                    
0 = eulaV.nwodlooC.nopaew                    
)(noitcnuf(llacp                
neht traPtooRdionamuHtegrat dna nopaew fi            
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahCtegrat dna retcarahCtegrat = traPtooRdionamuHtegrat lacol            
retcarahC.reyalPtegrat dna reyalPtegrat = retcarahCtegrat lacol            
)reyalPtceleS.)(vnegteg(dlihCtsriFdniF:)"sreyalP"(ecivreSteG:emag = reyalPtegrat lacol            
)nuGnopaeWtceleS(dlihCtsriFdniF:retcarahc dna retcarahc = nopaew lacol            
retcarahC.reyalp dna reyalp = retcarahc lacol            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
neht nuGnopaeWtceleS dna nuGtobmiA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
        )dne
eulaV = nuGtobmiA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"nuG tobmiA otuA" = eltiT{ ,"elggoT"(elggoTddA:PVP = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
)noitisoP.tegrat(revreSeriF:tnevEetomer                        
neht tegrat dna soPesuom dna tnevEetomer fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp = tegrat lacol                    
)"soPesuoM"(dlihCtsriFdniF:loot = soPesuom lacol                    
)"tnevEetomeR"(dlihCtsriFdniF:loot = tnevEetomer lacol                    
neht loot dna retcarahC.reyalp dna reyalp fi                
)"looT"(ssalCfOdlihCtsriFdniF:retcarahc dna retcarahc = loot lacol                
retcarahC.reyalPlacol = retcarahc lacol                
reyalPlacoL.sreyalP.emag = reyalPlacol lacol                
)reyalPtceleS.)(vnegteg(dlihCtsriFdniF:sreyalP.emag = reyalp lacol                
neht reyalPtceleS.)(vnegteg dna tobmiA.)(vnegteg fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
        )dne
eulaV = tobmiA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tobmiA otuA" = eltiT{ ,"elggoT"(elggoTddA:PVP = elggoT
)dne
dne    
)dne        
dne            
)1.0(tiaw.ksat                
dne                
dne                    
)emarFC.prh(sopot                        
neht prh fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp = prh lacol                    
neht retcarahC.reyalp dna reyalp fi                
)reyalPtceleS.)(vnegteg(dlihCtsriFdniF:)"sreyalP"(ecivreSteG:emag = reyalp lacol                
od reyalPtropeleT.)(vnegteg elihw            
)(noitcnuf(nwaps.ksat        
neht reyalPtropeleT.)(vnegteg fi    
eulaV = reyalPtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"reyalP tropeleT" = eltiT    
{ ,"elggoTyM"(elggoTddA:PVP = elggoT
)dne
eulaV = reyalPtceleS.)(vnegteg   
)eulaV(noitcnuf(degnahCnO:nwodporD
)}
,eslaf = tluafeD     
,eslaf = itluM     
,tsilsreyalP = seulaV     
,"PVP reyalP tceleS" = eltiT     
{ ,"nwodporD"(nwodporDddA:PVP = nwodporD
    dne
emaN.reyalp = ]i[tsilsreyalP    
od ))(sreyalPteG:sreyalP.emag(sriapi ni reyalp ,i rof
}{ = tsilsreyalP lacol
)} "" = nocI ,"PVP baT" = eltiT {(baTddA:wodniW = PVP
)dne
dne    
dne        
dne            
dne                
)(yortseD:lliBgnitsixe                    
neht lliBgnitsixe fi                
)rebmuN .. "psEemaN"(dlihCtsriFdniF:daeh = lliBgnitsixe lacol                
daeH.retcarahC.v = daeh lacol                
neht )"daeH"(dlihCtsriFdniF:retcarahC.v dna retcarahC.v dna reyalp =~ v fi            
od ))(sreyalPteG:)"sreyalP"(ecivreSteG:emag(sriapi ni v ,_ rof        
dne        
lin = noitcennoCetadpu            
)(tcennocsiD:noitcennoCetadpu            
neht noitcennoCetadpu fi        
esle    
dne        
)smahCreyalPetadpU(tcennoC:taebtraeH.ecivreSnuR = noitcennoCetadpu            
neht noitcennoCetadpu ton fi        
neht reyalPPSE fi    
eulaV = reyalPPSE    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"reyalP PSE" = eltiT{ ,"elggoT"(elggoTddA:PSE = elggoT
dne
dne    
)dne        
dne            
dne                
dne                    
)(yortseD:llib                        
neht llib fi                    
esle                
dne                    
dne                        
)0 ,0 ,552(BGRmorf.3roloC = 3roloCtxeT.lebaLtxet                            
esle                        
)0 ,552 ,0(BGRmorf.3roloC = 3roloCtxeT.lebaLtxet                            
neht maeT.reyalp == maeT.v fi                        
)tnecrePhtlaeh ,ecnatsid ,emaN.v ,"%%d% :htlaeHn\ecnatsiD d%n\s%"(tamrof.gnirts = txeT.lebaLtxet                        
)5.0 + 001 * )htlaeHxaM.dionamuh / htlaeH.dionamuh((roolf.htam = tnecrePhtlaeh lacol                        
)5.0 + 3 / edutingaM.)noitisoP.daeh - noitisoPdaeh((roolf.htam = ecnatsid lacol                        
neht lebaLtxet fi                    
)"lebaLtxeT"(ssalCfOdlihCtsriFdniF:llib = lebaLtxet lacol                    
dne                    
llib = tneraP.eman                        
5.0 = ycnerapsnarTekortStxeT.eman                        
1 = ycnerapsnarTdnuorgkcaB.eman                        
poT.tnemngilAYtxeT.munE = tnemngilAYtxeT.eman                        
)0 ,1 ,0 ,1(wen.2miDU = eziS.eman                        
eurt = depparWtxeT.eman                        
41 = eziStxeT.eman                        
dlobimeSmahtoG.tnoF.munE = tnoF.eman                        
)llib ,"lebaLtxeT"(wen.ecnatsnI = eman lacol                        
daeh = tneraP.llib                        
eurt = poTnOsyawlA.llib                        
daeh = eenrodA.llib                        
)03 ,1 ,002 ,1(wen.2miDU = eziS.llib                        
)0 ,1 ,0(wen.3rotceV = tesffOstnetxE.llib                        
rebmuN .. "psEemaN" = emaN.llib                        
)"iuGdraoblliB"(wen.ecnatsnI = llib                        
neht llib ton fi                    
neht reyalPPSE fi                
)rebmuN .. "psEemaN"(dlihCtsriFdniF:daeh = llib lacol                
dionamuH.retcarahC.v = dionamuh lacol                
daeH.retcarahC.v = daeh lacol                
neht )"dionamuH"(dlihCtsriFdniF:retcarahC.v dna )"daeH"(dlihCtsriFdniF:retcarahC.v dna retcarahC.v dna reyalp =~ v fi            
)(noitcnuf(llacp        
od ))(sreyalPteG:)"sreyalP"(ecivreSteG:emag(sriapi ni v ,_ rof    
noitisoP.daeH.retcarahC.reyalp = noitisoPdaeh lacol    
dne nruter neht )"daeH"(dlihCtsriFdniF:retcarahC.reyalp ton ro retcarahC.reyalp ton ro reyalp ton fi    
)(smahCreyalPetadpU noitcnuf
)0000001 ,1(modnar.htam = rebmuN lacol
noitcennoCetadpu lacol
eslaf = reyalPPSE lacol
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)dne
dne    
dne        
dne            
dne                
)(yortseD:lliBgnitsixe                    
neht lliBgnitsixe fi                
)rebmuN .. "psEemaN"(dlihCtsriFdniF:eldnah = lliBgnitsixe lacol                
eldnaH.v = eldnah lacol                
neht )"eldnaH"(dlihCtsriFdniF:v dna )"tiurF" ,emaN.v(dnif.gnirts dna )"ledoM"(AsI:v fi            
od ))(nerdlihCteG:ecapskroW.emag(sriapi ni v ,_ rof        
dne        
lin = noitcennoCetadpu            
)(tcennocsiD:noitcennoCetadpu            
neht noitcennoCetadpu fi        
esle    
dne        
)smahCliveDetadpU(tcennoC:taebtraeH.ecivreSnuR = noitcennoCetadpu            
neht noitcennoCetadpu ton fi        
neht PSEtiurFliveD fi    
eulaV = PSEtiurFliveD    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tiurF PSE" = eltiT{ ,"elggoT"(elggoTddA:PSE = elggoT
dne
dne    
)dne        
dne            
dne                
dne                    
)(yortseD:lliBgnitsixe                        
neht lliBgnitsixe fi                    
)rebmuN .. "psEemaN"(dlihCtsriFdniF:eldnah = lliBgnitsixe lacol                    
esle                
dne                    
))5.0 + ecnatsid(roolf.htam ,emaN.v ,"ecnatsiD d%n\s%"(tamrof.gnirts = txeT.lebaLtxet                        
3 / edutingaM.)noitisoP.eldnah - noitisoPdaeh( = ecnatsid lacol                        
neht lebaLtxet fi                    
)"lebaLtxeT"(ssalCfOdlihCtsriFdniF:llib = lebaLtxet lacol                    
dne                    
llib = tneraP.eman                        
)552 ,552 ,552(BGRmorf.3roloC = 3roloCtxeT.eman                        
5.0 = ycnerapsnarTekortStxeT.eman                        
1 = ycnerapsnarTdnuorgkcaB.eman                        
poT.tnemngilAYtxeT.munE = tnemngilAYtxeT.eman                        
)0 ,1 ,0 ,1(wen.2miDU = eziS.eman                        
eurt = depparWtxeT.eman                        
41 = eziStxeT.eman                        
dlobimeSmahtoG.tnoF.munE = tnoF.eman                        
)llib ,"lebaLtxeT"(wen.ecnatsnI = eman lacol                        
eldnah = tneraP.llib                        
eurt = poTnOsyawlA.llib                        
eldnah = eenrodA.llib                        
)03 ,1 ,002 ,1(wen.2miDU = eziS.llib                        
)0 ,1 ,0(wen.3rotceV = tesffOstnetxE.llib                        
rebmuN .. "psEemaN" = emaN.llib                        
)"iuGdraoblliB"(wen.ecnatsnI = llib                        
neht llib ton fi                    
)rebmuN .. "psEemaN"(dlihCtsriFdniF:eldnah = llib lacol                    
neht PSEtiurFliveD fi                
eldnaH.v = eldnah lacol                
neht )"eldnaH"(dlihCtsriFdniF:v dna )"tiurF" ,emaN.v(dnif.gnirts dna )"ledoM"(AsI:v fi            
)(noitcnuf(llacp        
od ))(nerdlihCteG:ecapskroW.emag(sriapi ni v ,_ rof    
noitisoP.daeH.retcarahC.reyalp = noitisoPdaeh lacol    
dne nruter neht )"daeH"(dlihCtsriFdniF:retcarahC.reyalp ton ro retcarahC.reyalp ton ro reyalp ton fi    
)(smahCliveDetadpU noitcnuf
)0000001 ,1(modnar.htam = rebmuN lacol
noitcennoCetadpu lacol
eslaf = PSEtiurFliveD lacol
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)dne
dne    
dne        
dne            
)(yortseD:lliBgnitsixe                
neht lliBgnitsixe fi            
)"psEemaN"(dlihCtsriFdniF:v = lliBgnitsixe lacol            
od ))(nerdlihCteG:snoitacoL.]"nigirOdlroW_"[)"ecapskroW"(ecivreSteG:emag(sriapi ni v ,_ rof        
dne        
lin = noitcennoCetadpu            
)(tcennocsiD:noitcennoCetadpu            
neht noitcennoCetadpu fi        
esle    
dne        
)PSEdnalsIetadpU(tcennoC:taebtraeH.ecivreSnuR = noitcennoCetadpu            
neht noitcennoCetadpu ton fi        
neht PSEdnalsI fi    
eulaV = PSEdnalsI    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dnalsI PSE" = eltiT{ ,"elggoT"(elggoTddA:PSE = elggoT
dne
dne    
dne        
dne            
dne                
)(yortseD:lliBgnitsixe                    
neht lliBgnitsixe fi                
)"psEemaN"(dlihCtsriFdniF:v = lliBgnitsixe lacol                
esle            
dne                
))5.0 + ecnatsid(roolf.htam ,emaN.v ,"ecnatsiD d%n\s%"(tamrof.gnirts = txeT.lebaLtxet                    
3 / edutingaM.)noitisoP.v - noitisoPdaeh( = ecnatsid lacol                    
neht lebaLtxet fi                
)"lebaLtxeT"(ssalCfOdlihCtsriFdniF:llib = lebaLtxet lacol                
                dne                
llib = tneraP.eman                    
)552 ,552 ,552(BGRmorf.3roloC = 3roloCtxeT.eman                    
5.0 = ycnerapsnarTekortStxeT.eman                    
1 = ycnerapsnarTdnuorgkcaB.eman                    
poT.tnemngilAYtxeT.munE = tnemngilAYtxeT.eman                    
)0 ,1 ,0 ,1(wen.2miDU = eziS.eman                    
eurt = depparWtxeT.eman                    
41 = eziStxeT.eman                    
dloBmahtoG.tnoF.munE = tnoF.eman                    
)llib ,"lebaLtxeT"(wen.ecnatsnI = eman lacol                    
v = tneraP.llib                    
eurt = poTnOsyawlA.llib                    
v = eenrodA.llib                    
)03 ,1 ,002 ,1(wen.2miDU = eziS.llib                    
)0 ,1 ,0(wen.3rotceV = tesffOstnetxE.llib                    
"psEemaN" = emaN.llib                    
)"iuGdraoblliB"(wen.ecnatsnI = llib                    
neht llib ton fi                
)"psEemaN"(dlihCtsriFdniF:v = llib lacol                
neht PSEdnalsI fi            
neht "aeS" =~ emaN.v fi        
od )snoitacol(sriapi ni v ,_ rof    
)(nerdlihCteG:snoitacoL.]"nigirOdlroW_"[)"ecapskroW"(ecivreSteG:emag = snoitacol lacol    
noitisoP.daeH.retcarahC.reyalp = noitisoPdaeh lacol    
dne nruter neht )"daeH"(dlihCtsriFdniF:retcarahC.reyalp ton ro retcarahC.reyalp ton ro reyalp ton fi    
)(PSEdnalsIetadpU noitcnuf
noitcennoCetadpu lacol
eslaf = PSEdnalsI lacol
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)} "" = nocI ,"PSE baT" = eltiT {(baTddA:wodniW = PSE
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
)"cileRecalP" ,"ssergorPtseuQorP"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
neht 0 =< htlaeH.dionamuH.trepxErebas fi                        
                        rebaSotuA.)(vnegteg ton ro 0 =< htlaeH.dionamuH.trepxErebas litnu                        
))276 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                            
)(rellortnoCerutpaC:)"resUlautriV"(ecivreSteG:emag                            
eslaf = edilloCnaC.traPtooRdionamuH.trepxErebas                            
0 = deepSklaW.dionamuH.trepxErebas                            
0 = rewoPpmuJ.dionamuH.trepxErebas                            
1 = ycnerapsnarT.traPtooRdionamuH.trepxErebas                            
)06 ,06 ,06(wen.3rotceV = eziS.traPtooRdionamuH.trepxErebas                            
)emarFC.traPtooRdionamuH.trepxErebas(sopot                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
)(tiaw.ksat                            
taeper                        
neht trepxErebas fi                    
                    dne                    
)"trepxE rebaS"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = trepxErebas                        
neht trepxErebas ton fi                    
)"trepxE rebaS"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = trepxErebas lacol                    
esle                
dne                    
dne                        
dne                            
dne                                
)soPciler(sopot                                    
)1.0(tiaw.ksat                                    
)"cileR"(nopaeWpiuqE                                    
)1.0(tiaw.ksat                                    
)"noShciR" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc                                    
neht 1 == )"noShciR" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc fiesle                                
dne                                    
rebaSotuA.)(vnegteg ton ro 0 =< htlaeH.dionamuH.redaeLbom litnu                                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                                            
))276 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                                            
)(rellortnoCerutpaC:)"resUlautriV"(ecivreSteG:emag                                            
)emarFC.traPtooRdionamuH.redaeLbom(sopot                                            
0 = deepSklaW.dionamuH.redaeLbom                                            
eslaf = edilloCnaC.traPtooRdionamuH.redaeLbom                                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                            
)(ikaHotuA                                            
)(tiaw.ksat                                            
taeper                                        
)emarFC.traPtooRdionamuH.redaeLbom(sopot                                        
neht redaeLbom fi                                    
                                    dne                                    
)"redaeL boM"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = redaeLbom                                        
neht redaeLbom ton fi                                    
)"redaeL boM"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = redaeLbom lacol                                    
neht 0 == )"noShciR" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc fiesle                                
)"noShciR" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc                                    
neht lin == )"noShciR" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc fi                                
esle                            
)"naMkciS" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc                                
)1.0(tiaw.ksat                                
))"puC"(dlihCtsriFdniF:rahc ,"puClliF" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc                                
)1.0(tiaw.ksat                                
)"puC"(nopaeWpiuqE                                
)1.0(tiaw.ksat                                
)"puCteG" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc                                
neht 0 =~ )"naMkciS" ,"ssergorPtseuQorP"(revreSekovnI:Fmmoc fi                            
_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = Fmmoc lacol                            
esle                        
dne                            
))00.461 ,05.11 ,00.0161-(wen.emarFC(sopot                                
esle                            
))22.0534 ,40.5 ,16.4111(wen.emarFC(sopot                                
)"hcroT"(nopaeWpiuqE                                
neht )"hcroT"(dlihCtsriFdniF:rahc ro )"hcroT"(dlihCtsriFdniF:kcapkcaB.reyalp fi                            
neht 0 == ycnerapsnarT.traP.nruB.tresed fi                        
esle                    
dne                        
)soPrebas(sopot                            
esle                        
dne                            
dne                                
)5.0(tiaw.ksat                                    
emarFC.nottuB.etalp = emarFC.prh                                    
neht )"nottuB"(dlihCtsriFdniF:etalp dna etalp fi                                
)i .. "etalP"(dlihCtsriFdniF:setalPtseuQ.elgnuj = etalp lacol                                
od 5 ,1 = i rof                            
neht 001 =< edutingaM.)noitisoP.prh - noitisoP.soPrebas( fi                        
)17.841 ,79.63 ,55.2161-(wen.emarFC = soPrebas lacol                        
neht 0 == ycnerapsnarT.rooD.setalPtseuQ.elgnuj fi                    
neht 0 == ycnerapsnarT.traP.laniF.elgnuj fi                
                )08.3 ,79.92 ,19.4041-(wen.emarFC = soPciler lacol                
treseD.paM.)"ecapskroW"(ecivreSteG:emag = tresed lacol                
elgnuJ.paM.)"ecapskroW"(ecivreSteG:emag = elgnuj lacol                
dne nruter neht prh ton fi                
)"traPtooRdionamuH"(dlihCtsriFdniF:rahc dna rahc = prh lacol                
retcarahC.reyalp = rahc lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
)(noitcnuf(llacp            
neht 002 => eulaV.leveL.ataD.reyalPlacoL.sreyalP.emag dna rebaSotuA.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = rebaSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"rebaS otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
))2 ,02 ,2(wen.emarFC * emarFC.traPtooRdionamuH.amgnoLderots(PT                        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:amgnoLderots dna amgnoLderots fi                    
)"amgnoL"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = amgnoLderots lacol                    
))497.9459- ,197.983 ,678.83201-(wen.emarFC(sopot                    
esle                
dne                    
dne                        
dne                            
0 =< htlaeH.dionamuh ro tneraP.ymene ton ro atihsuTotuA.)(vnegteg ton litnu                                
)dne                                    
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                                        
)(noitcnuf(llacp                                    
dne                                    
)soP * emarFC.traPtoor(sopot                                        
neht 5 > edutingaM.)noitisoP.prh - noitisoP.traPtoor( fi                                    
0 = deepSklaW.dionamuh                                    
eslaf = edilloCnaC.traPtoor                                    
)1.0(tiaw.ksat                                    
taeper                                
dne                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
neht )nopaeWtceleS.)(vnegteg(dlihCtsriFdniF:retcarahc ton dna nopaeWtceleS.)(vnegteg fi                                
dne                                
)(ikaHotuA                                    
neht )"ikaH"(dlihCtsriFdniF:retcarahc ton fi                                
neht 0 > htlaeH.dionamuh fi                            
traPtooRdionamuH.ymene = traPtoor lacol                            
dionamuH.ymene = dionamuh lacol                            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna tneraP.ymene dna "amgnoL" == emaN.ymene fi                        
od ))(nerdlihCteG:seimene(sriap ni ymene ,_ rof                    
neht prh dna amgnol fi                
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc = prh lacol                
retcarahC.reyalp = retcarahc lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
)"amgnoL"(dlihCtsriFdniF:seimene = amgnol lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol                
)(noitcnuf(llacp            
neht 3dlroW dna atihsuTotuA.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = atihsuTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"atihsuT otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
amaYotuA.)(vnegteg ton ro )"amaY"(dlihCtsriFdniF:kcapkcaB.reyalp litnu                            
)rotceteDkcilc(rotcetedkcilcerif                                
)5.0(tiaw.ksat                                
taeper                            
neht rotceteDkcilc fi                        
)"rotceteDkcilC"(dlihCtsriFdniF:eldnaH.anataKdelaeS.anataKdelaes = rotceteDkcilc lacol                        
neht )"anataKdelaeS"(dlihCtsriFdniF:anataKdelaes dna anataKdelaes dna kcapkcaBnIamay ton fi                    
                    )"llafretaW"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = anataKdelaes lacol                    
)"amaY"(dlihCtsriFdniF:kcapkcaB.reyalp = kcapkcaBnIamay lacol                    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                    
neht 03 => ssergorp dna ssergorp fi                
)"ssergorP" ,"retnuHetilE"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = ssergorp lacol                
neht amaYotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = amaYotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"amaY otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
)dne        
dne            
)emarFC.rooDssoB.desruC.eltruT.paM.ecapskrow(sopot                
)5.0(tiaw.ksat                
))266.8356- ,159.106 ,391.81321-(wen.emarFC(sopot                
esle            
dne                
dne                    
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro KDCteGotuA.)(vnegteg ton litnu                        
)(tiaw.ksat                            
taeper                        
dne                        
eurt = teSnoitalumiS.)(vnegteg                            
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                            
neht teSnoitalumiS.)(vnegteg ton dna nys fi                        
))0,03,0(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                        
0 = deepSklaW.dionamuH.v                        
eslaf = edilloCnaC.traPtooRdionamuH.v                        
)(osuB                        
dne                        
eurt = deifitoNsah                            
)}                            
,01 = noitaruD                                
,"59901259911//:ditessaxbr" = noc                                
,"atihsuT ro amaY - !esU" = txeT                                
,"buH uriH" = eltiT                                
{ ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                            
neht deifitoNsah ton fiesle                        
)"atihsuT"(nopaeWpiuqE                            
neht )"atihsuT"(dlihCtsriFdniF:kcapkcab ro )"atihsuT"(dlihCtsriFdniF:rahc fiesle                        
)"amaY"(nopaeWpiuqE                            
neht )"amaY"(dlihCtsriFdniF:kcapkcab ro )"amaY"(dlihCtsriFdniF:rahc fi                        
kcapkcaB.reyalp = kcapkcab lacol                        
retcarahC.reyalp = rahc lacol                        
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "ssoB notelekS desruC" == emaN.v fi                    
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof                
neht ssob fi            
)"ssoB notelekS desruC"(dlihCtsriFdniF:seimene = ssob lacol            
            )2.0(tiaw.ksat            
)"ssoB" ,"lairTtratS" ,"tseuQKDC"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper            
)2.0(tiaw.ksat            
)"livE" ,"ssergorP" ,"tseuQKDC"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper            
)2.0(tiaw.ksat            
)"dooG" ,"ssergorP" ,"tseuQKDC"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper            
)(noitcnuf(llacp        
)2.0(tiaw.ksat        
od KDCteGotuA.)(vnegteg elihw    
seimenE.ecapskrow = seimene lacol    
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol    
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilper lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
eslaf = deifitoNsah lacol    
    KDCteGotuA.)(vnegteg litnu )(tiaw.ksat taeper    
)(noitcnuf(nwaps.ksat
)dne
eulaV = KDCteGotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"KDC mialC oT tropeleT" = noitpircseD ,"KDC teG otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
dne        
)dne            
dne                
)eurt ,2 ,"tnevEenotsevarg"(revreSekovnI:FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
esle                
)"nooM lluF tiaW"(sopot                    
neht )"gnihtoN" ,)2 ,"tnevEenotsevarg"(revreSekovnI:FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(dnif.gnirts fiesle                
))330.0616 ,589.041 ,602.3568-(wen.emarFC(sopot                    
neht )"rorrE" ,)2 ,"tnevEenotsevarg"(revreSekovnI:FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(dnif.gnirts fiesle                
dne                    
dne                        
dne                            
dne                                
dne                                    
))130.5595 ,266.831 ,787.06101-(wen.emarFC(sopot                                        
esle                                    
dne                                        
dne                                            
))276 ,0821(wen.2rotceV(nwoD1nottuB:resUlautriv                                                
)(rellortnoCerutpaC:resUlautriv                                                
)"resUlautriV"(ecivreSteG:emag = resUlautriv lacol                                                
)5.0(tiaw.ksat                                                
))130.5595 ,266.831 ,787.06101-(wen.emarFC(sopot                                                
                                                )0 ,02 ,0(wen.emarFC * emarFC.prh = emarFC.traPtooRdionamuH.ymene                                                
eslaf = edilloCnaC.traPtooRdionamuH.ymene                                                
0 = deepSklaW.dionamuH.ymene                                                
0 = rewoPpmuJ.dionamuH.ymene                                                
1 = ycnerapsnarT.traPtooRdionamuH.ymene                                                
)06 ,06 ,06(wen.3rotceV = eziS.traPtooRdionamuH.ymene                                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                                
)(ikaHotuA                                                
neht "eibmoZ gniviL" == emaN.ymene dna 0 > htlaeH.dionamuH.ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene fi                                            
od ))(nerdlihCteG:seimene(sriap ni ymene ,_ rof                                        
neht )"eibmoZ gniviL"(dlihCtsriFdniF:seimene dna seimene fi                                    
)"seimenE"(dlihCtsriFdniF:ecapskroW.emag = seimene lacol                                    
dne                                    
)"tsohG" ,"ssergorPelzzuPratiuG"(revreSekovnI:FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                        
neht tsohg fi                                    
)"tsohG"(dlihCtsriFdniF:sCPN.)"ecapskroW"(ecivreSteG:emag = tsohg lacol                                    
esle                                
dne                                    
eurt = 3tseuQ                                        
esle                                    
dne                                        
dne                                            
)5.0(tiaw.ksat                                                
)rotceteDkcilC.trap(rotcetedkcilcerif                                                
)1(tiaw.ksat                                                
)emarFC.trap(sopot                                                
neht )"rotceteDkcilC"(dlihCtsriFdniF:trap dna trap fi                                            
)mun .. "traP"(dlihCtsriFdniF:ledoM.roolFroloC.elzzuPbal = trap lacol                                            
od )kcilCoTstrap(sriapi ni mun ,_ rof                                        
}01 ,01 ,01 ,8 ,6 ,6 ,4 ,4 ,4 ,3{ = kcilCoTstrap lacol                                        
)1(tiaw.ksat                                        
))885.1406 ,326.56 ,995.3559-(wen.emarFC(sopot                                        
eurt = 4tseuQ                                        
neht )"rotceteDkcilC"(dlihCtsriFdniF:1traP.ledoM.roolFroloC.elzzuPbal dna elzzuPbal fi                                    
)"elzzuP baL"(dlihCtsriFdniF:eltsaCdetnuah = elzzuPbal lacol                                    
neht )"1tnemgeS"(dlihCtsriFdniF:telbaT.eltsaCdetnuah dna telbaT.eltsaCdetnuah dna eltsaCdetnuah fiesle                                
dne                                    
dne                                        
dne                                            
)5.0(tiaw.ksat                                                
)rotceteDkcilC.tfeL.dracalp(rotcetedkcilcerif                                                
neht )"rotceteDkcilC"(dlihCtsriFdniF:tfeL.dracalp dna )"tfeL"(dlihCtsriFdniF:dracalp dna dracalp fi                                            
)i .. "dracalP"(dlihCtsriFdniF:eltsaCdetnuah = dracalp lacol                                            
od 1- ,1 ,7 = i rof                                        
)1(tiaw.ksat                                        
))803.1716 ,748.671 ,196.2678-(wen.emarFC(sopot                                        
eurt = 2tseuQ                                        
neht 0 == ycnerapsnarT.traP.tfeL.1dracalp dna 1dracalp fi                                    
)"1dracalP"(dlihCtsriFdniF:eltsaCdetnuah = 1dracalp lacol                                    
neht 0 == ycnerapsnarT.1eldnaC.eltsaCdetnuah dna eltsaCdetnuah fi                                
)"eltsaC detnuaH"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = eltsaCdetnuah lacol                                
esle                            
)eurt ,"yuBratiuGluos"(revreSekovnI:FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                
neht enihcaMnoteleks fi                            
)"enihcaM notelekS"(dlihCtsriFdniF:sCPN.)"ecapskroW"(ecivreSteG:emag = enihcaMnoteleks lacol                            
neht 0005 =< edutingaM.)noitisoP.prh - soPtegrat( fi                        
)273.1436 ,931.6 ,854.1869-(wen.3rotceV = soPtegrat lacol                        
neht prh fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp = prh lacol                    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                    
neht )"ratiuG llukS"(yrotnevnInopaeWteG ton fi                
)(noitcnuf(llacp            
neht ratiuGllukSotuA.)(vnegteg fi        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = ratiuGllukSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"ratiuG llukS otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
dne                        
kaerb                            
dne                            
))soPtropelet(wen.emarFC(sopot                                
esle                            
elbisiV.iuGtseuq ton ro tneraP.ymene ton ro 0 =< htlaeH.dionamuH.ymene ro ikaHwobniaRotuA.)(vnegteg ton litnu                                
))276 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                                    
)(rellortnoCerutpaC:)"resUlautriV"(ecivreSteG:emag                                    
emarFCdlo = emarFC.traPtooRdionamuH.ymene                                    
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.ymene                                    
eslaf = edilloCnaC.traPtooRdionamuH.ymene                                    
)soP * emarFC.traPtooRdionamuH.ymene(sopot                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(tiaw.ksat                                    
taeper                                
emarFC.traPtooRdionamuH.ymene = emarFCdlo lacol                                
neht )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna ymene fi                            
)emaNymene(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = ymene lacol                            
neht )emaNymene ,eltiTtseuq(dnif.gnirts fi                        
od )semaNymene(sriap ni soPtropelet ,emaNymene rof                    
}                    
)26- ,22 ,7735(wen.3rotceV = ]"etariP lufituaeB"[                        
,)3784.2108- ,952907.133 ,3820.58431-(wen.3rotceV = ]"tnahpelE niatpaC"[                        
,)4537- ,905 ,4103(wen.3rotceV = ]"larimdA oliK"[                        
,)411- ,9101 ,7885(wen.3rotceV = ]"sserpmE dnalsI"[                        
,)1186 ,35 ,5711-(wen.3rotceV = ]"enotS"[                        
{ = semaNymene lacol                    
txeT.eltiT.eltiTtseuQ.reniatnoC.iuGtseuq = eltiTtseuq lacol                    
esle                
dne                    
)"teB" ,"naMdenroH"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
)1.1(tiaw.ksat                        
esle                    
))soPtegrat(wen.emarFC(sopot                        
neht 03 > edutingaM.)noitisoP.prh - soPtegrat( fi                    
)5786971951.0678- ,14191127675.039 ,5213070.29811-(wen.3rotceV = soPtegrat lacol                    
neht elbisiV.iuGtseuq ton fi                
                dne eunitnoc neht prh ton fi                
tseuQ.niaM.iuGreyalP.reyalp = iuGtseuq lacol                
)"traPtooRdionamuH"(dlihCtsriFdniF:rahc dna rahc = prh lacol                
retcarahC.reyalp = rahc lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
neht 3dlroW dna ikaHwobniaRotuA.)(vnegteg fi            
od )2.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = ikaHwobniaRotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"ikaH wobniaR teG otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
)(poH        
neht gnippoHsi fi    
etats = gnippoHsi    
)etats(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"]drowS yradnegeL ro roloc ikaH [ revreS poH" = eltiT    
{ ,"elggoT"(elggoTddA:teG = elggoT
eslaf = gnippoHsi lacol
)dne
dne    
)1.0(tiaw        
dne        
dne            
)dne                
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)(noitcnuf(llacp                
}                
"2" = ]2[                    
,"relaeDsroloC" = ]1[                    
{ = sgra lacol                
emiTtnerruc = emiTllaCtsal                
neht 2 => emiTllaCtsal - emiTtnerruc fi            
)(kcit = emiTtnerruc lacol            
neht tnemecnahcnE_yuB_otuA.)(vnegteg fi        
od eurt elihw    
0 = emiTllaCtsal lacol    
)(noitcnuf(nwaps
)dne
eulaV = tnemecnahcnE_yuB_otuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD    
,"roloC ikaH yuB otuA" = eltiT    
{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
dne        
dne            
)dne                
                    ))3sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
))2sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
))1sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
                    } "3" ,"relaeDdrowSyradnegeL" { = 3sgra lacol                    
} "2" ,"relaeDdrowSyradnegeL" { = 2sgra lacol                    
} "1" ,"relaeDdrowSyradnegeL" { = 1sgra lacol                    
)(noitcnuf(llacp                
                emiTtnerruc = emiTllaCtsal                
neht 2 => emiTllaCtsal - emiTtnerruc fi            
            )(kcit = emiTtnerruc lacol            
neht 2dlroW dna drowSyradnegeLyuBotuA.)(vnegteg fi        
od )1(tiaw.ksat elihw    
0 = emiTllaCtsal lacol    
)(noitcnuf(nwaps
)dne
eulaV = drowSyradnegeLyuBotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"drowS yradnegeL yuB otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)dne
dne    
dne        
eurt = tseuqeRdneSnac            
)emiTecnuobed(tiaw            
dne            
dne                
neht sseccus ton fi                
)dne                
))sgra(kcapnu(revreSekovnI:Fmmoc                    
)(noitcnuf(llacp = tluser ,sseccus lacol                
neht Fmmoc fi            
_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = Fmmoc lacol            
}            
1 = ]4[                
,1 = ]3[                
,"yuB" = ]2[                
,"senoB" = ]1[                
{ = sgra lacol            
eslaf = tseuqeRdneSnac            
neht tseuqeRdneSnac dna 3dlroW dna enoBedarTotuA.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
1 = emiTecnuobed lacol    
eurt = tseuqeRdneSnac lacol    
)(noitcnuf(nwaps
)dne
eulaV = enoBedarTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"enoB edarT otuA" = eltiT{ ,"elggoT"(elggoTddA:teG = elggoT
)} "" = nocI ,"yuB dnA smetI teG baT" = eltiT {(baTddA:wodniW = teG
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
)dne                            
dne                                
)1.0(tiaw.ksat                                    
od dionamuh dna traPtoor dna tneraP.v dna 0 > htlaeH.dionamuh dna lairTretfAreyalPlliKotuA.)(vnegteg elihw                                
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                                
0 = deepSklaW.dionamuh                                
dne                                
eslaf = edilloCnaC.daeH.v                                    
neht )"daeH"(dlihCtsriFdniF:v fi                                
eslaf = edilloCnaC.traPtoor                                
)06 ,06 ,06(wen.3rotceV = eziS.traPtoor                                
))2 ,1 ,1(wen.emarFC * emarFC.traPtoor(sopot                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)(noitcnuf(nwaps.ksat                            
neht 032 =< edutingaM.)noitisoP.traPtoor - noitisoP.traPtooRdionamuH.rahc( dna 0 > htlaeH.dionamuh fi                        
traPtooRdionamuH.v = traPtoor lacol                        
dionamuH.v = dionamuh lacol                        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna emaN.reyalp =~ emaN.v fi                    
od ))(nerdlihCteG:sretcarahC.ecapskroW.emag(sriapi ni v ,_ rof                
                dne nruter neht )elbisiV.iuGremit dna iuGremit( ton fi                
)"remiT"(dlihCtsriFdniF:niaM.iuGreyalP.reyalp dna )"niaM"(dlihCtsriFdniF:iuGreyalP.reyalp = iuGremit lacol                
                dne nruter neht )"traPtooRdionamuH"(dlihCtsriFdniF:rahc ton ro rahc ton fi                
retcarahC.reyalp = rahc lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
)(noitcnuf(llacp            
neht 3dlroW dna lairTretfAreyalPlliKotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)lairTretfAreyalPlliKotuA.)(vnegteg(neewTpotS    
eulaV = lairTretfAreyalPlliKotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"4V lairT retfA reyalP lliK otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
dne    
dne        
dne            
dne                
kaerb                    
))0 ,01 ,0(wen.emarFC * emarFC.jbo(sopot                    
neht "tnioPtratS" == emaN.jbo fi                
od ))(stnadnecseDteG:)"ecapskroW"(ecivreSteG:emag(sriap ni jbo ,_ rof            
neht "kniM" == eulaV.ecar fiesle        
dne            
dne                
)dne                    
0 =< htlaeH.dionamuH.ymene ro tneraP.ymene ton ro ecaRlairTotuA.)(vnegteg ton litnu                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                            
eslaf = edilloCnaC.traPtooRdionamuH.ymene                            
0 = htlaeH.dionamuH.ymene                            
)(tiaw                            
taeper                        
)(noitcnuf(llacp                    
neht 0 > htlaeH.dionamuH.ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene fi                
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni ymene ,_ rof            
neht "luohG" == eulaV.ecar fiesle        
))03- ,2387.89841 ,45682(wen.emarFC(sopot            
neht "grobyC" == eulaV.ecar fiesle        
dne            
dne                
)"nuG"(looTpiuqe                    
)"drowS"(looTpiuqe                    
)"tiurF xolB"(looTpiuqe                    
)"eeleM"(looTpiuqe                    
dne                    
dne                        
dne                            
)emag ,eslaf ,99 ,eslaf(tnevEyeKdneS:tupnIlautriv                                
)emag ,eslaf ,99 ,eurt(tnevEyeKdneS:tupnIlautriv                                
)2.0(tiaw                                
)emag ,eslaf ,021 ,eslaf(tnevEyeKdneS:tupnIlautriv                                
)emag ,eslaf ,021 ,eurt(tnevEyeKdneS:tupnIlautriv                                
)2.0(tiaw                                
)emag ,eslaf ,221 ,eslaf(tnevEyeKdneS:tupnIlautriv                                
)emag ,eslaf ,221 ,eurt(tnevEyeKdneS:tupnIlautriv                                
)2.0(tiaw                                
)loot(looTpiuqE:dionamuH.retcarahC.reyalp                                
neht epyTloot == piTlooT.loot dna )"looT"(AsI:loot fi                            
od ))(nerdlihCteG:kcapkcab(sriap ni loot ,_ rof                        
)epyTloot(looTpiuqe noitcnuf lacol                    
kcapkcaB.reyalp = kcapkcab lacol                    
)emarFC.toor(sopot                    
neht toor fi                
)"traPtooRdionamuH"(dlihCtsriFdniF:tsaeBaes = toor lacol                
neht tsaeBaes fi            
)"1tsaeBaeS"(dlihCtsriFdniF:stsaeBaeS.)"ecapskroW"(ecivreSteG:emag = tsaeBaes lacol            
neht "namhsiF" == eulaV.ecar fiesle        
dne            
dne                
dne                    
kaerb                        
)emarFC.jbo(ZPTB                        
neht "180.rednilyC_dnalsiwons" == emaN.jbo fi                    
od ))(stnadnecseDteG:lairTyks(sriap ni jbo ,_ rof                
neht lairTyks fi            
ledoM.lairTykS.paM.)"ecapskroW"(ecivreSteG:emag = lairTyks lacol            
neht "aeipykS" == eulaV.ecar fiesle        
dne            
dne                
)dne                    
0 =< htlaeH.dionamuH.ymene ro tneraP.ymene ton ro ecaRlairTotuA.)(vnegteg ton litnu                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                            
eslaf = edilloCnaC.traPtooRdionamuH.ymene                            
0 = htlaeH.dionamuH.ymene                            
)(tiaw                            
taeper                        
)(noitcnuf(llacp                    
neht 0 > htlaeH.dionamuH.ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene fi                
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni ymene ,_ rof            
neht "namuH" == eulaV.ecar fi        
)5.0(tiaw        
od ecaRlairTotuA.)(vnegteg elihw    
)"reganaMtupnIlautriV"(ecivreSteG:emag = tupnIlautriv lacol    
ecaR.ataD.reyalp = ecar lacol    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol    
)(noitcnuf(nwaps
)dne
)ecaRlairTotuA.)(vnegteg(neewTpotS    
eulaV = ecaRlairTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ecaR lairT otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)}
dne    
dne        
)]ecar[snoitisop(sopot            
neht "noitcnuf" == )sopot(foepyt dna ]ecar[snoitisop fi        
}        
)941.083- ,579.09841 ,143.21092(wen.emarFC =    kniM            
,)134.544 ,676.09841 ,442.47682(wen.emarFC =   luohG            
,)727.324- ,579.59841 ,186.20582(wen.emarFC =  grobyC            
,)146.112- ,579.09841 ,571.13282(wen.emarFC = namhsiF            
,)930.532 ,426.91941 ,851.06982(wen.emarFC = aeipykS            
,)199.502- ,579.09841 ,228.12292(wen.emarFC =  namuH            
{ = snoitisop lacol        
eulaV.ecaR.ataD.reyalp = ecar lacol        
dne        
nruter            
neht )"ecaR"(dlihCtsriFdniF:ataD.reyalp ton ro )"ataD"(dlihCtsriFdniF:reyalp ton ro reyalp ton fi        
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol        
)(noitcnuf = kcabllaC    
,"rooD lairT oT tropeleT" = eltiT    
{(nottuBddA:ecaR
)dne
dne    
dne        
dne            
kaerb                
)emarFC.v(sopot                
neht noeN.lairetaM.munE == lairetaM.v dna )"traPhseM"(AsI:v fi            
od ))(nerdlihCteG:dnalsIcitsyM(sriapi ni v ,_ rof        
dne eunitnoc neht dnalsIcitsyM ton fi        
)"dnalsIcitsyM"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = dnalsIcitsyM lacol        
dne eunitnoc neht 3dlroW ton ro raeGoTtropeleT.)(vnegteg ton fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)raeGoTtropeleT.)(vnegteg(neewTpotS    
eulaV = raeGoTtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"raeG eulB oT tropeleT" = eltiT { ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
)dne            
dne                
)emag ,eslaf ,"T" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                    
)1.0(tiaw                    
)emag ,eslaf ,"T" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                    
neht 3dlroW fi                
)(noitcnuf(llacp            
od )3(tiaw dna 3VecaRnOdnAnooMkcoL.)(vnegteg elihw        
)(noitcnuf(nwaps    
)dne    
dne        
)dne            
dne                
dne                    
)soPtAkool ,p.emarFC.aremaCtnerruC.ecapskroW.emag(tAkool.emarFC = emarFC.aremaCtnerruC.ecapskroW.emag                        
001 * riDnoom + p.emarFC.aremaCtnerruC.ecapskroW.emag = soPtAkool lacol                        
neht 0 > edutingaM.riDnoom dna riDnoom fi                    
)(noitceriDnooMteG:gnithgiL.emag = riDnoom lacol                    
neht 3dlroW fi                
)(noitcnuf(llacp            
od )5.0(tiaw dna 3VecaRnOdnAnooMkcoL.)(vnegteg elihw        
)(noitcnuf(nwaps    
dne    
nruter        
neht eulaV ton fi    
eulaV = 3VecaRnOdnAnooMkcoL.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"3V ecaR nO dnA nooM kcoL" = eltiT { ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
kaerb                        
dne                        
)soPtegrat(sopot                            
neht 5 > edutingam.)soPtnerruc - noitisoP.soPtegrat( dna soPtnerruc fi                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag dna )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag dna retcarahC.reyalPlacoL.sreyalP.emag = soPtnerruc lacol                        
emarFC.traPtooRdionamuH.v = soPtegrat lacol                        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna "relaeD tiurF decnavdA" == emaN.v fi                    
od )sCPNllA(sriap ni v ,_ rof                
dne                
)v ,sCPNllA(tresni.elbat                    
od ))(nerdlihCteG:sCPN.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof                
}{ = sCPNllA lacol                
neht dnalsIcitsyM fi            
)"dnalsIcitsyM"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = dnalsIcitsyM lacol            
od )5.0(tiaw dna relaeDtiurFdecnavdAtropeleT.)(vnegteg elihw        
)(noitcnuf(nwaps    
dne    
nruter        
neht eulaV ton fi    
eulaV = relaeDtiurFdecnavdAtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"relaeD tiurF decnavdA oT tropeleT" = eltiT { ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
)5.0(tiaw            
dne            
dne                
)soPtegrat(sopot                    
neht 5 > edutingam.)soPtnerruc - noitisoP.soPtegrat( dna soPtnerruc fi                
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag dna )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag dna retcarahC.reyalPlacoL.sreyalP.emag = soPtnerruc lacol                
)0 ,88.112 ,0(wen.emarFC * emarFC.tnioPtsehgiH = soPtegrat lacol                
neht )"emarFC"(dlihCtsriFdniF:tnioPtsehgiH dna tnioPtsehgiH fi            
)(tnioptsehgih_otneewt = tnioPtsehgiH lacol            
od tnioptsehgihotneewT.)(vnegteg elihw        
)(noitcnuf(nwaps    
dne    
nruter        
neht eulaV ton fi    
eulaV = tnioptsehgihotneewT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tnioP tsehgiH oT tropeleT" = eltiT { ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
))Z.soPtegrat ,005 ,X.soPtegrat(wen.emarFC(sopot                        
neht 5 > edutingam.)soPtnerruc - )Z.soPtegrat ,005 ,X.soPtegrat(wen.3rotceV( dna soPtnerruc fi                    
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag dna )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag dna retcarahC.reyalPlacoL.sreyalP.emag = soPtnerruc lacol                    
noitisoP.retneC.dnalsi = soPtegrat lacol                    
neht )"retneC"(dlihCtsriFdniF:dnalsi dna dnalsi fi                
)"dnalsIcitsyM"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = dnalsi lacol                
neht 3dlroW dna eragiMtropeleT.)(vnegteg fi            
od )5.0(tiaw elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)eragiMtropeleT.)(vnegteg(neewTpotS    
eulaV = eragiMtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dnalsI eragiM oT tropeleT" = eltiT { ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
dne    
dne        
dne            
sutatStnerruc = sutatSsuoiverp                
)sutatStnerruc .. " :sutatS"(cseDteS:revelluP                
neht sutatSsuoiverp =~ sutatStnerruc fi            
"❌" ro "✅" dna tluser = sutatStnerruc lacol            
neht sseccus fi        
)dne        
)"kcehcroodelpmet"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilpeR.emag nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
od )1(tiaw.ksat elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"enoD reveL lluP" = eltiT    
{(hpargaraPddA:ecaR = revelluP
)dne
dne    
)dne        
dne            
dne                
)emag ,eslaf ,"Y" ,eslaf(tnevEyeKdneS:eb                    
)1.0(tiaw.ksat                    
)emag ,eslaf ,"Y" ,eurt(tnevEyeKdneS:eb                    
)"reganaMtupnIlautriV"(ecivreSteG:emag = eb lacol                    
neht eulaV.demrofsnarTecaR.rahc ton dna 1 => eulaV.ygrenEecaR.rahc dna )"ygrenEecaR"(dlihCtsriFdniF:rahc fi                
retcarahC.reyalPlacoL.sreyalP.emag = rahc lacol                
neht retcarahC.reyalPlacoL.sreyalP.emag dna 1_ecaR.)(vnegteg fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
dne    
)dne        
dne            
dne                
eurt = 2_niarTtseuQ.)(vnegteg                    
neht eulaV.demrofsnarTecaR.rahc ton dna )"demrofsnarTecaR"(dlihCtsriFdniF:rahc fi                
retcarahC.reyalPlacoL.sreyalP.emag = rahc lacol                
neht retcarahC.reyalPlacoL.sreyalP.emag dna 1_ecaR.)(vnegteg fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
))2 ,02 ,2(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v fi                        
neht )"ymmuM dessesoP" == emaN.v ro "luoS cinomeD" == emaN.v ro "eibmoZ gniviL" == emaN.v ro "notelekS nrobeR" == emaN.v( dna )"ledoM"(AsI:v fi                    
 od ))(nerdlihCteG:detacilper(sriap ni v ,_ rof                
)"egarotSdetacilpeR"(ecivreSteG:emag = detacilper lacol                
))35493.6816 ,869456.317 ,52130.7059-(wen.emarFC(sopot                
eslaf = gnirBsenoB.)(vnegteg                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqEnU                
dne                
)soPenoB(sopot                    
esle                
dne                    
)soPenoB(sopot                        
esle                    
)soPenoB(PTB                        
neht 0051 > ecnatsid fi                    
edutingaM.)noitisoP.soPenoB - soPreyalp( = ecnatsid lacol                    
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                    
neht PTssapyB fi                
dne                
dne                    
dne                        
dne                            
0 =< htlaeH.dionamuH.v ro lin == tneraP.v ro 2_niarTtseuQ.)(vnegteg ton litnu                                
eurt = gnirBsenoB.)(vnegteg                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
eslaf = edilloCnaC.daeH.v                                    
0 = deepSklaW.dionamuH.v                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)1.0(tiaw.ksat                                    
taeper                                
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi                            
neht )"ymmuM dessesoP" == emaN.v ro "luoS cinomeD" == emaN.v ro "eibmoZ gniviL" == emaN.v ro "notelekS nrobeR" == emaN.v( dna )"ledoM"(AsI:v fi                        
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof                    
neht seimene fi                
)"seimenE"(dlihCtsriFdniF:ecapskrow = seimene lacol                
neht retcarahC.reyalPlacoL.sreyalP.emag dna 3dlroW dna 2_niarTtseuQ.)(vnegteg fi            
)(noitcnuf(llacp        
 od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
dne    
)dne        
dne            
dne                
))35493.6816 ,869456.317 ,52130.7059-(wen.emarFC(sopot                    
eslaf = 2_niarTtseuQ.)(vnegteg                    
neht eulaV.demrofsnarTecaR.rahc dna )"demrofsnarTecaR"(dlihCtsriFdniF:rahc fi                
retcarahC.reyalPlacoL.sreyalP.emag = rahc lacol                
neht retcarahC.reyalPlacoL.sreyalP.emag dna 1_ecaR.)(vnegteg fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
dne    
)2_niarTtseuQ.)(vnegteg(neewTpotS        
neht eulaV ton fi    
eulaV = 2_niarTtseuQ.)(vnegteg    
eulaV = 1_ecaR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"tseuQ niarT hsiniF otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT lacol
)dne
)dne    
dne        
dne            
raeGyuBotuA.)(vnegteg litnu )1(tiaw.ksat taeper                
esle            
))sgra(kcapnu(revreSekovnI:)"_FmmoC"(dlihCroFtiaW:)"setomeR"(dlihCroFtiaW:)"egarotSdetacilpeR"(ecivreSteG:emag                
}"yuB" ,"ecaRedargpU"{ = sgra lacol                
neht 3dlroW dna raeGyuBotuA.)(vnegteg fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
    eulaV = raeGyuBotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"raeG yuB otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
dne    
dne        
))88- ,96051 ,94592(wen.emarFC(sopot            
neht kcolCtneicAtropeleT.)(vnegteg fi        
)5.0(tiaw        
od eurt elihw    
)(noitcnuf(nwaps
)dne
)kcolCtneicAtropeleT.)(vnegteg(neewTpotS    
eulaV = kcolCtneicAtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"kcolC tneicnA tropeleT" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
dne    
dne        
)1(tiaw            
od gorFoN.)(vnegteg ton elihw        
)1(tiaw        
dne        
)dne            
dne                
)(yortseD:ykS.gnithgil                    
neht )"ykS"(dlihCtsriFdniF:gnithgil fi                
dne                
)(yortseD:sreyaLgnithgiL.gnithgil                    
neht )"sreyaLgnithgiL"(dlihCtsriFdniF:gnithgil fi                
)"gnithgiL"(ecivreSteG:emag = gnithgil lacol                
)(noitcnuf(llacp            
neht gorFoN.)(vnegteg fi        
od eurt elihw    
)(noitcnuf(nwaps
)dne
eulaV = gorFoN.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"gorF oN" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"4V ecaR" = eltiT    
{(hpargaraPddA:ecaR
)dne
dne    
dne        
dne            
))2,01,5(wen.emarFC * emarFC.traPtooRdionamuH.niatpaCegarots(sopot                
neht niatpaCegarots fi            
)"niatpaC desruC"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = niatpaCegarots lacol            
esle        
dne            
tneraP.niatpaCdesruc ton ro 0 =< htlaeH.dionamuh ro luohGotuA.)(vnegteg ton litnu                
)0001 ,"suidaRnoitalumiS" ,reyalPlacoL.)"sreyalP"(ecivreSteG:emag(ytreporpneddihtes                    
))0 ,01 ,0(wen.emarFC * emarFC.traPtoor(sopot                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                    
)(ikaHotuA                    
)50.0(tiaw.ksat                    
taeper                
)05,05,05(wen.3rotceV = eziS.traPtoor                
0 = deepSklaW.dionamuh                
eslaf = edilloCnaC.traPtoor                
neht 0 > htlaeH.dionamuh fi            
traPtooRdionamuH.niatpaCdesruc = traPtoor lacol            
dionamuH.niatpaCdesruc = dionamuh lacol            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:niatpaCdesruc dna )"dionamuH"(dlihCtsriFdniF:niatpaCdesruc dna niatpaCdesruc fi        
)"niatpaC desruC"(dlihCtsriFdniF:seimene = niatpaCdesruc lacol        
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol        
dne kaerb neht luohGotuA.)(vnegteg ton fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = luohGotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"luohG teG otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
))5781247531.3505- ,848865546740.82 ,5734841202.7126-(wen.emarFC(sopot                        
neht )"redrO"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag fiesle                    
dne                        
dne                            
eslaf == grobyCotuA.)(vnegteg ro 0 =< htlaeH.dionamuH.i ro tneraP.i ton litnu                                
)021 ,021 ,021(wen.3rotceV = eziS.traPtooRdionamuH.i                                    
eslaf = edilloCnaC.traPtooRdionamuH.i                                    
)soP * emarFC.traPtooRdionamuH.i(sopot                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)1.0(tiaw.ksat                                    
 taeper                                
neht "redrO" == emaN.i fi                            
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni i ,_ rof                        
neht )"redrO"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
neht )"redrO"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro                
 )"redrO"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag fi                
                dne                
dne                    
)                        
rotceteDkcilC.niaM.nottuB.nommuSdiaR.dnalsIelcriC.paM.)"ecapskroW"(ecivreSteG:emag                            
(rotcetedkcilcerif                        
neht )"pihcorciM"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ro                    
 )"pihcorciM"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                    
neht )"redrO"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag ton dna                
 )"redrO"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ton fi                
neht grobyCotuA.)(vnegteg fi            
od )5.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
)"2" ,"pihcorciM" ,"draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)"1" ,"pihcorciM" ,"draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)3.0(tiaw                    
neht )"redrO"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag ton dna                
 )"redrO"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ton dna                
 )"pihcorciM"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ton dna                
 )"pihcorciM"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ton fi                
neht grobyCotuA.)(vnegteg fi            
od )5.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = grobyCotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"redrO lliK dnA pihC yuB" = noitpircseD ,"grobyC teG otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)dne
)dne    
dne        
dne            
)"3","tsimehclA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 2 == sutatStsimehcla fiesle            
dne                
dne                    
))732.358- ,84.84 ,329.5865-(wen.emarFC(sopot                        
esle                    
dne                        
dne                            
2VecaRedargpU.)(vnegteg ton ro tneraP.v ton ro 0 =< htlaeH.dionamuH.v ro )"3 rewolF"(dlihCtsriFdniF:kcapkcab litnu                                
))276 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                                    
)(rellortnoCerutpaC:)"resUlautriV"(ecivreSteG:emag                                    
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
)(ikaHotuA                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(tiaw.ksat                                    
taeper                                
neht )"dionamuH"(dlihCtsriFdniF:v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna "eibmoZ" == emaN.v fi                            
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof                        
neht eibmoz fi                    
)"eibmoZ"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = eibmoz lacol                    
neht ))"3 rewolF"(dlihCtsriFdniF:retcarahC.reyalp ro )"3 rewolF"(dlihCtsriFdniF:kcapkcab( ton fiesle                
)emarFC.2rewolF.)"ecapskroW"(ecivreSteG:emag(sopot                    
neht ))"2 rewolF"(dlihCtsriFdniF:retcarahC.reyalp ro )"2 rewolF"(dlihCtsriFdniF:kcapkcab( ton fiesle                
)emarFC.1rewolF.)"ecapskroW"(ecivreSteG:emag(sopot                    
neht ))"1 rewolF"(dlihCtsriFdniF:retcarahC.reyalp ro )"1 rewolF"(dlihCtsriFdniF:kcapkcab( ton fi                
neht 1 == sutatStsimehcla fiesle            
dne                
)"2","tsimehclA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)1.1(tiaw.ksat                    
esle                
)soPtegrat(sopot                    
neht 4 > edutingaM.)noitisoP.traPtooRdionamuh - noitisoP.soPtegrat( dna traPtooRdionamuh fi                
)20020.4753- ,7041669.27 ,12538.9772-(wen.emarFC = soPtegrat lacol                
neht 0 == sutatStsimehcla fi            
)"1","tsimehclA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = sutatStsimehcla lacol            
dne            
eunitnoc                
neht )"devlovE"(dlihCtsriFdniF:ataDecar fi            
            ecaR.ataD.reyalp = ataDecar lacol            
kcapkcaB.reyalp = kcapkcab lacol            
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp = traPtooRdionamuh lacol            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
            dne            
eunitnoc                
neht 2dlroW ton ro 2VecaRedargpU.)(vnegteg ton fi            
od )2.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = 2VecaRedargpU.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"2V ecaR edargpU otuA" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"lamroN ecaR" = eltiT    
{(hpargaraPddA:ecaR
)dne
dne    
dne        
))noitisoP.traPlairt(wen.emarFC(tropeleTefas            
neht )"traP"(AsI:traPlairt dna traPlairt dna ocarDtropeleTlairT.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
dne    
)"tropeleTlairT"(dlihCtsriFdniF:traPlairt = traPlairt        
neht traPlairt fi    
)"dnalsIcirotsiherP"(dlihCtsriFdniF:)"paM"(dlihCroFtiaW:ecapskrow = traPlairt lacol    
)(noitcnuf(nwaps
dne
dne    
)emarFCtegrat(sopot        
neht "emarFC" == )emarFCtegrat(foepyt dna sopot fi    
)emarFCtegrat(tropeleTefas noitcnuf lacol
)dne
eulaV = ocarDtropeleTlairT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"rooD lairT nalC ocarD ehT oT tropeleT" = eltiT{ ,"elggoT"(elggoTddA:ecaR = elggoT
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"ocarD ecaR" = eltiT    
{(hpargaraPddA:ecaR
)} "" = nocI ,"ecaR edargpU baT" = eltiT {(baTddA:wodniW = ecaR
)dne
404v = nuGesU.)(vnegteg    
)404v(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"nuG llikS esU otuA" = eltiT    
{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
304v = drowSesU.)(vnegteg    
)304v(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"drowS llikS esU otuA" = eltiT    
{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
204v = eeleMesU.)(vnegteg    
)204v(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"eeleM llikS esU otuA" = eltiT    
{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"dnalsI onacloV llikS gnitteS" = eltiT    
{(hpargaraPddA:cinacloV
)dne
dne    
dne        
dne            
dne                
)emag ,eslaf ,"E" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                    
)1(tiaw                    
)emag ,eslaf ,"E" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                    
                    1 =< ecnatsid litnu                    
edutingaM.)soPgge - soPreyalp( = ecnatsid lacol                        
noitisoP.traPyramirP.ggEtegrat = soPgge lacol                        
dne kaerb neht soPreyalp ton fi                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag dna )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag dna retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                        
)2.0(tiaw                        
taeper                    
)emarFC.traPyramirP.ggEtegrat(sopot                    
neht "noitcnuf" == )sopot(foepyt dna traPyramirP.ggEtegrat dna )"ledoM"(AsI:ggEtegrat fi                
])sgge# ,1(modnar.htam[sgge = ggEtegrat lacol                
neht 0 > sgge# fi            
)(nerdlihCteG:sggEnogarDdenwapS.eroC.dnalsIcirotsiherP.paM.ecapskrow = sgge lacol            
neht )"sggEnogarDdenwapS"(dlihCtsriFdniF:eroC.dnalsIcirotsiherP.paM.ecapskrow dna )"dnalsIcirotsiherP"(dlihCtsriFdniF:paM.ecapskrow dna )"paM"(dlihCtsriFdniF:ecapskrow dna 3dlroW dna ggEtcelloC.)(vnegteg fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
eulaV = ggEtcelloC.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ggE tcelloC otuA" = eltiT{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
dne    
dne        
dne            
dne                
1 =< ecnatsid litnu                    
edutingaM.)soPenob - soPreyalp( = ecnatsid lacol                        
noitisoP.enob = soPenob lacol                        
dne kaerb neht soPreyalp ton fi                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag dna )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag dna retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                        
)2.0(tiaw                        
taeper                    
))noitisoP.enob(wen.emarFC(sopot                    
neht "noitcnuf" == )sopot(foepyt fi                
od )senob(sriapi ni enob ,_ rof            
dne            
dne                
)jbo ,senob(tresni.elbat                    
neht "enoBoniD" == emaN.jbo dna )"traPesaB"(AsI:jbo fi                
od ))(stnadnecseDteG:ecapskrow(sriapi ni jbo ,_ rof            
}{ = senob lacol            
neht 3dlroW dna enoBtcelloCotuA.)(vnegteg fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
eulaV = enoBtcelloC.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"enoB tcelloC otuA" = eltiT{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
eslaf = edilloCnaC.traPtoor                        
0 = htlaeH.dionamuh                        
neht 0 > htlaeH.dionamuh dna traPtoor dna dionamuh fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:ymene = traPtoor lacol                    
)"dionamuH"(dlihCtsriFdniF:ymene = dionamuh lacol                    
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni ymene ,_ rof                
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.)"sreyalP"(ecivreSteG:emag(ytreporpneddihtes                
)(noitcnuf(llacp            
neht aruAlliK.)(vnegteg fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
314v = aruAlliK.)(vnegteg    
)314v(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"smeloG aruA lliK otuA" = eltiT    
{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
dne    
dne        
dne            
eurt = cirotsiherPoTneewT.)(vnegteg                
esle            
dne                
)(kcoRonacloVdnif = kcor                    
esle                
eslaf = cirotsiherPoTneewT.)(vnegteg                    
dne                    
dne                        
dne )"nuG"(nopaeWesUdnApiuqe neht nuGesU.)(vnegteg fi                            
dne )"drowS"(nopaeWesUdnApiuqe neht drowSesU.)(vnegteg fi                            
dne )"eeleM"(nopaeWesUdnApiuqe neht eeleMesU.)(vnegteg fi                            
neht 1 =< ecnatsid fi                        
edutingaM.)noitisoP.kcor - noitisoP.traPtoor( = ecnatsid lacol                        
neht traPtoor fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:reyalp dna reyalp = traPtoor lacol                    
retcarahC.reyalPlacoL.sreyalP.emag = reyalp lacol                    
neht )75 ,35 ,581(BGRmorf.3roloC == roloC.kcor ro )65 ,35 ,581(BGRmorf.3roloC == roloC.kcor fi                
dne )noitisoPtegrat(sopot neht "noitcnuf" == )sopot(foepyt fi                
)noitisoP.kcor(wen.emarFC = noitisoPtegrat lacol                
neht kcor fi            
)(kcoRonacloVdnif = kcor lacol            
)(avaLevomer            
dne )(ikaHotuA neht "noitcnuf" == )ikaHotuA(foepyt fi            
neht onacloVdnefeDotuA.)(vnegteg fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
dne
dne    
dne        
kaerb            
kcapkcab = tneraP.loot            
dne            
)dne                
)yek(yeKsserp                    
)(noitcnuf(llacp                
)1.0(tiaw                
od )}"F" ,"V" ,"C" ,"X" ,"Z"{(sriapi ni yek ,_ rof            
retcarahC.reyalp = tneraP.loot            
neht epyTnopaew == piTlooT.loot dna )"looT"(AsI:loot fi        
od ))(nerdlihCteG:kcapkcab(sriap ni loot ,_ rof    
dne nruter neht kcapkcab ton fi    
)"kcapkcaB"(dlihCtsriFdniF:reyalp = kcapkcab lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)epyTnopaew(nopaeWesUdnApiuqe noitcnuf lacol
dne
lin nruter    
dne    
dne        
dne            
dne                
kcor nruter                    
neht )75 ,35 ,581(BGRmorf.3roloC == roloCkcor ro )65 ,35 ,581(BGRmorf.3roloC == roloCkcor fi                
roloC.kcor = roloCkcor lacol                
neht )"traPhseM"(AsI:kcor dna kcor fi            
)"kcoronaclov"(dlihCtsriFdniF:ledom = kcor lacol            
neht )"ledoM"(AsI:ledom fi        
od ))(nerdlihCteG:skcoRonaclov(sriap ni ledom ,_ rof    
dne lin nruter neht skcoRonaclov ton fi    
)"skcoRonacloV"(dlihCtsriFdniF:eroC.dnalsIcirotsiherP.paM.ecapskroW.emag = skcoRonaclov lacol    
)(kcoRonacloVdnif noitcnuf lacol
dne
)dne    
dne        
dne            
dne                
)(yortseD:jbo                    
neht )"aval"(dnif:)(rewol:emaN.jbo dna )"traPhseM"(AsI:jbo fi                
dne                
)(yortseD:jbo                    
neht )"aval"(dnif:)(rewol:emaN.jbo dna )"traP"(AsI:jbo fi                
od ))(stnadnecseDteG:dnalsIcirotsiherp(sriap ni jbo ,_ rof            
neht dnalsIcirotsiherp fi        
)"dnalsIcirotsiherP"(dlihCtsriFdniF:paM.ecapskroW.emag = dnalsIcirotsiherp lacol        
dne        
)(yortseD:ledoMaval            
neht )"ledoM"(AsI:ledoMaval dna ledoMaval fi        
)"avaLroiretnI"(dlihCtsriFdniF:eroC.dnalsIcirotsiherP.paM.ecapskroW.emag = ledoMaval lacol        
)(noitcnuf(llacp    
)(avaLevomer noitcnuf lacol
dne
)emag ,eslaf ,yek ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag    
)1.0(tiaw    
)emag ,eslaf ,yek ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag    
)yek(yeKsserp noitcnuf lacol
)dne
eulav = onacloVdnefeDotuA.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"esnefeD dnalsI onacloV tnevE otuA" = eltiT    
{ ,"elggoT"(elggoTddA:cinacloV = elggoT
)dne
dne    
dne        
dne            
dne                
eslaf = cirotsiherPneewT.)(vnegteg                    
))noitisoP.lluks(wen.emarFC(sopot                    
neht lluks fi                
)"llukS"(dlihCtsriFdniF:ciler dna ciler = lluks lacol                
)"cileRcirotsiherP"(dlihCtsriFdniF:eroC.eroCdnalsIcirotsiherp dna )"eroC"(dlihCtsriFdniF:eroCdnalsIcirotsiherp = ciler lacol                
neht eroCdnalsIcirotsiherp fi            
)"dnalsIcirotsiherP"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = eroCdnalsIcirotsiherp lacol            
neht 3dlroW dna cirotsiherPneewT.)(vnegteg fi        
od )(tiaw elihw    
dne    
)(tiaw        
)"dnalsIcirotsiherP"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = dnalsi        
od dnalsi ton elihw    
dnalsi lacol    
)(noitcnuf(nwaps
)dne
eulaV = cirotsiherPneewT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dnalsI cirotsiherP tropeleT" = eltiT{ ,"elggoTyM"(elggoTddA:cinacloV = elggoT
)}
dne    
))593v(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
}        
"tengaM cinacloV" = ]3[            
,"tfarC" = ]2[            
,"metItfarC" = ]1[            
{ = 593v lacol        
)(noitcnuf = kcabllaC    
,"tengaM cinacloV gnitfarC" = eltiT    
{(nottuBddA:cinacloV
)}
dne	
dne		
dne			
)(yortseD:v				
   neht "avaL" == emaN.v fi			
od ))(stnadnecseDteG:egarotSdetacilpeR.emag(sriap ni v,i rof		
dne		
dne			
)(yortseD:v				
   neht "avaL" == emaN.v fi			
od ))(stnadnecseDteG:ecapskroW.emag(sriap ni v,i rof        
)(noitcnuf = kcabllaC	
,"dnalsI cirotsiherP nI avaL yortseD" = eltiT	
{(nottuBddA:cinacloV
)} "" = nocI ,"tnevE cinacloV baT" = eltiT {(baTddA:wodniW = cinacloV
)dne
dne    
)dne        
dne            
dne                
dne                    
dne )1.0 ,"Z"(llikSesu neht ZllikS.)(vnegteg fi                        
                        neht 001 / tA_lliK.)(vnegteg * htlaeHxaM.dionamuH.v =< htlaeH.dionamuH.v dna                    
 )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna mraFnoM == emaN.v fi                    
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof                
neht llikSnuGesU fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
dne    
)dne        
dne            
dne                
dne                    
dne )ClliKSdloH.)(vnegteg ,"C"(llikSesu neht CllikS.)(vnegteg fi                        
dne )XlliKSdloH.)(vnegteg ,"X"(llikSesu neht XllikS.)(vnegteg fi                        
dne )ZlliKSdloH.)(vnegteg ,"Z"(llikSesu neht ZllikS.)(vnegteg fi                        
                        neht 001 / tA_lliK.)(vnegteg * htlaeHxaM.dionamuH.v =< htlaeH.dionamuH.v dna                    
 )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna mraFnoM == emaN.v fi                    
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof                
neht llikSesU fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
dne
)emag ,eslaf ,yeKlliks ,eslaf(tnevEyeKdneS:)'reganaMtupnIlautriV'(ecivres:emag    
)1.0 ro emiTdloh(tiaw    
)emag ,eslaf ,yeKlliks ,eurt(tnevEyeKdneS:)'reganaMtupnIlautriV'(ecivres:emag    
)emiTdloh ,yeKlliks(llikSesu noitcnuf lacol
)dne
)...(dlo nruter    
dne    
dne        
dne            
dne                
))sgra(kcapnu(dlo nruter                    
noitisoPllikStoBmiA = ]2[sgra                    
neht tobmiallikS fi                
neht "eslaf" =~ )]2[sgra(gnirtsot dna "eurt" =~ )]2[sgra(gnirtsot fi            
neht "tnevEetomeR" == )]1[sgra(gnirtsot fi        
neht "revreSeriF" == )dohtem(gnirtsot fi    
    }...{ = sgra lacol    
)(dohtemllacemanteg = dohtem lacol    
)...(noitcnuf(erusolccwen = llaceman__.gg
)eslaf ,gg(ylnodaertes
llaceman__.gg = dlo lacol
)emag(elbatatemwarteg = gg lacol
)}
,"tcerroC tceleS esaelPn\,nuG dna drowS llikS elbanE oT esU" = eltiT    
{(hpargaraPddA:llikSesoohC
)dne
eulav = XnuGllikS.)(vnegteg    
eulav = XdrowSllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"X llikS nuG dnA drowS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
 )dne
eulav = ZnuGllikS.)(vnegteg    
eulav = ZdrowSllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"Z llikS nuG dnA drowS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"nuG dnA drowS llikS gnitteS" = eltiT    
{(hpargaraPddA:llikSesoohC
)}
,"tcerroC tceleS esaelPn\,eeleM llikS elbanE oT esU" = eltiT    
{(hpargaraPddA:llikSesoohC
)dne
eulav = CeeleMllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"C eeleM llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = XeeleMllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"X eeleM llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = ZeeleMllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"Z eeleM llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"eeleM llikS gnitteS" = eltiT    
{(hpargaraPddA:llikSesoohC
)}
,"tcerroC tceleS esaelPn\,tiurF llikS elbanE oT esU" = eltiT    
{(hpargaraPddA:llikSesoohC
)dne
eulav = FtiurFllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"F tiurF llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = VtiurFllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"V tiurF llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = CtiurFllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"C tiurF llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = XtiurFllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"X tiurF llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = ZtiurFllikS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"Z tiurF llikS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"tiurF llikS gnitteS" = eltiT    
{(hpargaraPddA:llikSesoohC
)}
,"etavitcA ot kcilCn\,tnevE mraF nopaeW etavitcA" = eltiT    
{(hpargaraPddA:llikSesoohC
)dne
eulav = llikSnuGaeSesU.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"nuG esU tceleS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = llikSdrowSaeSesU.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"drowS esU tceleS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = llikSeeleMaeSesU.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"eeleM esU tceleS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)dne
eulav = llikStiurFaeSesU.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eurt = tluafeD    
,"tiurF esU tceleS" = eltiT    
{ ,"elggoT"(elggoTddA:llikSesoohC = elggoT
)}
,"noisuF sselwalF nahtaiveL llikS dnAn\,tnevE llikS gnitavitcA" = eltiT    
{(hpargaraPddA:llikSesoohC
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"tnevE aeS gnitteS" = eltiT    
{(hpargaraPddA:llikSesoohC
)} "" = nocI ,"llikS tceleS gnitteS baT" = eltiT {(baTddA:wodniW = llikSesoohC
)dne
dne    
dne        
)dne            
dne                
dne                    
eslaf = tobmiallikS                        
eslaf = llikSaeS.)(vnegteg                        
                        iveLlliK.)(vnegteg ton ro )"traPtooRdionamuH"(dlihCtsriFdniF:v ton litnu                        
                            eurt = tobmiallikS                            
traPtooRdionamuH.v = noitisoPllikStoBmiA                            
                            dne                            
)(ikaHotuA                                
neht )(evitcAikaHsI ton fi                            
                            dne                            
eurt = llikSaeS.)(vnegteg                                
neht llikSaeS.)(vnegteg ton fi                            
                            dne                            
))0 ,005 ,0(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                                
neht 01 > edutingaM.)noitisoP.traPtooRdionamuH.v - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi                            
             )2.0(tiaw.ksat                            
taeper                        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna "nahtaiveL" == emaN.v fi                    
od ))(nerdlihCteG:stsaeBaeS.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof                
)(noitcnuf(llacp            
neht 3dlroW dna iveLlliK.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
etats = iveLlliK.)(vnegteg    
)etats(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"nahtaiveL kcattA otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
dne    
)dne        
dne            
dne                
dne                    
))Z.soPtegrat ,005 ,X.soPtegrat(wen.emarFC(sopot                        
neht 01 > edutingaM.))Z.soPtegrat ,005 ,X.soPtegrat(wen.3rotceV - soPreyalp( fi                    
                    noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                    
noitisoP.retneC.miDnezorf = soPtegrat lacol                    
neht miDnezorf fi                
)"noisnemiDnezorF"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = miDnezorf lacol                
neht 3dlroW dna noisnemiDnezorFotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
eulaV = noisnemiDnezorFotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"noisnemiD nezorF oT tropeleT" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
    )}
dne    
)"2" ,"nahtaiveLofnI"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
)(noitcnuf = kcabllaC    
,"ypS yuB" = eltiT    
{(nottuBddA:aeS
)}    
)12 ,"-"(per.gnirts = tnetnoC        
,"tnevE nahtaiveL" = eltiT        
{(hpargaraPddA:aeS
)}
dne    
)(revreSekovnI:)"yarPeutatSenustiK/FR"(dlihCroFtiaW:)"teN"(dlihCroFtiaW:)"seludoM"(dlihCroFtiaW:)"egarotSdetacilpeR"(ecivreSteG:emag        
            )(noitcnuf = kcabllaC    
,"psiW eruzA edarT" = eltiT    
{(nottuBddA:aeS
           
)dne
dne    
dne        
)dne            
dne                
)5(tiaw.ksat                    
                    )"yarPeutatSenustiK"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)(revreSekovnI:)"yarPeutatSenustiK/FR"(dlihCtsriFdniF:teN.seludoM.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht rebmEeruAedarToTteS.)(vnegteg => elbaliavAeruzA fi                
                )"rebmE eruzA"(slairetaMtnuoCteG = elbaliavAeruzA lacol                
)(noitcnuf(llacp            
neht rebmEeruAedarT.)(vnegteg fi        
od )3(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
dne
0 nruter    
dne    
dne        
]"tnuoC"[v nruter            
neht emaNlairetaM == emaN.v fi        
od )yrotnevnI(sriap ni v ,_ rof    
)"yrotnevnIteg"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = yrotnevnI lacol    
)emaNlairetaM(slairetaMtnuoCteG noitcnuf
)}
dne    
etats = rebmEeruAedarT.)(vnegteg        
)etats( noitcnuf = kcabllaC    
,eslaf = tluafeD    
,"rebmE eruzA edarT otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
)}
dne    
etats = rebmEeruAedarToTteS.)(vnegteg         
)etats(noitcnuf = kcabllaC     
,5 = gnidnuoR     
,52 = xaM     
,0 = niM     
,02 = tluafeD     
,"rebmE eruzA teS" = eltiT     
{ ,"redilS"(redilSddA:aeS = redilS
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
)emarFC.trap(soptsaf                            
neht 01 > edutingaM.)soPtegrat - soPreyalp( fi                        
                        noitisoP.trap = soPtegrat lacol                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                        
neht trap fi                    
)"traP"(dlihCtsriFdniF:etalpmeTrebme = trap lacol                    
neht etalpmeTrebme dna eruzAdehcatta fi                
)"etalpmeTrebmE"(dlihCtsriFdniF:)"ecapskroW"(ecivreSteG:emag = etalpmeTrebme lacol                
)"rebmEeruzAdehcattA"(dlihCtsriFdniF:)"ecapskroW"(ecivreSteG:emag = eruzAdehcatta lacol                
)(noitcnuf(llacp            
neht eruzAtcelloC.)(vnegteg fi        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
)eruzAtcelloC.)(vnegteg(neewTpotS    
eulav = eruzAtcelloC.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"psiW eruzA tcelloC otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
dne    
dne        
)dne            
dne                
)(revreSekovnI:noitcnuFyarp                    
neht noitcnuFyarp fi                
                )"yarPeutatSenustiK/FR"(dlihCtsriFdniF:ten dna ten = noitcnuFyarp lacol                
)"teN"(dlihCtsriFdniF:seludoM.egarotSdetacilper dna )"seludoM"(dlihCtsriFdniF:egarotSdetacilper = ten lacol                
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilper lacol                
)(noitcnuf(llacp            
neht 3dlroW dna emustiKnommuS.)(vnegteg fi        
  od )6.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
    eulav = emustiKnommuS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"reBmE luoS nommuS otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
dne    
dne        
dne            
))01 ,0 ,0(wen.emarFC * emarFC.traPenirhs(sopot                
traPenirhSnoeN.evitcAenirhS.dnalsIenustik = traPenirhs lacol                
neht dnalsIenustik fi            
)"dnalsIenustiK"(dlihCtsriFdniF:pam = dnalsIenustik lacol            
paM.)"ecapskroW"(ecivreSteG:emag = pam lacol            
neht enustiKoTneewT.)(vnegteg fi        
od )(tiaw elihw    
)(noitcnuf(nwaps
)dne
)enustiKoTneewT.)(vnegteg(neewTpotS    
eulav = enustiKoTneewT.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"dnalsI enustiK oT tropeleT" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
    )}    
)12 ,"-"(per.gnirts = tnetnoC        
,"tnevE enustiK" = eltiT        
{(hpargaraPddA:aeS
         )dne
dne    
)dne        
dne            
eslaf ,eslaf ,eslaf ,eslaf = eeleMllikSenoD ,tiurFllikSenoD ,drowSllikSenoD ,nuGllikSenoD                
)5.0(tiaw.ksat                
                dne                
eurt = nuGllikSenoD                    
                    
dne )1.0 ,"X"(llikSesU neht XnuGllikS.)(vnegteg fi                    
dne )1.0 ,"Z"(llikSesU neht ZnuGllikS.)(vnegteg fi                    
                    dne                    
dne                        
)v(looTpiuqE:dionamuH.retcarahC.reyalp                            
neht "nuG" == piTlooT.v dna )"looT"(AsI:v fi                        
od ))(nerdlihCteG:kcapkcab(sriap ni v ,_ rof                    
neht nuGllikSenoD ton dna llikSnuGaeSesU.)(vnegteg fi                
                dne                
eurt = drowSllikSenoD                    
                    dne )0 ,"X"(llikSesU neht XdrowSllikS.)(vnegteg fi                    
dne )0 ,"Z"(llikSesU neht ZdrowSllikS.)(vnegteg fi                    
                    dne                    
dne                        
)v(looTpiuqE:dionamuH.retcarahC.reyalp                            
neht "drowS" == piTlooT.v dna )"looT"(AsI:v fi                        
od ))(nerdlihCteG:kcapkcab(sriap ni v ,_ rof                    
neht drowSllikSenoD ton dna llikSdrowSaeSesU.)(vnegteg fi                
                dne                
eurt = eeleMllikSenoD                    
                    dne )0 ,"C"(llikSesU neht CeeleMllikS.)(vnegteg fi                    
dne )0 ,"X"(llikSesU neht XeeleMllikS.)(vnegteg fi                    
dne )0 ,"Z"(llikSesU neht ZeeleMllikS.)(vnegteg fi                    
                    dne                    
dne                        
)v(looTpiuqE:dionamuH.retcarahC.reyalp                            
neht "eeleM" == piTlooT.v dna )"looT"(AsI:v fi                        
od ))(nerdlihCteG:kcapkcab(sriap ni v ,_ rof                    
neht eeleMllikSenoD ton dna llikSeeleMaeSesU.)(vnegteg fi                
                dne                
eurt = tiurFllikSenoD                    
                    dne )FlliKSdloHaeS.)(vnegteg ,"F"(llikSesU neht FtiurFllikS.)(vnegteg fi                    
dne )VlliKSdloHaeS.)(vnegteg ,"V"(llikSesU neht VtiurFllikS.)(vnegteg fi                    
dne )ClliKSdloHaeS.)(vnegteg ,"C"(llikSesU neht CtiurFllikS.)(vnegteg fi                    
dne )XlliKSdloHaeS.)(vnegteg ,"X"(llikSesU neht XtiurFllikS.)(vnegteg fi                    
dne )ZlliKSdloHaeS.)(vnegteg ,"Z"(llikSesU neht ZtiurFllikS.)(vnegteg fi                    
                    dne                    
dne                        
)v(looTpiuqE:dionamuH.retcarahC.reyalp                            
neht "tiurF xolB" == piTlooT.v dna )"looT"(AsI:v fi                        
od ))(nerdlihCteG:kcapkcab(sriap ni v ,_ rof                    
neht tiurFllikSenoD ton dna llikStiurFaeSesU.)(vnegteg fi                
                kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
neht llikSaeS.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
dne
)emag ,eslaf ,yek ,eslaf(tnevEyeKdneS:)'reganaMtupnIlautriV'(ecivres:emag    
)emiTdloh(tiaw.ksat    
)emag ,eslaf ,yek ,eurt(tnevEyeKdneS:)'reganaMtupnIlautriV'(ecivres:emag    
)emiTdloh ,yek(llikSesU noitcnuf lacol
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
eslaf = llikSaeS.)(vnegteg                            
eslaf = tobmiallikS                            
tneraP.v ton                                
 ro 0 < htlaeH.dionamuH.v                                
 ro )"traPtooRdionamuH"(dlihCtsriFdniF:v ton                                
 ro )"dionamuH"(dlihCtsriFdniF:v ton                                
 ro tseBaeSotuA.)(vnegteg ton                                
 litnu                            
)tsaeBaeSemarFC(sopot                                
noitisoP.emarFC.traPtooRdionamuH.v = noitisoPllikStoBmiA                                
eurt = tobmiallikS                                
dne                                
eslaf = llikSaeS.)(vnegteg                                    
esle                                
eurt = llikSaeS.)(vnegteg                                    
neht 05 =< edutingaM.)noitisoP.emarFC.traPtooRdionamuH.retcarahC.reyalp - noitisoP.tsaeBaeSemarFC( fi                                
)0 ,004 ,0(wen.emarFC * emarFC.traPtooRdionamuH.v = tsaeBaeSemarFC                                
)(tiaw                                
taeper                            
neht )(tsaeBaeSkcehC fi                        
od ))(nerdlihCteG:stsaeBaeS.ecapskrow(sriap ni v ,_ rof                    
neht )"stsaeBaeS"(dlihCtsriFdniF:ecapskrow fi                
reyalPlacoL.sreyalP.emag = reyalp lacol                
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol                
)(noitcnuf(llacp            
neht tseBaeSotuA.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
dne
eslaf nruter    
dne    
dne        
eurt nruter            
neht 0 > htlaeH.dionamuh dna traPtoor dna dionamuh fi        
)"traPtooRdionamuH"(dlihCtsriFdniF:tsaeb = traPtoor lacol        
)"dionamuH"(dlihCtsriFdniF:tsaeb = dionamuh lacol        
od ))(nerdlihCteG:stsaeBaes(sriapi ni tsaeb ,_ rof    
dne eslaf nruter neht stsaeBaes ton fi    
)"stsaeBaeS"(dlihCtsriFdniF:)"ecapskroW"(ecivreSteG:emag = stsaeBaes lacol    
)(tsaeBaeSkcehC noitcnuf
)dne
dne    
eslaf = tobmiallikS        
eslaf = llikSaeS.)(vnegteg        
neht tseBaeSotuA.)(vnegteg ton fi    
)tseBaeSotuA.)(vnegteg(neewTpotS    
eulav = tseBaeSotuA.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"tsaeB aeS otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
)krahsrorreTotuA.)(vnegteg(neewTpotS    
eulav = krahsrorreTotuA.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"krahS rorreT otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
   
)dne
dne    
)dne        
dne            
dne                
eslaf = llikSaeS.)(vnegteg                    
eslaf = tobmiallikS                    
taoBhsiFzleR.)(vnegteg ton                        
 ro )"enignE"(dlihCtsriFdniF:v ton                        
 ro )"taoBhsiF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ton                        
 ro 0 =< eulaV.htlaeH.v ro tneraP.v ton                        
 litnu                    
noitisoP.enignE.v = noitisoPllikStoBmiA                        
eurt = tobmiallikS                        
dne                        
)taoBhsiFemarFC(sopot                            
neht 2 > edutingaM.)noitisoP.taoBhsiFemarFC - noitisoP.toor( dna toor fi                        
dne                        
eslaf = llikSaeS.)(vnegteg                            
esle                        
eurt = llikSaeS.)(vnegteg                            
neht 05 =< edutingaM.)noitisoP.toor - noitisoP.enignE.v( dna toor fi                        
)"traPtooRdionamuH"(dlihCtsriFdniF:rahc dna rahc = toor lacol                        
retcarahC.reyalp dna reyalp = rahc lacol                        
reyalPlacoL.sreyalP.emag = reyalp lacol                        
)0 ,01 ,0(wen.emarFC * emarFC.enignE.v = taoBhsiFemarFC lacol                        
)1.0(tiaw.ksat taeper                    
neht )"enignE"(dlihCtsriFdniF:v dna "taoBhsiF" == emaN.v fi                
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof            
dne nruter neht taoBhsiFzleR.)(vnegteg ton fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)edagirBdnarGetariPzleR.)(vnegteg(neewTpotS    
eulav = edagirBdnarGetariPzleR.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"edagirB dnarG etariP otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
)edagirBetariPzleR.)(vnegteg(neewTpotS    
eulav = edagirBetariPzleR.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"edagirB etariP otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
dne    
eslaf = tobmiallikS        
eslaf = llikSaeS.)(vnegteg        
neht taoBhsiFzleR.)(vnegteg ton fi    
)taoBhsiFzleR.)(vnegteg(neewTpotS    
eulav = taoBhsiFzleR.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)}
eslaf = tluafeD    
,"pihS tsohG otuA" = eltiT    
{ ,"elggoT"(elggoTddA:aeS = elggoT
dne
)2(tiaw.ksat    
))0 ,003 ,0(wen.emarFC * sop(soptsaf    
)1(tiaw.ksat    
))0 ,04 ,0(wen.emarFC * sop(soptsaf    
dne nruter neht "emarFC" =~ )sop(foepyt fi    
)sop(soPnwoDpU noitcnuf
)dne
dne    
)dne        
dne            
dne                
dne                    
krahsrorreTotuA.)(vnegteg ton litnu                        
)(tiaw.ksat                            
taeper                        
neht 051 =< edutingaM.)noitisoP.toor - noitisoP.traPtooRdionamuH.krahs( fi                    
neht )"traPtooRdionamuH"(dlihCtsriFdniF:krahs dna krahs fi                
)"krahsrorreT"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = krahs lacol                
                dne nruter neht toor ton fi                
)"traPtooRdionamuH"(dlihCtsriFdniF:rahc dna rahc = toor lacol                
retcarahC.reyalp dna reyalp = rahc lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
neht krahsrorreTotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
dne                    
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro krahsrorreTotuA.)(vnegteg ton litnu                        
emarFC.traPtooRdionamuH.v = sopkrahSrorreT                            
dne                            
))0 ,55 ,0(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                                
esle                            
)1(tiaw.ksat                                
))0 ,003 ,0(wen.emarFC * emarFC.traPtooRdionamuH.v(soptsaf                                
neht 0002 < htlaeH.dionamuH.rahc fi                            
)06 ,06 ,06(wen.3rotceV = eziS.traPtooRdionamuH.v                            
0 = deepSklaW.dionamuH.v                            
eslaf = edilloCnaC.traPtooRdionamuH.v                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
)(ikaHotuA                            
)1.0(tiaw.ksat                            
taeper                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                        
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "krahsrorreT" == emaN.v fi                    
od )seimene(sriap ni v ,_ rof                
neht 3dlroW dna krahsrorreTotuA.)(vnegteg fi            
dne            
dne                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro werChsiFlliKotuA.)(vnegteg ton litnu                            
emarFC.traPtooRdionamuH.v = noMsoP                                
emaN.v = mraFnoM                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw.ksat                                
taeper                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
neht 005 =< edutingaM.)noitisoP.toor - noitisoP.traPtooRdionamuH.v( fi                        
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "rebmeM werC hsiF" == emaN.v fi                    
od )seimene(sriap ni v ,_ rof                
neht 3dlroW dna werChsiFlliKotuA.)(vnegteg fi            
dne            
dne                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro ahnariPlliKotuA.)(vnegteg ton litnu                            
)soP * emarFC.traPtooRdionamuH.v(sopot                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw.ksat                                
taeper                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
neht 005 =< edutingaM.)noitisoP.toor - noitisoP.traPtooRdionamuH.v( fi                        
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "ahnariP" == emaN.v fi                    
od )seimene(sriap ni v ,_ rof                
neht 3dlroW dna ahnariPlliKotuA.)(vnegteg fi            
dne            
dne                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro krahSlliKotuA.)(vnegteg ton litnu                            
)soP * emarFC.traPtooRdionamuH.v(sopot                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw.ksat                                
taeper                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
neht 005 =< edutingaM.)noitisoP.toor - noitisoP.traPtooRdionamuH.v( fi                        
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "krahS" == emaN.v fi                    
od )seimene(sriap ni v ,_ rof                
neht 3dlroW dna krahSlliKotuA.)(vnegteg fi            
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol            
            dne nruter neht toor ton fi            
)"traPtooRdionamuH"(dlihCtsriFdniF:rahc dna rahc = toor lacol            
retcarahC.reyalp dna reyalp = rahc lacol            
reyalPlacoL.sreyalP.emag = reyalp lacol            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)werChsiFlliKotuA.)(vnegteg(neewTpotS    
eulav = werChsiFlliKotuA.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"werC hsiF otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
)ahnariPlliKotuA.)(vnegteg(neewTpotS    
eulav = ahnariPlliKotuA.)(vnegteg    
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"ahnariP otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
)krahSlliKotuA.)(vnegteg(neewTpotS   
eulav = krahSlliKotuA.)(vnegteg   
)eulav(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"krahS otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
dne    
)dne        
dne            
dne                
dne                    
eslaf = llikSaeS.)(vnegteg                        
eslaf = tobmiallikS                        
taoBhsiFzleR.)(vnegteg ton ro 0 < htlaeH.ymene ro tneraP.ymene ton litnu                        
)0 ,51- ,0(wen.3rotceV + noitisoP.emarFCtaob = noitisoPllikStoBmiA                            
eurt = tobmiallikS                            
dne                            
)emarFCtaob(sopot                                
neht 5 > edutingaM.)soPreyalp - noitisoP.emarFCtaob( fi                            
                            05 =< edutingaM.)soPreyalp - noitisoP.emarFCtaob( = llikSaeS.)(vnegteg                            
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                            
)(tiaw.ksat                            
taeper                        
emarFC.enignE.ymene = emarFCtaob lacol                        
neht )"enignE"(dlihCtsriFdniF:ymene fi                    
od )seimene(sriap ni ymene ,_ rof                
neht taoBhsiFzleR.)(vnegteg fiesle            
dne                
dne                    
eslaf = tengaMtratS.)(vnegteg                        
0 =< htlaeH.dionamuH.ymene ro tneraP.ymene ton ro werChsiFlliKotuA.)(vnegteg ton litnu                        
eslaf = llikSaeS.)(vnegteg                            
)soP * emarFC.traPtooRdionamuH.ymene(sopot                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
)(ikaHotuA                            
)(tiaw.ksat                            
taeper                        
eurt = tengaMtratS.)(vnegteg                        
neht 0 > htlaeH.dionamuH.ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna "rebmeM werC hsiF" == emaN.ymene fi                    
od )seimene(sriap ni ymene ,_ rof                
neht werChsiFlliKotuA.)(vnegteg fi            
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol            
dne nruter neht taoBliaS.)(vnegteg ton fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
dne                    
eslaf = llikSaeS.)(vnegteg                        
eslaf = tobmiallikS                        
taoBhsiFzleR.)(vnegteg ton ro 0 < htlaeH.ymene ro tneraP.ymene ton litnu                        
)0 ,51- ,0(wen.3rotceV + noitisoP.emarFCtaob = noitisoPllikStoBmiA                            
eurt = tobmiallikS                            
05 =< edutingaM.)soPreyalp - noitisoP.emarFCtaob( = llikSaeS.)(vnegteg                            
dne                            
)emarFCtaob(sopot                                
neht 5 > edutingaM.)soPreyalp - noitisoP.emarFCtaob( fi                            
                            noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                            
)(tiaw.ksat                            
taeper                        
emarFC.enignE.ymene = emarFCtaob lacol                        
neht )"enignE"(dlihCtsriFdniF:ymene fi                    
od )seimene(sriap ni ymene ,_ rof                
neht taoBhsiFzleR.)(vnegteg fi            
dne            
dne                
dne                    
eslaf = gnirBtratS                        
0 =< htlaeH.dionamuH.ymene ro tneraP.ymene ton ro werChsiFlliKotuA.)(vnegteg ton litnu                        
eslaf = llikSaeS.)(vnegteg                            
dne                            
)soP * emarFC.traPtooRdionamuH.ymene(sopot                                
neht 5 > edutingaM.)soPreyalp - soPymene( fi                            
noitisoP.traPtooRdionamuH.ymene = soPymene lacol                            
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                            
)(ikaHotuA                            
)(tiaw.ksat                            
taeper                        
eurt = gnirBtratS                        
neht 0 > htlaeH.dionamuH.ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna "rebmeM werC hsiF" == emaN.ymene fi                    
od )seimene(sriap ni ymene ,_ rof                
neht werChsiFlliKotuA.)(vnegteg fi            
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol            
            dne nruter neht taoBliaS.)(vnegteg ton fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
)emag ,eslaf ,23 ,eslaf(tnevEyeKdneS:miv                    
)1.0(tiaw.ksat                    
)emag ,eslaf ,23 ,eurt(tnevEyeKdneS:miv                    
)"reganaMtupnIlautriV"(ecivreSteG:emag = miv lacol                    
neht tiS.dionamuh dna dionamuh fi                
)"dionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag = dionamuh lacol                
neht ymenEsah fi            
dne            
eurt = ymenEsah                
neht )tseBaeSotuA.)(vnegteg dna )(tsaeBaeSkcehC(               
 ro )edagirBdnarGetariPzleR.)(vnegteg dna )"edagirBdnarGetariP"(dlihCtsriFdniF:seimene(               
 ro )edagirBetariPzleR.)(vnegteg dna )"edagirBetariP"(dlihCtsriFdniF:seimene(               
 ro )taoBhsiFzleR.)(vnegteg dna )"taoBhsiF"(dlihCtsriFdniF:seimene(               
 ro )werChsiFlliKotuA.)(vnegteg dna )"rebmeM werC hsiF"(dlihCtsriFdniF:seimene(               
 ro )ahnariPlliKotuA.)(vnegteg dna )(ahnariPkcehC(               
 ro )krahsrorreTotuA.)(vnegteg dna )"krahsrorreT"(dlihCtsriFdniF:seimene(               
 ro )krahSlliKotuA.)(vnegteg dna )(krahSkcehC( fi            
eslaf = ymenEsah lacol            
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol            
dne eunitnoc neht taoBliaS.)(vnegteg ton fi            
od )2.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
dne                            
dne                                
)emag ,eslaf ,23 ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                    
)1.0(tiaw                                    
)emag ,eslaf ,23 ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                    
dne )(potS:taobpots neht taobpots fi                                    
                                    eslaf == taoBliaS.)(vnegteg ro                                        
 eslaf == tiS.)"dionamuH"(dlihCroFtiaW:retcarahC.reyalPlacoL.sreyalP.emag ro                                        
 ))tseBaeSotuA.)(vnegteg dna )(tsaeBaeSkcehC( ro                                        
 )edagirBdnarGetariPzleR.)(vnegteg dna )"edagirBdnarGetariP"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )edagirBetariPzleR.)(vnegteg dna )"edagirBetariP"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )taoBhsiFzleR.)(vnegteg dna )"taoBhsiF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )werChsiFlliKotuA.)(vnegteg dna )"rebmeM werC hsiF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )ahnariPlliKotuA.)(vnegteg dna )(ahnariPkcehC( ro                                        
 )krahsrorreTotuA.)(vnegteg dna )"krahsrorreT"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )krahSlliKotuA.)(vnegteg dna )(krahSkcehC(( litnu                                    
)taeSelciheV.v ,enoZdetceleSemarFC(BPT = taobpots                                        
)(tiaw                                        
 taeper                                    
esle                                
dne                                    
))0 ,1 ,0(wen.emarFC * emarFC.taeSelciheV.v(sopot = soppots                                        
esle                                    
dne )(potS:soppots neht soppots fi                                        
                                        neht ))tseBaeSotuA.)(vnegteg dna )(tsaeBaeSkcehC( ro                                        
 )edagirBdnarGetariPzleR.)(vnegteg dna )"edagirBdnarGetariP"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )edagirBetariPzleR.)(vnegteg dna )"edagirBetariP"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )taoBhsiFzleR.)(vnegteg dna )"taoBhsiF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )werChsiFlliKotuA.)(vnegteg dna )"rebmeM werC hsiF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )ahnariPlliKotuA.)(vnegteg dna )(ahnariPkcehC( ro                                        
 )krahsrorreTotuA.)(vnegteg dna )"krahsrorreT"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag( ro                                        
 )krahSlliKotuA.)(vnegteg dna )(krahSkcehC(( fi                                    
neht eslaf == tiS.)"dionamuH"(dlihCroFtiaW:retcarahC.reyalPlacoL.sreyalP.emag fi                                
neht )"psEtaoByM"(dlihCtsriFdniF:v fi                            
neht taoBdetceleS.)(vnegteg == emaN.v fi                        
od ))(nerdlihCteG:staoB.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                    
neht )(taoBkcehC fiesle                
dne                    
dne                        
dne                            
dne                                
)v ,'psEtaoByM'(psEddA                                    
neht 001 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag -                                    
 noitisoP.emarFC.taeSelciheV.v( fi                                
neht taoBdetceleS.)(vnegteg == emaN.v fi                            
od ))(nerdlihCteG:staoB.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                        
)taoBdetceleS.)(vnegteg ,"taoByuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
dne )(potS:byub neht byub fi                        
                        neht 01 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag -                        
 noitisoP.)1870033882468.334 ,8070588163680.9 ,578171154.72961-(wen.emarFC( fi                    
dne                    
)emarFCtaoByuB(sopot = byub                        
esle                    
)emarFCtaoByuB(PTB                        
neht 0001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.emarFCtaoByuB( fi                    
                    )1870033882468.334 ,8070588163680.9 ,578171154.72961-(wen.emarFC = emarFCtaoByuB                    
neht )(taoBkcehC ton fi                
neht taoBliaS.)(vnegteg fi            
)(noitcnuf(llacp        
od )2.0(tiaw elihw    
)(noitcnuf(nwaps
dne
iuGdraoblliB nruter    
"↓EREH SI TAOB RUOY" = txeT.lebaLtxeT    
51 = eziStxeT.lebaLtxeT    
)1 ,1 ,1(wen.3roloC = 3roloCtxeT.lebaLtxeT    
dloBmahtoG.tnoF.munE = tnoF.lebaLtxeT    
)0 ,1 ,0 ,1(wen.2miDU = eziS.lebaLtxeT    
1 = ycnerapsnarTdnuorgkcaB.lebaLtxeT    
iuGdraoblliB = tneraP.lebaLtxeT    
)0 ,5.2 ,0(wen.3rotceV = tesffOsdutS.iuGdraoblliB    
)05 ,0 ,002 ,0(wen.2miDU = eziS.iuGdraoblliB    
eurt = poTnOsyawlA.iuGdraoblliB    
gnilbiS.roivaheBxednIZ.munE = roivaheBxednIZ.iuGdraoblliB    
tneraP = tneraP.iuGdraoblliB    
emaN = emaN.iuGdraoblliB    
)"lebaLtxeT"(wen.ecnatsnI = lebaLtxeT lacol    
)"iuGdraoblliB"(wen.ecnatsnI = iuGdraoblliB lacol    
dne    
nruter        
neht )"ecnatsnI"(AsI:tneraP ton ro tneraP ton fi    
)tneraP ,emaN(psEddA noitcnuf
dne
eslaf nruter    
dne    
dne        
dne            
eurt nruter                
neht 002 =< edutingaM.)noitisoP.traPtoor - noitisoP.tooRymene( fi            
neht 0 > htlaeH.dionamuh dna tooRymene dna dionamuh dna "ahnariP" == emaN.v fi        
)"traPtooRdionamuH"(dlihCtsriFdniF:v = tooRymene lacol        
)"dionamuH"(dlihCtsriFdniF:v = dionamuh lacol        
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof    
dne    
eslaf nruter        
neht )traPtoor dna seimene( ton fi    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc = traPtoor lacol    
retcarahC.reyalp dna reyalp = retcarahc lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)"seimenE"(dlihCtsriFdniF:ecapskrow = seimene lacol    
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol    
)(ahnariPkcehC noitcnuf
dne
eslaf nruter    
dne    
dne        
dne            
eurt nruter                
neht 002 =< edutingaM.)noitisoP.traPtoor - noitisoP.tooRymene( fi            
neht 0 > htlaeH.dionamuh dna tooRymene dna dionamuh dna "krahS" == emaN.v fi        
)"traPtooRdionamuH"(dlihCtsriFdniF:v = tooRymene lacol        
)"dionamuH"(dlihCtsriFdniF:v = dionamuh lacol        
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof    
dne    
eslaf nruter        
neht )traPtoor dna seimene( ton fi    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc = traPtoor lacol    
retcarahC.reyalp dna reyalp = retcarahc lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)"seimenE"(dlihCtsriFdniF:ecapskrow = seimene lacol    
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol    
)(krahSkcehC noitcnuf
dne
eslaf ro eurt dna        
 )"edagirBdnarGetariP"(dlihCtsriFdniF:seimene ro        
 )"edagirBetariP"(dlihCtsriFdniF:seimene ro        
 )"taoBhsiF"(dlihCtsriFdniF:seimene nruter    
dne    
eslaf nruter        
neht seimene ton fi    
    )"seimenE"(dlihCtsriFdniF:)"ecapskroW"(ecivreSteG:emag = seimene lacol    
)(taoBseimenEkcehC noitcnuf
dne
eslaf nruter    
dne    
dne        
dne            
taob nruter                
neht )"psEtaoByM"(dlihCtsriFdniF:taob fi            
neht taoBdetceles == emaN.taob fi        
od ))(nerdlihCteG:staob(sriap ni taob ,_ rof    
dne    
eslaf nruter        
neht )taoBdetceles dna staob( ton fi    
taoBdetceleS.)(vnegteg = taoBdetceles lacol    
)"staoB"(dlihCtsriFdniF:ecapskrow = staob lacol    
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol    
)(taoBkcehC noitcnuf
)dne
)taoBliaS.)(vnegteg(neewTpotS    
etats = taoBliaS.)(vnegteg    
)etats(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD,"tnevE aeS otuA" = eltiT{ ,"elggoT"(elggoTddA:aeS = elggoT
)dne
)dne    
dne        
dne            
)                
2730106480.0- ,5211861560.0- ,35182499.0-                    
,01-e11491320.2 ,249858799.0 ,7985204560.0-                    
,9414699.0 ,85721335500.0- ,1609914480.0-                    
,4858.4421- ,4023000.03 ,7167.14544-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "6 enoZ" == enoZdetceleS.)(vnegteg fiesle            
)                
966620981.0- ,4195675630.0- ,915092189.0-                    
,90-e93328893.1- ,320603999.0 ,1101842730.0-                    
,979179189.0 ,59288040700.0- ,494598881.0-                    
,32099.2612- ,8754000.03 ,7455.78883-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "5 enoZ" == enoZdetceleS.)(vnegteg fiesle            
)                
2797974390.0 ,990365260.0 ,635356399.0-                    
,69023336400.0- ,952040899.0 ,9604304260.0                    
,614016599.0 ,91245922100.0- ,7474685390.0                    
,21021.0652- ,7677812.03 ,5786.45043-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "4 enoZ" == enoZdetceleS.)(vnegteg fiesle            
)                
636576673.0 ,2059700730.0- ,556506529.0-                    
,11-e37669807.2 ,556102999.0 ,4794059930.0-                    
,922543629.0 ,1973840510.0 ,39473673.0                    
,47739.6522- ,1101000.03 ,759.17113-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "3 enoZ" == enoZdetceleS.)(vnegteg fiesle            
)                
815480803.0 ,9856076060.0- ,974224949.0-                    
,01-e71043351.4- ,244469799.0 ,2626277360.0-                    
,479853159.0 ,853746910.0 ,714754703.0                    
,230858.228- ,4745000.03 ,5125.97762-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "2 enoZ" == enoZdetceleS.)(vnegteg fiesle            
)                
208112021.0 ,8555599650.0- ,208011199.0-                    
,01-e10290563.2- ,165053899.0 ,2498114750.0-                    
,62847299.0 ,63785109600.0 ,825310021.0                    
,341903.286- ,4806000.03 ,573.89912-                    
(wen.emarFC = enoZdetceleSemarFC                
neht "1 enoZ" == enoZdetceleS.)(vnegteg fi            
od )(tiaw elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = taoBdeepS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:neewttaob
)}
,003 = tluafeD    
,eslaf = itluM    
,}"053" ,"523" ,"003" ,"052" ,"002" ,"081"{ = seulaV    
,"taoB neewT deepS" = eltiT    
{ ,"neewttaob"(nwodporDddA:aeS = neewttaob
)dne
eulav = taoBdetceleS.)(vnegteg	
)eulav(noitcnuf(degnahCnO:neyuhttceles
)}
,eslaf = tluafeD	
,eslaf = itluM	
,taoBaeStsiL = seulaV	
,"taoB tceleS" = eltiT	
{ ,"neyuhttceles"(nwodporDddA:aeS = neyuhttceles
}
,"retnuHtsaeB"  
,"poolSeniraM"  
,"poolSetariP"  
,"edagirBeniraM"  
,"edagirBetariP"  
,"edagirBdnarGeniraM"  
,"edagirBdnarGetariP"  
,"naidrauG"  
{ = taoBaeStsiL
)dne
eulav = enoZdetceleS.)(vnegteg	
)eulav(noitcnuf(degnahCnO:tcelesenoz
)}
,eslaf = tluafeD	
,eslaf = itluM	
,enoZaeStsiL = seulaV	
,"enoZ tceleS" = eltiT	
{ ,"tcelesenoz"(nwodporDddA:aeS = tcelesenoz
}
"6 enoZ"  
,"5 enoZ"  
,"4 enoZ"  
,"3 enoZ"  
,"2 enoZ"  
,"1 enoZ"  
{ = enoZaeStsiL
    )003(eulaVteS:redilStaoBdeepSteS
)dne
eulav = taoBdeepSteS	
)eulav(noitcnuf(degnahCnO:redilStaoBdeepSteS
)}
dne	
eulav = taoBdeepSteS    
)eulav(noitcnuf = kcabllaC	
,1 = gnidnuoR	
,0001 = xaM	
,0 = niM	
,003 = tluafeD	
,"deepS pihS" = eltiT	
{ ,"taoBdeepSredilS"(redilSddA:aeS = redilStaoBdeepSteS
)} "" = nocI ,"tnevE aeS baT" = eltiT {(baTddA:wodniW = aeS
dne
)}
dne    
))818347529.0- ,80-e1261867.9 ,832151873.0 ,70-e95577370.1 ,1 ,90-e64130555.4 ,832151873.0- ,80-e99471284.4 ,818347529.0- ,7210.3282- ,550448.413 ,96804.7105-(wen.emarFC(sopot        
)(noitcnuf = kcabllaC    
,"" = noitpircseD    
,"baL oT tropeleT" = eltiT    
{(nottuBddA:golB
neht 3dlroW fi
dne
)}
dne    
))48605.1054- ,553546.052 ,53537.8346-(wen.emarFC(sopot        
)(noitcnuf = kcabllaC    
,"" = noitpircseD    
,"baL oT tropeleT" = eltiT    
{(nottuBddA:golB
neht 2dlroW fi
)dne
)dne    
dne        
dne            
)"nekawA" ,"renekawA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
)"kcehC" ,"renekawA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht nekawAotuA.)(vnegteg fi            
od )1(tiaw elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = nekawAotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"tiurF nekawA otuA" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
)rotceteDkcilC.niaM.nottuB.2nommuSdiaR.]"eltsaC taoB"[paM.)"ecapskroW"(ecivreSteG:emag(rotcetedkcilcerif                            
neht 3dlroW fiesle                        
)rotceteDkcilC.niaM.nottuB.2nommuSdiaR.dnalsIelcriC.paM.)"ecapskroW"(ecivreSteG:emag(rotcetedkcilcerif                            
neht 2dlroW fi                        
neht pihcorciMlaiceps fi                    
)"pihcorciM laicepS"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ro                                            
 )"pihcorciM laicepS"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = pihcorciMlaiceps lacol                    
neht eslaf == elbisiV.remiT.niaM.iuGreyalP.]"reyalPlacoL"[)"sreyalP"(ecivreSteG:emag fi                
neht noegnuD_otuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
)dne            
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
}                
pihCtceleS.)(vnegteg = ]3[                    
,"tceleS" = ]2[                    
,"cpNsdiaR" = ]1[                    
{ = sgra lacol                
)(noitcnuf(llacp            
neht noegnuD_otuA.)(vnegteg fi        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
dne            
dne                
)dne                    
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro noegnuD_otuA.)(vnegteg ton litnu                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                            
eslaf = edilloCnaC.traPtooRdionamuH.v                            
0 = htlaeH.dionamuH.v                            
)100.(tiaw.ksat taeper                        
)(noitcnuf(llacp                    
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi                
od ))(stnadnecseDteG:seimenE.ecapskroW.emag(sriap ni v ,i rof            
neht noegnuD_otuA.)(vnegteg fi        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
)rotceteDkcilC.niaM.nottuB.2nommuSdiaR.]"eltsaC taoB"[paM.)"ecapskroW"(ecivreSteG:emag(rotcetedkcilcerif                            
neht 3dlroW fiesle                        
)rotceteDkcilC.niaM.nottuB.2nommuSdiaR.dnalsIelcriC.paM.)"ecapskroW"(ecivreSteG:emag(rotcetedkcilcerif                            
neht 2dlroW fi                        
neht pihcorciMlaiceps fi                    
)"pihcorciM laicepS"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ro                                            
 )"pihcorciM laicepS"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = pihcorciMlaiceps lacol                    
neht eslaf == elbisiV.remiT.niaM.iuGreyalP.]"reyalPlacoL"[)"sreyalP"(ecivreSteG:emag fi                
neht noegnuD_otuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
dne            
dne                
dne                    
kaerb                        
))001 ,07 ,0(wen.emarFC * emarFC.noitacol(sopot                        
neht noitacol fi                    
)dnalsi(dlihCtsriFdniF:snoitacoL.]"nigirOdlroW_"[)"ecapskroW"(ecivreSteG:emag = noitacol lacol                    
od )sdnalsi(sriapi ni dnalsi ,_ rof                
}"1 dnalsI" ,"2 dnalsI" ,"3 dnalsI" ,"4 dnalsI" ,"5 dnalsI"{ = sdnalsi lacol                
neht eslaf == elbisiV.remiTdiaR.tsiLDUHpoT.niaM.iuGreyalP.reyalPlacoL.sreyalP.emag ton fi            
neht noegnuD_otuA.)(vnegteg fi        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = noegnuD_otuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"diaR otuA" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
)dne
dne    
)dne        
dne            
dne                
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
}                    
tiurf = ]2[                        
,"tiurFdaoL" = ]1[                        
{ = sgra lacol                    
od )stiurf(sriapi ni tiurf ,_ rof                

}"reirraB-reirraB" ,"rebbuR-rebbuR" ,"thgiL-thgiL" ,"dnomaiD-dnomaiD" ,"tsohG-tsohG"                                
 ,"kraD-kraD" ,"dnaS-dnaS" ,"ecI-ecI" ,"noclaF-noclaF" ,"emalF-emalF" ,"ekipS-ekipS"                                
 ,"ekomS-ekomS" ,"bmoB-bmoB" ,"gnirpS-gnirpS" ,"pohC-pohC" ,"nipS-nipS" ,"tekcoR-tekcoR"{ = stiurf lacol                
neht tiurFteGotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1.(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = tiurFteGotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eslaf = tluafeD ,"ileB woL yrotnevnI nI tiurF teG" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
)dne
eulaV = pihCtceleS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:nwodporD
)}
,eslaf = itluM    
,}    
"hguoD" ,"xineohP"        
 ,"redipS" ,"ahdduB" ,"ekauQ" ,"thgiL" ,"ecI"        
 ,"emalF" ,"elbmuR" ,"amgaM" ,"dnaS" ,"kraD"        
{ = seulaV    
,"diaR tceleS" = eltiT    
{ ,"nwodporD"(nwodporDddA:golB = nwodporD
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"sdiaR" = eltiT    
{(hpargaraPddA:golB
)dne
)dne    
dne        
dne            
)tiurFtceleS.)(vnegteg ,"tiurFwaResahcruP"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
)"stiurFteG"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht repinStiurFyuBotuA.)(vnegteg fi            
od )1(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = repinStiurFyuBotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"pohS repinS tiurF xolB yuB" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
    )dne
eulaV = tiurFtceleS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:nwodporD
)}
,eslaf = itluM    
,tsiLtiurF = seulaV    
,"pohS repinS tiurF xolB" = eltiT    
{ ,"nwodporD"(nwodporDddA:golB = nwodporD
} 
"nogarD-nogarD"  
,"enustiK-enustiK"  
,"iteY-iteY"  
,"drapoeL-drapoeL"  
,"tiripS-tiripS"  
,"lortnoC-lortnoC"  
,"saG-saG"  
,"moneV-moneV"  
,"wodahS-wodahS"  
,"hguoD-hguoD"  
,"htommaM-htommaM"  
,"xeR-T-xeR-T"  
,"ytivarG-ytivarG"  
,"drazzilB-drazzilB"  
,"niaP-niaP"  
,"elbmuR-elbmuR"  
,"latroP-latroP"  
,"xineohP-xineohP"  
,"dnuoS-dnuoS"  
,"redipS-redipS"  
,"evoL-evoL"  
,"ahdduB-ahdduB"  
,"ekauQ-ekauQ"  
,"amgaM-amgaM"  
,"tsohG-tsohG"  
,"reirraB-reirraB"  
,"rebbuR-rebbuR"  
,"thgiL-thgiL"  
,"dnomaiD-dnomaiD"  
,"kraD-kraD"  
,"dnaS-dnaS"  
,"ecI-ecI"  
,"noclaF-noclaF"  
,"emalF-emalF"  
,"ekipS-ekipS"  
,"ekomS-ekomS"  
,"bmoB-bmoB"  
,"gnirpS-gnirpS"  
,"edalB-edalB"  
,"nipS-nipS"  
,"tekcoR-tekcoR"  
{ = tsiLtiurF
)dne
dne    
)1.0(tiaw.ksat        
dne        
)dne            
dne                
dne                    
dne                        
))emaNtiurf(dlihCtsriFdniF:kcapkcab ,emaNrevres ,"tiurFerotS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
neht )emaNtiurf(dlihCtsriFdniF:kcapkcab ro )emaNtiurf(dlihCtsriFdniF:retcarahc fi                        
]2[tiurf ,]1[tiurf = emaNrevres ,emaNtiurf lacol                        
od )stiurf(sriapi ni tiurf ,_ rof                    
}                    
,}"nogarD-nogarD" ,"tiurF nogarD"{                        
,}"enustiK-enustiK" ,"tiurF enustiK"{                        
,}"iteY-iteY" ,"tiurF iteY"{                        
,}"drapoeL-drapoeL" ,"tiurF drapoeL"{                        
,}"tiripS-tiripS" ,"tiurF tiripS"{                        
,}"lortnoC-lortnoC" ,"tiurF lortnoC"{                        
,}"saG-saG" ,"tiurF saG"{                        
,}"moneV-moneV" ,"tiurF moneV"{                        
,}"wodahS-wodahS" ,"tiurF wodahS"{                        
,}"hguoD-hguoD" ,"tiurF hguoD"{                        
,}"xeR-T-xeR-T" ,"tiurF xeR-T"{                        
,}"htommaM-htommaM" ,"tiurF htommaM"{                        
,}"ytivarG-ytivarG" ,"tiurF ytivarG"{                        
,}"drazzilB-drazzilB" ,"tiurF drazzilB"{                        
,}"niaP-niaP" ,"tiurF niaP"{                        
,}"elbmuR-elbmuR" ,"tiurF elbmuR"{                        
,}"latroP-latroP" ,"tiurF latroP"{                        
,}"xineohP-xineohP" ,"tiurF xineohP"{                        
,}"dnuoS-dnuoS" ,"tiurF dnuoS"{                        
,}"redipS-redipS" ,"tiurF redipS"{                        
,}"evoL-evoL" ,"tiurF evoL"{                        
,}"ahdduB-ahdduB" ,"tiurF ahdduB"{                        
,}"ekauQ-ekauQ" ,"tiurF ekauQ"{                        
,}"amgaM-amgaM" ,"tiurF amgaM"{                        
,}"tsohG-tsohG" ,"tiurF tsohG"{                        
,}"reirraB-reirraB" ,"tiurF reirraB"{                        
,}"rebbuR-rebbuR" ,"tiurF rebbuR"{                        
,}"thgiL-thgiL" ,"tiurF thgiL"{                        
,}"dnomaiD-dnomaiD" ,"tiurF dnomaiD"{                        
,}"kraD-kraD" ,"tiurF kraD"{                        
,}"dnaS-dnaS" ,"tiurF dnaS"{                        
,}"ecI-ecI" ,"tiurF ecI"{                        
,}"noclaF-noclaF" ,"tiurF noclaF"{                        
,}"emalF-emalF" ,"tiurF emalF"{                        
,}"ekipS-ekipS" ,"tiurF ekipS"{                        
,}"ekomS-ekomS" ,"tiurF ekomS"{                        
,}"bmoB-bmoB" ,"tiurF bmoB"{                        
,}"gnirpS-gnirpS" ,"tiurF gnirpS"{                        
,}"edalB-edalB" ,"tiurF edalB"{                        
,}"nipS-nipS" ,"tiurF nipS"{                        
,}"tekcoR-tekcoR" ,"tiurF tekcoR"{                        
{ = stiurf lacol                    
kcapkcaB.reyalp = kcapkcab lacol                    
retcarahC.reyalp = retcarahc lacol                    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                    
neht tiurFerotSotuA.)(vnegteg fi                
)(noitcnuf(llacp            
neht tiurFerotSotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
    )dne
eulaV = tiurFerotSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tiurF erotS otuA" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
)dne
dne     
 dne          
)"yuB","nisuoC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag              
neht tiurFmodnaR.)(vnegteg fi         
od )2.0(tiaw.ksat elihw     
)(noitcnuf(nwaps
)dne
eulaV = tiurFmodnaR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tiurF liveD modnaR" = eltiT{ ,"elggoT"(elggoTddA:golB = elggoT
)} "" = nocI ,"diaR dnA tiurF baT" = eltiT {(baTddA:wodniW = golB
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
))2 ,01 ,5(wen.emarFC * emarFC.traPtooRdionamuH.)ssob(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag(sopot                            
neht )ssob(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag fi                        
esle                    
dne                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro ssoBllAmraFotuA.)(vnegteg ton litnu                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
)08 ,08 ,08(wen.3rotceV = eziS.traPtooRdionamuH.v                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
)(ikaHotuA                                        
)(tiaw.ksat                                        
taeper                                    
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi                                
neht ssob == emaN.v fi                            
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                        
neht )ssob(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
od )ssoBelbat(sriap ni ssob ,i rof                
)(noitcnuf(llacp            
neht ssoBllAmraFotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
    )ssoBllAmraFotuA.)(vnegteg(neewTpotS    
eulaV = ssoBllAmraFotuA.)(vnegteg    
    )eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ssoB llA lliK otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
))7 ,01 ,5(wen.emarFC * emarFC.traPtooRdionamuH.ssoBdetacilper(sopot                        
neht ssoBdetacilper fi                    
)ssoBtceles(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = ssoBdetacilper lacol                    
esle                
dne                    
dne                        
dne                            
0 =< htlaeH.dionamuh ro tneraP.v ton ro ssoBmraFotuA.)(vnegteg ton litnu                                
)soP * emarFC.traPtooRdionamuh(sopot                                    
dne                                    
)08 ,08 ,08(wen.3rotceV = eziS.traPtooRdionamuh                                        
neht )08 ,08 ,08(wen.3rotceV =~ eziS.traPtooRdionamuh fi                                    
dne                                    
0 = deepSklaW.dionamuh                                        
neht 0 =~ deepSklaW.dionamuh fi                                    
dne                                    
eslaf = edilloCnaC.traPtooRdionamuh                                        
neht edilloCnaC.traPtooRdionamuh fi                                    
)nopaeWtceles(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(tiaw.ksat                                    
taeper                                
neht 0 > htlaeH.dionamuh fi                            
traPtooRdionamuH.v = traPtooRdionamuh lacol                            
dionamuH.v = dionamuh lacol                            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna ssoBtceles == emaN.v fi                        
od ))(nerdlihCteG:seimenEecapskrow(sriap ni v ,_ rof                    
neht ssob fi                
)ssoBtceles(dlihCtsriFdniF:seimenEecapskrow = ssob lacol                
nopaeWtceleS.)(vnegteg = nopaeWtceles lacol                
ssoBtceleS.)(vnegteg = ssoBtceles lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimenEecapskrow lacol                
)(noitcnuf(llacp            
neht PTssapyB.)(vnegteg ton dna ssoBmraFotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
)dne            
dne                
dne                    
)emarFC.tooRssob(PTB                        
esle                    
)emarFC.tooRssob(sopot                        
neht 0051 =< edutingaM.)noitisoP.tooRreyalp - noitisoP.emarFC.tooRssob( fi                    
traPtooRdionamuH.detacilpeRssob = tooRssob lacol                    
)ssoBtceles(dlihCtsriFdniF:egarotSdetacilpeR.emag = detacilpeRssob lacol                    
neht )ssoBtceles(dlihCtsriFdniF:egarotSdetacilpeR.emag fiesle                
dne                    
dne                        
dne                            
0 =< htlaeH.dionamuh ro tneraP.v ton ro ssoBmraFotuA.)(vnegteg ton litnu                                
)soP * emarFC.traPtooRdionamuh(sopot                                    
dne                                    
)08 ,08 ,08(wen.3rotceV = eziS.traPtooRdionamuh                                        
neht )08 ,08 ,08(wen.3rotceV =~ eziS.traPtooRdionamuh fi                                    
dne                                    
0 = deepSklaW.dionamuh                                        
neht 0 =~ deepSklaW.dionamuh fi                                    
dne                                    
eslaf = edilloCnaC.traPtooRdionamuh                                        
neht edilloCnaC.traPtooRdionamuh fi                                    
)nopaeWtceles(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(tiaw.ksat                                    
taeper                                
neht 0 > htlaeH.dionamuh fi                            
traPtooRdionamuH.v = traPtooRdionamuh lacol                            
dionamuH.v = dionamuh lacol                            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna ssoBtceles == emaN.v fi                        
od ))(nerdlihCteG:seimenEecapskrow(sriap ni v ,_ rof                    
neht ssob fi                
)ssoBtceles(dlihCtsriFdniF:seimenEecapskrow = ssob lacol                
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag = tooRreyalp lacol                
nopaeWtceleS.)(vnegteg = nopaeWtceles lacol                
ssoBtceleS.)(vnegteg = ssoBtceles lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimenEecapskrow lacol                
)(noitcnuf(llacp            
neht PTssapyB.)(vnegteg dna ssoBmraFotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)ssoBmraFotuA.)(vnegteg(neewTpotS    
eulaV = ssoBmraFotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} ssoBmraFotuA.)(vnegteg = tluafeD ,"ssoB lliK otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
eulaV = ssoBtceleS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:nwodporD
)}
,eslaf = itluM    
,ssoBelbat = seulaV    
,"ssoB tceleS" = eltiT    
{ ,"nwodporD"(nwodporDddA:rehtO = nwodporD
dne
}    
"gniK hguoD" ,"ecnirP ekaC" ,"neeuQ ekaC"        
 ,"repaeR luoS" ,"amgnoL" ,"mroF eurT ardni_pir" ,"etariP lufituaeB"        
 ,"tnahpelE niatpaC" ,"larimdA oliK" ,"sserpmE dnalsI" ,"enotS"        
{ = ssoBelbat    
neht 3dlroW fiesle
}    
"repeeK ediT" ,"larimdA ecI denekawA" ,"redrO" ,"draebkraD" ,"niatpaC desruC"        
 ,"larimdA ekomS" ,"nawS noD" ,"atijaF" ,"ymereJ" ,"dnomaiD"        
{ = ssoBelbat    
neht 2dlroW fiesle
}    
"trepxE rebaS" ,"grobyC" ,"doG rednuhT" ,"repsyW"        
 ,"droL namhsiF" ,"larimdA amgaM" ,"nawS" ,"nedraW feihC" ,"nedraW"        
 ,"larimdA eciV" ,"redaeL boM" ,"iteY" ,"ybboB" ,"gniK alliroG ehT"        
{ = ssoBelbat    
neht 1dlroW fi
)}
)12 ,"-"(per.gnirts = tnetnoC     
,"ssoB otuA" = eltiT     
{(hpargaraPddA:rehtO
)dne
)dne    
dne        
dne            
dne                
dne                    
)soPnwaps(sopot                        
esle                    
dne                        
)"lebaLegamI"(dlihCtsriFdniF:iug ro noitavresbOotuA.)(vnegteg ton litnu                            
dne                                
)reyalp ,dIecalP.emag(tropeleT:)"ecivreStropeleT"(ecivreSteG:emag                                    
neht poH_noitavresbOotuA.)(vnegteg dna )"lebaLegamI"(dlihCtsriFdniF:iug ton fi                                
)0 ,05 ,0(wen.emarFC * emarFC.traPtooRdionamuH.ymene = emarFC.traPtooRdionamuH.retcarahC.reyalp                                
)1.0(tiaw.ksat                                
taeper                            
esle                        
)"lebaLegamI"(dlihCtsriFdniF:iug ton ro noitavresbOotuA.)(vnegteg ton litnu                            
)0 ,0 ,3(wen.emarFC * emarFC.traPtooRdionamuH.ymene = emarFC.traPtooRdionamuH.retcarahC.reyalp                                
)1.0(tiaw.ksat                                
taeper                            
neht )"lebaLegamI"(dlihCtsriFdniF:iug fi                        
neht ymene fi                    
)emaNymene(dlihCtsriFdniF:seimenEecapskrow = ymene lacol                    
dne                    
)8395339132008.188 ,57869719049.8701 ,52135446587.8364(wen.emarFC = soPnwaps                        
"tnaliassA suomoneV" = emaNymene                        
neht 3dlroW fiesle                    
)6193.2584 ,2019701.88 ,58792.3355(wen.emarFC = soPnwaps                        
"niatpaC yellaG" = emaNymene                        
neht 1dlroW fiesle                    
)6219.6425- ,7665779.51 ,90293.8745-(wen.emarFC = soPnwaps                        
"]0021 .vL[ etariP avaL" = emaNymene                        
neht 2dlroW fi                    
iuGneercS.iuGreyalP.reyalp = iug lacol                    
seimenE.)"ecapskroW"(ecivreSteG:emag = seimenEecapskrow lacol                    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                    
soPnwaps ,emaNymene lacol                    
esle                
)1(tiaw.ksat                    
)"stnioP xaM evaH uoY"(etaerc:trelA                    
neht 0005 => eulaV.suidaRnoisiV.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                
neht noitavresbOotuA.)(vnegteg fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)noitavresbOotuA.)(vnegteg(neewTpotS    
eulaV = noitavresbOotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"noitavresbO mraF" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
)dne    
)dne        
dne            
dne                
dne                    
dne                        
)41(etatSegnahC:dionamuh                            
)1.0(tiaw.ksat                            
)11(etatSegnahC:dionamuh                            
neht 0 > htlaeH.dionamuh fi                        
dionamuH.v = dionamuh lacol                        
neht )"dionamuH"(dlihCtsriFdniF:v dna sM == emaN.v fi                    
od )seimene(sriapi ni v ,i rof                
)(nerdlihCteG:seimenE.ecapskroW.emag = seimene lacol                
)(tseuQkcehC                
neht tengaMtratS.)(vnegteg dna 2VikaHnoitavresbOotuA.)(vnegteg fi            
)(noitcnuf(llacp        
)(noitcnuf(tcennoC:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag    
)(noitcnuf(nwaps
)dne
)dne    
)dne        
dne            
dne                
dne                    
dne                        
eeHsoP = emarFC.traPtooRdionamuh                            
neht eeHsoP =~ emarFC.traPtooRdionamuh fi                        
dne                        
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuh                            
neht )05 ,05 ,05(wen.3rotceV =~ eziS.traPtooRdionamuh fi                        
dne                        
eslaf = edilloCnaC.traPtooRdionamuh                            
neht eslaf =~ edilloCnaC.traPtooRdionamuh fi                        
traPtooRdionamuH.v = traPtooRdionamuh lacol                        
neht 0 > htlaeH.dionamuH.v dna )"dionamuH"(dlihCtsriFdniF:v dna "etariP tseroF" == emaN.v fi                    
od )seimene(sriapi ni v ,i rof                
)(nerdlihCteG:seimenE.ecapskroW.emag = seimene lacol                
neht tengaMtratS.)(vnegteg dna 2VikaHnoitavresbOotuA.)(vnegteg fi            
)1.0(tiaw.ksat            
)(noitcnuf(tcennoC:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
)dne        
dne            
dne                
dne                    
)scisyhP.epyTetatSdionamuH.munE(etatSegnahC:dionamuh                        
neht scisyhP.epyTetatSdionamuH.munE =~ )(etatSteG:dionamuh fi                    
dionamuH.retcarahc = dionamuh lacol                    
neht )"dionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc fi                
retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = retcarahc lacol                
neht 3dlroW dna 2VikaHnoitavresbOotuA.)(vnegteg fi            
)(noitcnuf(llacp        
)(noitcnuf(tcennoC:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
dne                    
)(kcit = etadpUtsal                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                        
neht 1 => etadpUtsal - )(kcit fi                    
neht ytreporpneddihtes fi                
neht 3dlroW dna 2VikaHnoitavresbOotuA.)(vnegteg fi            
)(noitcnuf(llacp        
)1.0(tiaw.ksat        
od eurt elihw    
)(kcit = etadpUtsal lacol    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
)"yuB" ,"2klaTneK"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)1(tiaw.ksat                    
)"tratS" ,"2klaTneK"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
dne                    
)(kcit = emiTetadpUtsal                        
))881711599.66201- ,60987857202.426 ,521.02901-(wen.emarFC(sopot                        
neht 1 => emiTetadpUtsal - )(kcit fi                    
neht )"lwoB tiurF"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag                        
 ro )"lwoB tiurF"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fiesle                
)"nezitiC" ,"ssergorPtseuQnezitiC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
dne                    
)(kcit = emiTetadpUtsal                        
))5260466081.3767- ,46181169304.233 ,52651587.44421-(wen.emarFC(sopot                        
neht 1 => emiTetadpUtsal - )(kcit fi                    
neht )"elppaeniP"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag                    
 dna )"elppA"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag                    
 dna )"ananaB"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fi                
dne                
dne                    
dne                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v ro eslaf == 2VikaHnoitavresbOotuA.)(vnegteg litnu                                    
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
emarFC.traPtooRdionamuH.v = emarFC.traPtooRdionamuH.v                                        
dne                                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                                            
neht ytreporpneddihtes fi                                        
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
dne                                        
)"osuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                            
neht )"osuBsaH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag ton fi                                        
taeper                                    
neht "tnahpelE niatpaC" == emaN.v fi                                
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                            
neht )"tnahpelE niatpaC"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                        
neht ")1/0( tnahpelE niatpaC taefeD" == txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fiesle                    
dne                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v ro eslaf == 2VikaHnoitavresbOotuA.)(vnegteg litnu                                    
)05 ,05 ,05(wen.3rotceV = eziS.traPtooRdionamuH.v                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
emarFC.traPtooRdionamuH.v = emarFC.traPtooRdionamuH.v                                        
emarFC.traPtooRdionamuH.v = eeHsoP                                        
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
dne                                        
)"osuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                            
neht )"osuBsaH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag ton fi                                        
taeper                                    
neht "etariP tseroF" == emaN.v fi                                
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                            
neht )"etariP tseroF"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                        
neht )"setariP tseroF 05 taefeD" ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts fi                    
esle                
)1 ,"tseuQnezitiC" ,"tseuQtratS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)1(tiaw.ksat                    
)"nezitiC" ,"ssergorPtseuQnezitiC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
dne                    
)(kcit = emiTetadpUtsal                        
))5260466081.3767- ,46181169304.233 ,52651587.44421-(wen.emarFC(sopot                        
neht 1 => emiTetadpUtsal - )(kcit fi                    
neht eslaf == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                
neht 3dlroW dna 2VikaHnoitavresbOotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(kcit = emiTetadpUtsal lacol    
)(noitcnuf(nwaps
    )dne
)2VikaHnoitavresbOotuA.)(vnegteg(neewTpotS    
eulaV = 2VikaHnoitavresbOotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"2V noitavresbO PU otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
)dne        
dne            
eulaVtnerruc = eulaVtsal                
))eulaVtnerruc(roolf.htam .. " :leveL egnaR noitavresbO"(cseDteS:egnaRnoitavresbO                
neht eulaVtsal =~ eulaVtnerruc fi            
eulaV.suidaRnoisiV.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = eulaVtnerruc lacol            
)(noitcnuf(llacp        
od )1.0(tiaw elihw    
eulaV.suidaRnoisiV.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = eulaVtsal lacol    
)(noitcnuf(nwaps
)}
"" = tnetnoC    
,"leveL noitavresbO" = eltiT    
{(hpargaraPddA:rehtO = egnaRnoitavresbO
)}
)12 ,"-"(per.gnirts = tnetnoC     
,"noitavresbO mraF" = eltiT     
{(hpargaraPddA:rehtO
)dne
dne    
dne        
dne            
dne                
kaerb                    
dne                    
)eslaf(teS:tsehCelggoT                        
neht "noitcnuf" == )teS.tsehCelggoT(foepyt dna tsehCelggoT fi                    
eslaf = tsehCmraFotuA.)(vnegteg                    
neht )"ecilahC s'doG"(dlihCtsriFdniF:retcarahc ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcab                   
 ro )"ssenkraD fo tsiF"(dlihCtsriFdniF:retcarahc ro )"ssenkraD fo tsiF"(dlihCtsriFdniF:kcapkcab fi                
neht retcarahc dna kcapkcab fi            
            retcarahC.reyalp = retcarahc lacol            
)"kcapkcaB"(dlihCtsriFdniF:reyalp = kcapkcab lacol            
       dne eunitnoc neht reyalp ton fi            
reyalPlacoL.sreyalP.emag = reyalp lacol            
neht tsehCpotS.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = tsehCpotS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ssenkraD fO tsiF &ecilahC s'doG evaH nehW potS" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
dne        
dne            
))(toviPteG:tsehCtsesolc(sopot                
tsehCtsesolc = tegraTtsal                
neht tegraTtsal =~ tsehCtsesolc dna tsehCtsesolc fi            
dne            
dne                
dne                    
tsehc ,tsid = tsehCtsesolc ,tsiDnim                        
neht tsiDnim < tsid fi                    
edutingaM.)soPreyalp - noitisoP.)(toviPteG:tsehc( = tsid lacol                    
neht )"delbasiDsI"(etubirttAteG:tsehc ton fi                
od )stsehc(sriapi ni tsehc ,_ rof            
eguh.htam ,lin = tsiDnim ,tsehCtsesolc lacol            
)"deggaTtsehC_"(deggaTteG:ecivreStsehc = stsehc lacol            
)"ecivreSnoitcelloC"(ecivreSteG:emag = ecivreStsehc lacol            
noitisoP.)(toviPteG:retcarahc = soPreyalp lacol            
)(tiaW:deddAretcarahC.reyalp ro retcarahC.reyalp = retcarahc lacol            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
neht tsehCmraFotuA.)(vnegteg fi        
od )2.0(tiaw elihw    
lin = tegraTtsal lacol    
)(noitcnuf(nwaps
)dne
eulaV = tsehCmraFotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:tsehCelggoT
)} eslaf = tluafeD ,"tsehC otuA" = eltiT{ ,"tsehCelggoT"(elggoTddA:rehtO = tsehCelggoT
)}
)12 ,"-"(per.gnirts = tnetnoC        
,"tsehC mraF" = eltiT        
{(hpargaraPddA:rehtO
)dne
dne    
dne        
dne            
dne                
dne                    
dne                        
))7631v(wen.emarFC(sopot                            
esle                        
)emag ,eslaf ,"E" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)5.1(tiaw                            
)emag ,eslaf ,"E" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
neht )1 =< 9631v( fi                        
edutingaM.)8631v - 7631v( = 9631v lacol                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = 8631v lacol                        
;noitisoP.traPyramirP.409v = 7631v lacol                        
neht )traPyramirP.409v dna )"ledoM"(AsI:409v( fi                    
od ))(nerdlihCteG:747v(sriap ni 409v ,309v rof                
neht 747v fi            
)"srewolFeriF"(dlihCtsriFdniF:ecapskrow = 747v lacol            
neht srewolFeriFtcelloCotuA.)(vnegteg fi        
od )(tiaw elihw    
)(noitcnuf(nwaps
)dne
eulaV = srewolFeriFtcelloCotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"rewolFeriF tcelloC otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
dne        
)dne            
dne                
))11735426.0- ,80-e22966331.6- ,131599087.0 ,80-e54594843.1- ,1 ,80-e19903577.6 ,131599087.0- ,80-e50462871.3 ,11735426.0- ,859399.165 ,75017.2801 ,57463.4935(wen.emarFC(sopot                    
esle                
dne                    
dne                        
dne                            
0 =< htlaeH.dionamuH.v ro mraFrebmEezalB.)(vnegteg ton litnu                                
emarFC.traPtooRdionamuH.v = noMsoP                                    
emaN.v = mraFnoM                                    
dne                                    
1 = ycnerapsnarT.traPtooRdionamuH.v                                        
neht 1 =~ ycnerapsnarT.traPtooRdionamuH.v fi                                    
dne                                    
)06 ,06 ,06(wen.3rotceV = eziS.traPtooRdionamuH.v                                        
neht )06 ,06 ,06(wen.3rotceV =~ eziS.traPtooRdionamuH.v fi                                    
dne                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
neht edilloCnaC.traPtooRdionamuH.v fi                                    
eurt = tengaMtratS.)(vnegteg                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(tiaw:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag                                    
 taeper                                
neht 0 > htlaeH.dionamuH.v dna )'traPtooRdionamuH'(dlihCtsriFdniF:v dna )'dionamuH'(dlihCtsriFdniF:v fi                            
neht 'tnaliassA suomoneV' == emaN.v ro 'recrofnE ardyH' == emaN.v fi                        
od ))(nerdlihCteG:seimenEecapskrow(sriap ni v ,_ rof                    
neht tnaliassAsuomonev ro recrofnEardyh ro tsohg fi                
)'tnaliassA suomoneV'(dlihCtsriFdniF:seimenEecapskrow = tnaliassAsuomonev lacol                
)'recrofnE ardyH'(dlihCtsriFdniF:seimenEecapskrow = recrofnEardyh lacol                
)'tsohG'(dlihCtsriFdniF:seimenEecapskrow = tsohg lacol                
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag = tooRreyalp lacol                
seimenE.)'ecapskroW'(ecivreSteG:emag = seimenEecapskrow lacol                
)(noitcnuf(llacp            
neht 3dlroW dna mraFrebmEezalB.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)mraFrebmEezalB.)(vnegteg(neewTpotS    
eulaV = mraFrebmEezalB.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"rebmE tcelloC dnA boM ardyH kcattA otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
dne        
dne            
)1elbaTho(revreSekovnI:]"tseuQnogarDtcaretnI/FR"[teN.seludoM.)"egarotSdetacilpeR"(ecivreSteG:emag                
                }                
"edargpU" = ]"dnammoC"[                    
,"htozU" = ]"CPN"[                    
{ = 1elbaTho lacol                
esle            
)CPNhtozU(sopot                
neht 5 > ecnatsid fi            
edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.CPNhtozU( = ecnatsid lacol            
)961314118.0 ,80-e66916132.6- ,410374485.0 ,80-e85428652.4 ,1 ,80-e59372257.4 ,410374485.0- ,80-e83850863.1- ,961314118.0 ,137638.468 ,90913.1121 ,41098.1665(wen.emarFC = CPNhtozU lacol            
neht 3dlroW dna edargpUnolaTnogarD.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)edargpUnolaTnogarD.)(vnegteg(neewTpotS    
eulaV = edargpUnolaTnogarD.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"nolaT nogarD edargpU otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)dne
dne    
dne        
)dne            
dne                
)elbaTtseuQtseuqer(revreSekovnI:]"tseuQnogarDtcaretnI/FR"[teN.seludoM.)"egarotSdetacilpeR"(ecivreSteG:emag                    
}                    
"tseuQtseuqeR" = ]"dnammoC"[                        
,"reniarT ojoD" = ]"CPN"[                        
{ = elbaTtseuQtseuqer lacol                    
)1(tiaw.ksat                    
)elbaTtseuQmialc(revreSekovnI:]"tseuQnogarDtcaretnI/FR"[teN.seludoM.)"egarotSdetacilpeR"(ecivreSteG:emag                    
}                    
"tseuQmialC" = ]"dnammoC"[                        
,"reniarT ojoD" = ]"CPN"[                        
{ = elbaTtseuQmialc lacol                    
neht 5 =< ecnatsid fi                
edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.cpNtseuQojoD( = ecnatsid lacol                
dne                
)cpNtseuQojoD(sopot                    
esle                
)cpNtseuQojoD(PTB                    
neht PTssapyB fi                
)(noitcnuf(llacp            
neht 3dlroW dna tseuQmialCojoD.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)847499606.0 ,90-e12676328.5- ,868507497.0 ,90-e77550690.2 ,1 ,90-e22721727.5 ,868507497.0- ,90-e32885018.1- ,847499606.0 ,105317.278 ,87123.8021 ,92691.5585(wen.emarFC = cpNtseuQojoD lacol
)dne
)tseuQmialCojoD.)(vnegteg(neewTpotS    
eulaV = tseuQmialCojoD.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"reniarT ojoD tseuQ otuA" = eltiT{ ,"elggoT"(elggoTddA:rehtO = elggoT
)}
dne    
))8390642255875.488 ,5265622287623.8021 ,57390642724.4185(wen.emarFC(sopot        
))6098733699469.433 - ,8343772957090.3101 ,5265622235.1665(wen.3rotceV ,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
)(noitcnuf = kcabllaC    
,"ojoD nogarD oT tropeleT" = eltiT    
{(nottuBddA:rehtO
)}
"" = tnetnoC        
,"nogarD tseuQ" = eltiT        
{(hpargaraPddA:rehtO
)} "" = nocI ,"rehtO gnimraF baT" = eltiT {(baTddA:wodniW = rehtO
)dne
dne    
dne        
)dne            
dne                
)soP * emarFC.traPtooRdionamuH.)"draebkraD"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag(sopot                    
neht )"draebkraD"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag fiesle                
draebkraDotuA.)(vnegteg ton litnu                    
)"ssenkraD fo tsiF"(nopaeWpiuqE                        
))404.9943- ,197.51 ,485.8773(wen.emarFC(sopot                        
)1.0(tiaw.ksat                        
taeper                    
neht )"ssenkraD fo tsiF"(dlihCtsriFdniF:retcarahC.reyalp ro )"ssenkraD fo tsiF"(dlihCtsriFdniF:kcapkcaB.reyalp fiesle                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro draebkraDotuA.)(vnegteg ton litnu                            
)soP * emarFC.traPtooRdionamuH.v(sopot                                
           0 = deepSklaW.dionamuH.v                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)50.0(tiaw.ksat                                
taeper                            
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "draebkraD" == emaN.v fi                        
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof                    
neht )"draebkraD"(dlihCtsriFdniF:seimene fi                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol                
)(noitcnuf(llacp            
neht 2dlroW dna draebkraDotuA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)draebkraDotuA.)(vnegteg(neewTpotS    
eulaV = draebkraDotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"draebkraD otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
dne                            
dne                                
dne                                    
dne                                        
)"ecilahC s'doG"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag                                                  
 ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag                                                  
 ro tneraP.v ton                                                  
 ro 0 =< htlaeH.dionamuH.v                                                  
 ro eslaf == gniKhguoDotuA.)(vnegteg litnu                                            
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.)"sreyalP"(ecivreSteG:emag(ytreporpneddihtes                                                
                                                    )soP * emarFC.traPtooRdionamuH.v(sopot                                                
0 = deepSklaW.dionamuH.v                                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                                
    )nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                                
)(ikaHotuA                                                
)50.0(tiaw.ksat                                                
taeper                                            
neht 0 > htlaeH.dionamuH.v                                           
 dna )"traPtooRdionamuH"(dlihCtsriFdniF:v                                           
 dna )"dionamuH"(dlihCtsriFdniF:v fi                                        
neht "nabrU" == emaN.v ro "erdnaeD" == emaN.v ro "olbaiD" == emaN.v fi                                    
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                                
neht )"nabrU"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag                               
 ro )"erdnaeD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag                               
 ro )"olbaiD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                            
neht )"nabrU" ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts                           
 ro )"erdnaeD" ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts                           
 ro )"olbaiD" ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts fi                        
neht eurt == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                    
esle                
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
}                    
"kcehC" = ]2[                        
,"tsitneicSekaC" = ]1[                        
{ = sgra lacol                    
neht )"yeK deR"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag                       
 ro )"yeK deR"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fiesle                
dne                    
))803.73941- ,279.2354 ,082.9002-(wen.emarFC(sopot                        
esle                    
    dne                        
    dne                            
0 =< htlaeH.dionamuH.v                                      
 ro tneraP.v ton                                      
 ro eslaf == gniKhguoDotuA.)(vnegteg litnu                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)50.0(tiaw.ksat                                    
taeper                                
neht "gniK hguoD" == emaN.v fi                            
 od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                        
neht )"gniK hguoD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
neht )"gniK hguoD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag                       
 ro )"gniK hguoD"(dlihCtsriFdniF:egarotSdetacilpeR.emag fiesle                
dne                    
dne                        
))694.79221- ,847.012 ,360.0281-(wen.emarFC(sopot                            
eslaf = tengaMtratS.)(vnegtegekaCtratS                            
esle                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v                                          
 ro tneraP.v ton                                          
 ro )"ecnirP ekaC"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag                                          
 ro eslaf == gniKhguoDotuA.)(vnegteg litnu                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
emarFC.traPtooRdionamuH.v = EKACSOP                                        
eurt = tengaMtratS.)(vnegtegekaCtratS                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
)(ikaHotuA                                        
)50.0(tiaw.ksat                                        
taeper                                    
neht 0 > htlaeH.dionamuH.v                                    
 dna )"retfarC eikooC" == emaN.v ro "drauG ekaC" == emaN.v                                    
 ro "rekaB daeH" == emaN.v ro "ffatS gnikaB" == emaN.v( fi                                
  od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                            
neht )"retfarC eikooC"(dlihCtsriFdniF:seimenE.ecapskroW.emag                           
 ro )"drauG ekaC"(dlihCtsriFdniF:seimenE.ecapskroW.emag                           
 ro )"rekaB daeH"(dlihCtsriFdniF:seimenE.ecapskroW.emag                           
 ro )"ffatS gnikaB"(dlihCtsriFdniF:seimenE.ecapskroW.emag fi                        
esle                    
)"renwapSecnirPekaC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
neht )"?won latrop eht nepo ot tnaw uoy oD"                                   
 ,)"renwapSecnirPekaC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(dnif.gnirts fi                    
neht )"ecilahC teewS"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag                       
 ro )"ecilahC teewS"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fiesle                
dne                    
)"cpNecilahCteewS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
esle                    
)}                        
5.2 = noitaruD                            
,"=di?/tessa/moc.xolbor.www//:ptth" = nocI                            
,"lairetaM hguonE evaH toN" = txeT                            
,"noitacifitoN" = eltiT                            
{ ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                        
neht )"erehW" ,)"cpNecilahCteewS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(dnif.gnirts fi                    
neht )"ecilahC s'doG"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag                   
 ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fi                
)(noitcnuf(llacp            
neht 3dlroW dna gniKhguoDotuA.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)dne    
)dne        
dne            
dne                
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                    
dne                    
)(yortseD:rotaminA.dionamuH.v                        
neht )"rotaminA"(dlihCtsriFdniF:dionamuH.v fi                    
eslaf = edilloCnaC.traPtooRdionamuH.v                    
EKACSOP = emarFC.traPtooRdionamuH.v                    
neht 003 =< edutingam.)noitisoP.EKACSOP - noitisoP.traPtooRdionamuH.v(                   
 dna )"rekaB daeH" == emaN.v ro "ffatS gnikaB" == emaN.v ro "drauG ekaC" == emaN.v ro "retfarC eikooC" == emaN.v(                   
 dna tengaMtratS.)(vnegtegekaCtratS dna gniKhguoDotuA.)(vnegteg fi                
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof            
)(noitcnuf(llacp        
)(noitcnuf(tcennoC:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag    
)(noitcnuf(nwaps
)dne
)gniKhguoDotuA.)(vnegteg(neewTpotS    
eulaV = gniKhguoDotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"gniK hguoD otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)2 ,"tnevEenotsevarg"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
dne            
)5.0(tiaw                
)soPtegrat(sopot                
neht 5 > edutingam.)noitisoP.soPtegrat - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi            
)97805.0716 ,911054.341 ,70799.2568-(wen.emarFC = soPtegrat lacol            
    neht 3dlroW dna kcuLyrTotuA.)(vnegteg fi        
od )5.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
  )kcuLyrTotuA.)(vnegteg(neewTpotS    
eulaV = kcuLyrTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"kcuL yrT otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)dne            
)1 ,"tnevEenotsevarg"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
)(noitcnuf(llacp            
dne            
)5.0(tiaw                
)soPtegrat(sopot                
neht 5 > edutingam.)noitisoP.soPtegrat - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi            
)97805.0716 ,911054.341 ,70799.2568-(wen.emarFC = soPtegrat lacol            
    neht 3dlroW dna yarPotuA.)(vnegteg fi        
od )5.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
)yarPotuA.)(vnegteg(neewTpotS    
eulaV = yarPotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"yarP otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
)1.0(tiaw.ksat        
dne        
)dne            
dne                
dne                    
))2 ,02 ,2(wen.emarFC * emarFC.traPtooRdionamuH.repaeRluos(sopot                        
neht repaeRluos fi                    
)"repaeR luoS"(dlihCtsriFdniF:egarotSdetacilper = repaeRluos lacol                    
esle                
)"ecnessE wollaH"(nopaeWpiuqE                    
8 =< edutingaM.)noitisoP.traPtooRdionamuh - noitisoP.noitisoPtegrat( litnu                    
)1.0(tiaw.ksat                        
)noitisoPtegrat(sopot                        
taeper                    
)52187055.2606 ,57869245138.641 ,526562223.2398-(wen.emarFC = noitisoPtegrat lacol                    
neht )"ecnessE wollaH"(dlihCtsriFdniF:retcarahc ro )"ecnessE wollaH"(dlihCtsriFdniF:kcapkcab fiesle                
dne                    
dne                        
repaeRluoSotuA.)(vnegteg ton ro 0 =< htlaeH.dionamuH.v litnu                            
1 = ycnerapsnarT.traPtooRdionamuH.v                                
0 = deepSklaW.dionamuH.v                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw.ksat                                
 taeper                            
neht )"repaeR luoS" ,emaN.v(dnif.gnirts fi                        
od ))(nerdlihCteG:seimenEecapskrow(sriap ni v ,_ rof                    
neht )"repaeR luoS"(dlihCtsriFdniF:seimenEecapskrow fi                
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc = traPtooRdionamuh lacol                
retcarahC.reyalp = retcarahc lacol                
kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilper lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimenEecapskrow lacol                
)(noitcnuf(llacp            
neht 3dlroW dna repaeRluoSotuA.)(vnegteg fi        
od eurt elihw    
)(noitcnuf(nwaps
)dne
)repaeRluoSotuA.)(vnegteg(neewTpotS    
eulaV = repaeRluoSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"repaeR luoS otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
)dne    
dne        
dne            
dne                
)soP * emarFC.traPtooRdionamuH.mroFeurTardnIpir(sopot                    
)"mroF eurT ardni_pir"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = mroFeurTardnIpir lacol                    
neht )"mroF eurT ardni_pir"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag fiesle                
))"ecilahC s'doG"(dlihCtsriFdniF:retcarahC.reyalp ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcaB.reyalp( ton litnu                    
)"ecilahC s'doG"(nopaeWpiuqE                        
))573484125905.2662- ,5786403216724.023 ,52182884057.3655-(wen.emarFC(sopot                        
)3.0(tiaw.ksat                        
taeper                    
neht )"ecilahC s'doG"(dlihCtsriFdniF:retcarahC.reyalp ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcaB.reyalp fiesle                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro eslaf == ardnIpiRotuA.)(vnegteg litnu                            
)dne                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
0 = deepSklaW.dionamuH.v                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(noitcnuf(llacp                                
)3.0(tiaw.ksat                                
taeper                            
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna )"ledoM"(AsI:v dna 0 > htlaeH.dionamuH.v dna )"ardni_pir" == emaN.v ro "mroF eurT ardni_pir" == emaN.v( fi                        
od ))(nerdlihCteG:seimene(sriap ni v ,_ rof                    
neht )"ardni_pir"(dlihCtsriFdniF:seimene ro )"mroF eurT ardni_pir"(dlihCtsriFdniF:seimene fi                
                reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol                
neht 3dlroW dna ardnIpiRotuA.)(vnegteg fi            
od )1(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)ardnIpiRotuA.)(vnegteg(neewTpotS    
eulaV = ardnIpiRotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ardnI piR otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
)dne        
dne            
))006 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                
)1(tiaw.ksat                
))006 ,0821(wen.2rotceV(nwoD1nottuB:)"resUlautriV"(ecivreSteG:emag                
               )5.0(tiaw.ksat                
01 =< edutingaM.)noitisoP.3tegrat - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag(                    
ro eslaf == ikaHdaPhcuoTotuA.)(vnegteg ro eurt == neewTpotS.)(vnegteg litnu                
)2.0(tiaw.ksat                    
)3tegrat(sopot                    
taeper                
)45920.0273- ,567565.133 ,95574.1794-(wen.emarFC = 3tegrat lacol                
)5.0(tiaw.ksat                
)"etihW wonS" ,"roloCetavitca"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
                )5.0(tiaw.ksat                
01 =< edutingaM.)noitisoP.2tegrat - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag(                    
ro eslaf == ikaHdaPhcuoTotuA.)(vnegteg ro eurt == neewTpotS.)(vnegteg litnu                
)2.0(tiaw.ksat                    
)2tegrat(sopot                    
taeper                
)67754.2122- ,357568.903 ,75314.4145-(wen.emarFC = 2tegrat lacol                
)5.0(tiaw.ksat                
)"deR eruP" ,"roloCetavitca"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
                )5.0(tiaw.ksat                
01 =< edutingaM.)noitisoP.1tegrat - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag(                    
ro eslaf == ikaHdaPhcuoTotuA.)(vnegteg ro eurt == neewTpotS.)(vnegteg litnu                
)2.0(tiaw.ksat                    
)1tegrat(sopot                    
taeper                
)8028.6662- ,7569.4801 ,20661.0245-(wen.emarFC = 1tegrat lacol                
)5.0(tiaw.ksat                
)"ykS retniW" ,"roloCetavitca"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 3dlroW dna ikaHdaPhcuoTotuA.)(vnegteg fi            
)(noitcnuf(llacp        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)ikaHdaPhcuoTotuA.)(vnegteg(neewTpotS    
eulaV = ikaHdaPhcuoTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"ikaH daP hcuoT otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
)(poH                        
neht ".retal kcab emoC .won thgir uoy rof gnihtyna evah t'nod I" == esnopser dna poHretnuHetilEotuA.)(vnegteg fi                    
)"retnuHetilE"(revreSekovnI:]"_FmmoC"[setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = esnopser lacol                    
esle                
dne                    
dne                        
dne                            
kaerb                                
))2 ,02 ,2(wen.emarFC * emarFC.traPtooRdionamuH.ymene(sopot                                
neht )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna ymene fi                            
)eman(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = ymene lacol                            
od )semaNetile(sriap ni eman ,_ rof                        
neht ymenEdnuof ton fi                    
dne                    
dne                        
kaerb                            
tneraP.ymene ton ro 0 =< htlaeH.dionamuH.ymene ro retnuHetilEotuA.)(vnegteg ton litnu                            
dne                                
)soP * emarFC.traPtooRdionamuH.ymene(sopot                                    
0 = deepSklaW.dionamuH.ymene                                    
eslaf = edilloCnaC.traPtooRdionamuH.ymene                                    
neht )"traPtooRdionamuH"(dlihCtsriFdniF:ymene fi                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)2.0(tiaw.ksat                                
taeper                            
eurt = ymenEdnuof                            
                            neht 0 > htlaeH.dionamuH.ymene                           
 dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene                           
 dna )"dionamuH"(dlihCtsriFdniF:ymene                           
 dna )emaN.ymene ,semaNetile(dnif.elbat fi                        
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni ymene ,_ rof                    
                    eslaf = ymenEdnuof lacol                    
}"nabrU" ,"erdnaeD" ,"olbaiD"{ = semaNetile lacol                    
txeT.eltiT.eltiTtseuQ.reniatnoC.iuGtseuq = eltiTtseuq lacol                    
neht eurt == elbisiV.iuGtseuq fi                
tseuQ.niaM.iuGreyalP.reyalp = iuGtseuq lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
)(noitcnuf(llacp            
neht 3dlroW dna retnuHetilEotuA.)(vnegteg fi        
od )3.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = poHretnuHetilEotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"revreS retnuH etilE weN dniF" = noitpircseD ,"retnuH etilE revreS poH" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
)retnuHetilEotuA.)(vnegteg(neewTpotS    
eulaV = retnuHetilEotuA.)(vnegteg    
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"retnuH etilE otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
)dne        
dne            
))3692- ,513 ,2215-(wen.emarFC(sopot                
dne                
dne                    
)ssoBemarFC(sopot                        
neht 0051 =< ssoBemarFCoTecnatsid fiesle                    
)ssoBemarFC(PTB                        
neht 0051 > ssoBemarFCoTecnatsid fi                    
edutingaM.)noitisoP.ssoBemarFC - noitisoP.traPtooRdionamuh( = ssoBemarFCoTecnatsid lacol                    
neht PTssapyB fi                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqEnU                
esle            
dne                
dne                    
dne                        
diaRetariPotuA.)(vnegteg ton ro tneraP.ymene ton ro 0 =< htlaeH.dionamuH.ymene litnu                            
eurt = tengaMtratS.)(vnegteg                                
)soP * emarFC.traPtooRdionamuH.ymene(sopot                                
eslaf = edilloCnaC.traPtooRdionamuH.ymene                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw.ksat taeper                            
neht 0002 < ecnatsiDymene fi                        
edutingaM.)noitisoP.traPtooRdionamuh - noitisoP.traPtooRdionamuH.ymene( = ecnatsiDymene lacol                        
neht 0 > htlaeH.dionamuH.ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna diaRetariPotuA.)(vnegteg fi                    
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni ymene ,_ rof                
neht 005 =< ssoBoTecnatsid fi            
edutingaM.)noitisoP.traPtooRdionamuh - noitisoP.)273.2792- ,108.313 ,113.9355-(wen.emarFC( = ssoBoTecnatsid lacol            
dne nruter neht traPtooRdionamuh ton fi            
            )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp = traPtooRdionamuh lacol            
reyalPlacoL.sreyalP.emag = reyalp lacol            
)72035.1482- ,129867.313 ,23471.6945-(wen.emarFC = ssoBemarFC lacol            
)(noitcnuf(llacp        
dne        
eunitnoc            
neht 3dlroW ton ro diaRetariPotuA.)(vnegteg ton fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
)diaRetariPotuA.)(vnegteg(neewTpotS    
eulaV = diaRetariPotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"diaR etariP otuA" = eltiT { ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
))252983.144- ,187653.991 ,65764.844(wen.emarFC(sopot            
esle        
yrotcaFotuA.)(vnegteg ton ro 0 =< htlaeH.dionamuH.ymenEeroc litnu            
)emarFC.traPtooRdionamuH.ymenEeroc(sopot                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                
)(ikaHotuA                
)1.0(tiaw.ksat                
taeper            
neht 0 > htlaeH.dionamuH.ymenEeroc dna ymenEeroc fi        
)"eroC"(dlihCtsriFdniF:seimene = ymenEeroc lacol        
seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol        
dne        
eunitnoc            
neht 2dlroW ton ro yrotcaFotuA.)(vnegteg ton fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)dne
)yrotcaFotuA.)(vnegteg(neewTpotS    
eulaV = yrotcaFotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"yrotcaF otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
))91.374 ,948.22 ,439.08862-(wen.emarFC(sopot                            
neht 0001 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalp - noitisoP.)91.374 ,948.22 ,439.08862-(wen.emarFC(                               
 dna )"ardni_pir"(dlihCtsriFdniF:seimenEecapskrow ton fiesle                        
dne                            
dne                                
tneraP.v ton ro 0 =< htlaeH.dionamuH.v ro aeSdrihTotuA.)(vnegteg ton litnu                                    
                                        )"uoZlevarT"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
                                              drihTemarFCdlo = emarFC.traPtooRdionamuH.v                                        
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
)(ikaHotuA                                        
)50.0(tiaw.ksat                                        
taeper                                    
                                    emarFC.traPtooRdionamuH.v = drihTemarFCdlo lacol                                    
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "ardni_pir" == emaN.v fi                                
od ))(nerdlihCteG:seimenEecapskrow(sriap ni v ,_ rof                            
neht )"]ssoB[ ]0051 .vL[ ardni_pir"(dlihCtsriFdniF:seimenEecapskrow fi                        
)3.1(tiaw.ksat                        
dne                        
)"nigeB" ,"ssergorPtseuQZ"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper                            
)1.1(tiaw.ksat                            
neht 01 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalp - noitisoP.)903.8371 ,28.21 ,223.6291-(wen.emarFC( fi                        
                        ))903.8371 ,28.21 ,223.6291-(wen.emarFC(sopot                        
neht 0 == )"lareneG" ,"ssergorPtseuQZ"(revreSekovnI:]"_FmmoC"[setomeR.egarotSdetacilper fi                    
eslaf = mraFotuA.)(vnegteg                    
neht 2dlroW dna 0051 => eulaV.leveL.ataD.reyalp fi                
seimenE.)"ecapskroW"(ecivreSteG:emag = seimenEecapskrow lacol                
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilper lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
)(noitcnuf(llacp            
neht 2dlroW dna aeSdrihTotuA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)aeSdrihTotuA.)(vnegteg(neewTpotS    
eulaV = aeSdrihTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dlroW drihT otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
dne                            
)"asorsserDlevarT"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper                                
esle                            
))7 ,01 ,5(wen.emarFC * emarFC.traPtooRdionamuH.)"larimdA ecI"(dlihCtsriFdniF:egarotSdetacilper(sopot                                
neht )"larimdA ecI"(dlihCtsriFdniF:egarotSdetacilper fi                            
esle                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro dlroWweNotuA.)(vnegteg ton litnu                                    
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
dnoceSemarFCdlo = emarFC.traPtooRdionamuH.v                                        
eslaf = edilloCnaC.daeH.v                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
)(ikaHotuA                                        
)50.0(tiaw.ksat                                        
taeper                                    
emarFC.traPtooRdionamuH.v = dnoceSemarFCdlo lacol                                    
neht )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v dna "larimdA ecI" == emaN.v fi                                
od ))(nerdlihCteG:seimenE.ecapskrow(sriap ni v ,_ rof                            
neht )"]ssoB[ ]007 .vL[ larimdA ecI"(dlihCtsriFdniF:seimenE.ecapskrow fi                        
esle                    
)1.0(tiaw.ksat                        
dlroWweNotuA.)(vnegteg ton ro 3 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalp - noitisoP.emarFCtegrat( litnu                        
)1.0(tiaw.ksat                            
)emarFCtegrat(sopot                            
taeper                        
)8846.5231- ,2061573.73 ,4217.7431(wen.emarFC = emarFCtegrat lacol                        
)"yeK"(nopaeWpiuqE                        
)1.0(tiaw.ksat                        
)"evitceteD" ,"ssergorPtseuQasorsserD"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilper                        
)1.1(tiaw.ksat                        
dlroWweNotuA.)(vnegteg ton ro 3 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalp - noitisoP.1emarfc( litnu                        
)1.0(tiaw.ksat                            
)1emarfc(sopot                            
taeper                        
)778116.917 ,94183156.5 ,38892.9484(wen.emarFC = 1emarfc lacol                        
neht 1 == ycnerapsnarT.rooDeci dna eslaf == edilloCnaC.rooDeci fi                    
rooD.ecI.paM.ecapskrow = rooDeci lacol                    
neht 1dlroW dna 007 => leveLym fi                
eulaV.leveL.ataD.reyalp = leveLym lacol                
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilper lacol                
)"ecapskroW"(ecivreSteG:emag = ecapskrow lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
)(noitcnuf(nwaps            
neht 1dlroW dna dlroWweNotuA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)dlroWweNotuA.)(vnegteg(neewTpotS    
eulaV = dlroWweNotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dlroW weN otuA" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
dne            
)(poH                
)}                
,5 = noitaruD                    
,"" = txeT                    
,"..poH revreS" = eltiT                    
{ ,"noitacifitoNdneS"(eroCteS:iuGretratS                
)1(tiaw.ksat                
neht tiurFdnuof ton fi            
dne            
dne                
kaerb                    
eurt = tiurFdnuof                    
)emarFC.eldnaH.v(sopot                    
neht )"eldnaH"(dlihCtsriFdniF:v dna )"tiurF" ,emaN.v(dnif.gnirts dna )"ledoM"(AsI:v fi                
od ))(nerdlihCteG:ecapskroW(sriapi ni v ,_ rof            
eslaf = tiurFdnuof lacol            
neht poHtiurFoTtropeleT.)(vnegteg dna tiurFoTtropeleT.)(vnegteg fi        
od )5.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = poHtiurFoTtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"] revreS poH [ tiurF oT tropeleT" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
dne    
dne        
dne            
neht tiurFdnuof ton fi            
dne            
dne                
kaerb                    
eurt = tiurFdnuof                    
)emarFC.eldnaH.v(sopot                    
neht )"eldnaH"(dlihCtsriFdniF:v dna )"tiurF" ,emaN.v(dnif.gnirts dna )"ledoM"(AsI:v fi                
od ))(nerdlihCteG:ecapskroW(sriapi ni v ,_ rof            
eslaf = tiurFdnuof lacol            
neht tiurFoTtropeleT.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)"iuGretratS"(ecivreSteG:emag = iuGretratS lacol
)"ecapskroW"(ecivreSteG:emag = ecapskroW lacol
)dne
)tiurFoTtropeleT.)(vnegteg(neewTpotS    
eulaV = tiurFoTtropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tiurF oT tropeleT" = eltiT{ ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
)eeleMteGotuA.)(vnegteg(neewTpotS    
eulaV = eeleMteGotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"eeleM teG otuA" = eltiT { ,"elggoT"(elggoTddA:kcatS = elggoT
)dne
)dne    
dne        
dne            
dne                
dne                    
)} 5 = noitaruD ,"!snoitalutargnoC" = txeT ,"!desahcruP namuHdoG" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                        
)"namuhdoGyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
esle                    
)} 5 = noitaruD ,".secruoser erom deen uoY" = txeT ,"lairetaM hguonE toN" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                        
neht )"gnirB" ,esnopser(dnif.gnirts fi                    
)eurt ,"namuhdoGyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = esnopser lacol                    
neht )004 ,"nolaT nogarD"(leveLkcehc fiesle                
)} 5 = noitaruD ,"...nolaT nogarD gniyuB" = txeT ,"!ydaeR walC cirtcelE" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                    
)"nolaTnogarDyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht )004 ,"walC cirtcelE"(leveLkcehc fiesle                
)} 5 = noitaruD ,"...walC cirtcelE gniyuB" = txeT ,"!ydaeR etaraK namkrahS" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                    
)"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht )004 ,"etaraK namkrahS"(leveLkcehc fiesle                
)} 5 = noitaruD ,"...etaraK namkrahS gniyuB" = txeT ,"!ydaeR petS htaeD" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                    
)"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht )004 ,"petS htaeD"(leveLkcehc fiesle                
)} 5 = noitaruD ,"...petS htaeD gniyuB" = txeT ,"!ydaeR namuhrepuS" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                    
)"petShtaeDyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht )004 ,"namuhrepuS"(leveLkcehc fiesle                
)} 5 = noitaruD ,"" = txeT ,"!!namuHrepuS evaH toN" = eltiT { ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag                    
)"namuhrepuSyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht ))004 ,"nolaT nogarD"(leveLkcehc ro )004 ,"walC cirtcelE"(leveLkcehc ro )004 ,"etaraK namkrahS"(leveLkcehc ro )004 ,"petS htaeD"(leveLkcehc ro )004 ,"namuhrepuS"(leveLkcehc( ton fi                
dne                
deriuqeRlevel => eulaV.leveL.loot dna loot nruter                    
)emaNloot(dlihCtsriFdniF:retcarahc ro )emaNloot(dlihCtsriFdniF:kcapkcab = loot lacol                    
)deriuqeRlevel ,emaNloot(leveLkcehc noitcnuf lacol                
retcarahC.reyalp = retcarahc lacol                
kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
neht 3dlroW dna eeleMteGotuA.)(vnegteg dna "namuHdoG" == edoMteG fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
dne    
dne        
dne            
)"2" ,"walCnogarD" ,"draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
esle            
dne                
"walC nogarD" = nopaeWtceleS.)(vnegteg                    
neht 993 =< leveLwalCnogard fiesle                
"nolaT nogarD" = nopaeWtceleS.)(vnegteg                    
)"nolaTnogarDyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht 004 => leveLwalCnogard fi                
neht walCnogard fi            
neht 3dlroW dna eeleMteGotuA.)(vnegteg dna "nolaT nogarD" == edoMteG fi        
0 ro eulaV.leveL.walCnogard dna walCnogard = leveLwalCnogard lacol        
)"nolaT nogarD"(dlihCtsriFdniF:retcarahc ro )"nolaT nogarD"(dlihCtsriFdniF:kcapkcab = nolaTnogard lacol        
)"walC nogarD"(dlihCtsriFdniF:retcarahc ro )"walC nogarD"(dlihCtsriFdniF:kcapkcab = walCnogard lacol        
retcarahC.reyalp = retcarahc lacol        
kcapkcaB.reyalp = kcapkcab lacol        
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
dne                    
dne                        
eurt = mraFotuA.)(vnegteg                            
)1.0(tiaw.ksat                            
"walC cirtcelE" = nopaeWtceleS.)(vnegteg                            
)"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
)1(tiaw.ksat                            
                            01 =< edutingaM.)noitisoP.)9914.13101- ,694467.033 ,7174.17301-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))9914.13101- ,694467.033 ,7174.17301-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
)1(tiaw.ksat                            
01 =< edutingaM.)noitisoP.)8348933324.0157- ,83953813622.633 ,365622235.05521-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))8348933324.0157- ,83953813622.633 ,365622235.05521-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
)1(tiaw.ksat                            
)"tratS" ,"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
                            01 =< edutingaM.)noitisoP.)9914.13101- ,694467.033 ,7174.17301-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))9914.13101- ,694467.033 ,7174.17301-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
)1(tiaw.ksat                            
eslaf = mraFotuA.)(vnegteg                            
neht mraFotuA.)(vnegteg fiesle                        
)"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
)1(tiaw.ksat                            
                            01 =< edutingaM.)noitisoP.)9914.13101- ,694467.033 ,7174.17301-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))9914.13101- ,694467.033 ,7174.17301-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
)1(tiaw.ksat                            
01 =< edutingaM.)noitisoP.)8348933324.0157- ,83953813622.633 ,365622235.05521-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))8348933324.0157- ,83953813622.633 ,365622235.05521-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
)1(tiaw.ksat                            
)"tratS" ,"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
                            01 =< edutingaM.)noitisoP.)9914.13101- ,694467.033 ,7174.17301-(wen.emarFC - noitisoP.traPtooRdionamuH.retcarahc( ro eeleMteGotuA.)(vnegteg ton litnu                            
))9914.13101- ,694467.033 ,7174.17301-(wen.emarFC(sopot                                
)1(tiaw.ksat taeper                            
neht mraFotuA.)(vnegteg ton fi                        
neht 004 => leveLortcele fi                    
neht ortcele fi                
neht eeleMteGotuA.)(vnegteg fi            
dne            
dne                
)"ortcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht ortcele ton fiesle                
"walC cirtcelE" = nopaeWtceleS.)(vnegteg                    
)"walCcirtcelEyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht 004 => leveLortcele dna ortcele fi                
neht 3dlroW dna eeleMteGotuA.)(vnegteg dna "walC cirtcelE" == edoMteG fi            
            0 ro eulaV.leveL.ortcele dna ortcele = leveLortcele lacol            
)"walC cirtcelE"(dlihCtsriFdniF:retcarahc ro )"walC cirtcelE"(dlihCtsriFdniF:kcapkcab = walCcirtcele lacol            
)"ortcelE"(dlihCtsriFdniF:retcarahc ro )"ortcelE"(dlihCtsriFdniF:kcapkcab = ortcele lacol            
retcarahC.reyalp = retcarahc lacol            
kcapkcaB.reyalp = kcapkcab lacol            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
)"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
esle                
dne                    
dne                        
)1(tiaw.ksat                            
))202991564.0 ,90-e17260627.2- ,440602588.0- ,80-e11574353.1 ,1 ,90-e7982330.4 ,440602588.0 ,80-e6237583.1- ,202991564.0 ,2709.55511- ,949823.321 ,25681.0753-(wen.emarFC(sopot                            
esle                        
dne                            
yeKretaWsah ro eeleMteGotuA.)(vnegteg ton ro 0 =< htlaeH.dionamuH.tneraP.tegrat ro tneraP.tegrat ton litnu                                
))2 ,02 ,2(wen.emarFC * emarFC.tegrat(sopot                                    
krahSemarFCdlO = emarFC.tegrat                                    
0 = deepSklaW.dionamuH.tneraP.tegrat                                    
eslaf = edilloCnaC.tegrat                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)1.0(tiaw.ksat                                    
taeper                                
emarFC.tegrat = krahSemarFCdlO lacol                                
neht tegrat fi                            
)"traPtooRdionamuH"(dlihCtsriFdniF:ymene = tegrat lacol                            
neht ymene fi                        
                        )sM(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag = ymene lacol                        
"repeeK ediT" = sM lacol                        
neht etaraKnamhsiFsah ton fiesle                    
)"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
))5631075240.0 ,0 ,314390999.0 ,0 ,1 ,0 ,314390999.0- ,0 ,5631075240.0 ,2891.51301- ,625234.932 ,8596.4062-(wen.emarFC(sopot                        
neht yeKretaWsah fi                    
  neht elbaliavAetaraKnamkrahs fi                
                004 => eulaV.leveL.)"etaraK namhsiF"(dlihCtsriFdniF:retcarahc dna )"etaraK namhsiF"(dlihCtsriFdniF:retcarahc = etaraKnamhsiFsah lacol                
)"yeK retaW"(dlihCtsriFdniF:kcapkcab ro )"yeK retaW"(dlihCtsriFdniF:retcarahc = yeKretaWsah lacol                
retcarahC.reyalp = retcarahc lacol                
kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
)"syek" ,)"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(dnif.gnirts = elbaliavAetaraKnamkrahs lacol                
                )"etaraKnamhsiFyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 2dlroW dna eeleMteGotuA.)(vnegteg dna "etaraK namkrahS" == edoMteG fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
)"geLkcalByuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
esle                
dne                    
"geL kcalB" = nopaeWtceleS.)(vnegteg                        
neht 054 < eulaV.leveL.geLkcalb dna geLkcalb fiesle                    
"petS htaeD" = nopaeWtceleS.)(vnegteg                        
)"petShtaeDyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
neht 054 => eulaV.leveL.geLkcalb dna geLkcalb fi                    
neht petShtaed ro geLkcalb fi                
)"petS htaeD"(dlihCtsriFdniF:retcarahc ro )"petS htaeD"(dlihCtsriFdniF:kcapkcab = petShtaed lacol                
)"geL kcalB"(dlihCtsriFdniF:retcarahc ro )"geL kcalB"(dlihCtsriFdniF:kcapkcab = geLkcalb lacol                
retcarahC.reyalp = retcarahc lacol                
kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
neht 2dlroW dna eeleMteGotuA.)(vnegteg dna "petShtaeD" == edoMteG fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
dne                    
dne                        
dne                            
)noitcAesahcrup(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                
esle                            
)"2" ,"walCnogarD" ,noitcAesahcrup(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                
)"1" ,"walCnogarD" ,noitcAesahcrup(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                
neht tnemgarFsi fi                            
)1.0(tiaw.ksat                            
)emaNnopaew(nopaeWpiuqEnU                            
neht ))tsoc => ileb dna tnemgarFsi ton( ro )tsoc => stnemgarf dna tnemgarFsi(( dna tnemeriuqeRlevel => eulaV.leveL.nopaew fiesle                        
emaNnopaew = nopaeWtceleS.)(vnegteg                            
neht tnemeriuqeRlevel < eulaV.leveL.nopaew fi                        
neht nopaew fi                    
)emaNnopaew(dlihCtsriFdniF:retcarahc ro )emaNnopaew(dlihCtsriFdniF:kcapkcab = nopaew lacol                    
                    "draweRdraebkcalB" == ]5[ataDnopaew = tnemgarFsi lacol                    
]4[ataDnopaew = tsoc lacol                    
]3[ataDnopaew = noitcAesahcrup lacol                    
]2[ataDnopaew = tnemeriuqeRlevel lacol                    
]1[ataDnopaew = emaNnopaew lacol                    
od )snopaeWeelem(sriapi ni ataDnopaew ,_ rof                
                }                
}0000003 ,"namuhrepuSyuB" ,003 ,"walC nogarD"{                    
,}"draweRdraebkcalB" ,0051 ,"walCnogarD" ,003 ,"etaraK namhsiF"{                    
,}000057 ,"etaraKnamhsiFyuB" ,003 ,"ortcelE"{                    
,}000003 ,"ortcelEyuB" ,003 ,"geL kcalB"{                    
{ = snopaeWeelem lacol                
                dne                
"namuhrepuS" = nopaeWtceleS.)(vnegteg                    
neht )"namuhrepuS"(dlihCtsriFdniF:retcarahc ro )"namuhrepuS"(dlihCtsriFdniF:kcapkcab fi                
                dne                
)"geLkcalByuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)1.0(tiaw.ksat                    
)"tabmoC"(nopaeWpiuqEnU                    
neht 000051 => ileb dna ))"tabmoC"(dlihCtsriFdniF:retcarahc ro )"tabmoC"(dlihCtsriFdniF:kcapkcab( fi                
                0 ro eulaV.stnemgarF.ataD.reyalp dna stnemgarF.ataD.reyalp = stnemgarf lacol                
eulaV.ileB.ataD.reyalp = ileb lacol                
retcarahC.reyalp = retcarahc lacol                
kcapkcaB.reyalp = kcapkcab lacol                
reyalPlacoL.sreyalP.emag = reyalp lacol                
neht 2dlroW dna eeleMteGotuA.)(vnegteg dna "namuhrepuS" == edoMteG fi            
od )1.0(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
eulaV = edoMteG
)eulaV(noitcnuf(degnahCnO:nwodporD
)}
,eslaf = itluM    
,}"namuHdoG" ,"nolaT nogarD" ,"walC cirtcelE" ,"etaraK namkrahS" ,"petShtaeD" ,"namuhrepuS"{ = seulaV    
,"eeleM tceleS" = eltiT    
{ ,"mraFnwodporD"(nwodporDddA:kcatS = nwodporD
)} "" = nocI ,"mraF kcatS baT" = eltiT {(baTddA:wodniW = kcatS
)dne
)mraFyretsaM.)(vnegteg(neewTpotS    
eulaV = mraFyretsaM.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"yretsaM mraF otuA" = eltiT { ,"mraF otuA"(elggoTddA:niaM = elggoT
)dne
lin =~ )"F" ,seulaVdetceles(dnif.elbat = FllikS.)(vnegteg    
lin =~ )"V" ,seulaVdetceles(dnif.elbat = VllikS.)(vnegteg    
lin =~ )"C" ,seulaVdetceles(dnif.elbat = CllikS.)(vnegteg    
lin =~ )"X" ,seulaVdetceles(dnif.elbat = XllikS.)(vnegteg    
lin =~ )"Z" ,seulaVdetceles(dnif.elbat = ZllikS.)(vnegteg    
)seulaVdetceles(noitcnuf(degnahCnO:nwodporD
)}
,}{ = tluafeD    
,eurt = itluM    
,} "F" ,"V" ,"C" ,"X" ,"Z" { = seulaV    
,"yretsaM llikS tceleS" = eltiT    
{ ,"nwodporD"(nwodporDddA:niaM = nwodporD lacol
)dne
)dne    
dne        
dne            
dne                
dne                    
emaN.v = nuGnopaeWtceleS                        
 neht )"toohSnoitcnuFetomeR"(dlihCtsriFdniF:v fi                    
neht )"looT"(AsI:v fi                
  od ))(nerdlihCteG:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(sriap ni v,i rof            
od )(tiaw.ksat elihw         
)(noitcnuf(llacp     
)(noitcnuf(nwaps
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = rlp lacol
)dne
)dne    
dne        
dne            
dne                
dne                    
dne                        
emaN.v = nuGnopaeWtceleS                            
neht )"toohSnoitcnuFetomeR"(dlihCtsriFdniF:v fi                        
neht )"looT"(AsI:v fi                    
od ))(nerdlihCteG:kcapkcaB.reyalPlacoL.sreyalP.emag(sriap ni v,i rof                
od )(tiaw.ksat elihw            
neht mraFyretsaM.)(vnegteg fi        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
dne        
dne            
dne                
 dne                    
dne                        
dne                            
eslaf = pmuJ.dionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                                
)(tiaw.ksat                                
eurt = pmuJ.dionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                                
neht 1 =< Y.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                            
esle                        
))01,0,0(wen.emarFC * emarFC.traPtooRdionamuH.boM(sopot                            
neht boM fi                        
 )noM(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = boM                        
)noMemarFC(sopot                       
esle                    
)dne                        
dne                            
dne                                
eslaf == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ro mraFyretsaM.)(vnegteg ton ro 0 =< htlaeH.dionamuH.v litnu                                    
dne                                        
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                            
 eurt = tengaMtratS.)(vnegteg                                            
esle                                        
emarFC.traPtooRdionamuH.v = nuGyretsaMnoMsoP                                            
 eurt = tengaMtratS.)(vnegteg                                            
dne                                            
))276 ,0821(wen.2rotceV(nwoD1nottuB:'resUlautriV'ecivreSteG:emag                                                
)(rellortnoCerutpaC:'resUlautriV'ecivreSteG:emag                                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                                
    eslaf = edilloCnaC.daeH.v                                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                                
0 = deepSklaW.dionamuH.v                                                
emarFC.traPtooRdionamuH.v = noMsoP                                                
                emaN.v = mraFnoM                                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                                
)(ikaHotuA                                                
esle                                            
)traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag,eslaf,021,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                                
)traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag,eslaf,021,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                                
)1.(tiaw.ksat                                                
)traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag,eslaf,221,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                                
)traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag,eslaf,221,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                                                
)1.(tiaw.ksat                                                
))sgra(kcapnu(revreSekovnI:toohSnoitcnuFetomeR.]nuGnopaeWtceleS[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                                                
}                                                
traPtooRdionamuH.v = ]2[                                                    
,noitisoP.traPtooRdionamuH.v = ]1[                                                    
{ = sgra lacol                                                
                                                eslaf = edilloCnaC.daeH.v                                                
)1,2,2(wen.3rotceV = eziS.traPtooRdionamuH.v                                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                                
0 = deepSklaW.dionamuH.v                                                
))01,0,0(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                                                
emarFC.traPtooRdionamuH.v = noMsoP                                                
                emaN.v = mraFnoM                                                
noitisoP.llikSmiA = noitisoPllikStoBmiA                                                
)0 ,51- ,0(wen.emarFC * emarFC.enignE.v = llikSmiA                                                
eurt = tobmiallikS                                                
)nuGnopaeWtceleS(nopaeWpiuqE                                                
neht niMhtlaeH =< htlaeH.dionamuH.v fi                                            
001/tA_lliK.)(vnegteg * htlaeHxaM.dionamuH.v = niMhtlaeH                                            
neht )noMemaN ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts fi                                        
)(tiaw.ksat taeper                                    
neht noM == emaN.v fi                                
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v,i rof                            
)(noitcnuf(llacp                        
neht )noM(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
)(tseuQkcehC                    
neht eurt == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fiesle                
dne                    
)tseuQleveL ,tseuQemaN ,"tseuQtratS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
)1.1(tiaw.ksat                        
neht 01 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - noitisoP.tseuQemarFC( fi                    
dne                        
)tseuQemarFC(sopot                             
                                 esle                        
dne                            
)tseuQemarFC(sopot                                
esle                            
)tseuQemarFC(sopot                                
neht 0002 =< edutingaM.)noitisoP.tseuQemarFC - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fiesle                            
)tseuQemarFC(PTB        						
neht 0002 > edutingaM.)noitisoP.tseuQemarFC - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi                            
neht PTssapyB fi                        
)(tseuQkcehC                    
neht eslaf == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                
dne                
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
          eslaf = tobmiallikS                    
                      neht )noMemaN ,eltiTtseuQ(dnif.gnirts ton fi                
txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = eltiTtseuQ                
neht mraFyretsaM.)(vnegteg dna "nuG" == 2edoMmraF fi            
od )(tiaw.ksat elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
    )dne
)dne    
)dne        
dne            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                
}                
noitisoP.tiurFyretsaMnoMsoP = ]1[                    
{ = sgra lacol                
neht llikSesU fi            
)(noitcnuf(tcennoC:deppetSredneR.)"ecivreSnuR"(ecivreSteG:emag        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
)dne    
)dne        
dne            
dne                
dne                    
dne                        
)(yortseD:v                            
neht )"!dekcol llikS" ,txeT.v(dnif.gnirts fi                        
neht "etalpmeTnoitacifitoN" == emaN.v fi                    
od ))(nerdlihCteG:snoitacifitoN.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(sriap ni v ,i rof                
neht llikSesU fi            
)(noitcnuf(llacp        
)(noitcnuf(tcennoC:deppetSredneR.)"ecivreSnuR"(ecivreSteG:emag    
)(noitcnuf(nwaps
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
)emag ,eslaf ,"F" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)emag ,eslaf ,"F" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]emaN.)"looT"(ssalCfOdlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                            
}                            
noitisoP.tiurFyretsaMnoMsoP = ]1[                                
{ = sgra lacol                            
neht FllikS.)(vnegteg fi                        
dne                        
)emag ,eslaf ,"V" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)emag ,eslaf ,"V" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]emaN.)"looT"(ssalCfOdlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                            
}                            
noitisoP.tiurFyretsaMnoMsoP = ]1[                                
{ = sgra lacol                            
neht VllikS.)(vnegteg fi                        
dne                        
)emag ,eslaf ,"C" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)emag ,eslaf ,"C" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]emaN.)"looT"(ssalCfOdlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                            
}                            
noitisoP.tiurFyretsaMnoMsoP = ]1[                                
{ = sgra lacol                            
neht CllikS.)(vnegteg fi                        
dne                        
)emag ,eslaf ,"X" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)emag ,eslaf ,"X" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]emaN.)"looT"(ssalCfOdlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                            
}                            
noitisoP.tiurFyretsaMnoMsoP = ]1[                                
{ = sgra lacol                            
neht XllikS.)(vnegteg fi                        
dne                        
)emag ,eslaf ,"Z" ,eslaf(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
)emag ,eslaf ,"Z" ,eurt(tnevEyeKdneS:)"reganaMtupnIlautriV"(ecivreSteG:emag                            
))sgra(kcapnu(revreSeriF:tnevEetomeR.]emaN.)"looT"(ssalCfOdlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                            
}                            
noitisoP.tiurFyretsaMnoMsoP = ]1[                                
{ = sgra lacol                            
neht ZllikS.)(vnegteg fi                        
neht )eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                    
dne                    
eulaV.leveL.]eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = FBsaM                        
neht )eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fiesle                    
eulaV.leveL.]eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = FBsaM                        
neht )eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                    
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                
)(tseuQkcehC                
)(noitcnuf(llacp            
neht llikSesU fi        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
dne                            
eslaf = pmuJ.dionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                                
)(tiaw.ksat                                
eurt = pmuJ.dionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                                
neht 1 =< Y.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                            
esle                        
))01 ,0 ,0(wen.emarFC * emarFC.traPtooRdionamuH.boM(sopot                            
neht boM fi                        

)noM(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = boM                        
eslaf = tobmiallikS                        
eslaf = llikSesU                        
)noMemarFC(sopot                        
esle                    
dne                        
dne                            
dne                                
dne                                    
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                        
eslaf = llikSesU                                        
esle                                    
eslaf == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ro tneraP.v ton ro 0 =< htlaeH.dionamuH.v ro mraFyretsaM.)(vnegteg ton litnu                                        
eurt = tengaMtratS.)(vnegteg                                            
dne                                            
eslaf = edilloCnaC.daeH.v                                                
0 = deepSklaW.dionamuH.v                                                
emarFC.traPtooRdionamuH.v = tiurFyretsaMnoMsoP                                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                                
emarFC.traPtooRdionamuH.v = noMsoP                                                
emaN.v = mraFnoM                                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                                
)(ikaHotuA                                                
eslaf = tobmiallikS                                                
eslaf = llikSesU                                                
esle                                            
eurt = tobmiallikS                                                
eurt = llikSesU                                                
eslaf = edilloCnaC.daeH.v                                                
0 = deepSklaW.dionamuH.v                                                
emarFC.traPtooRdionamuH.v = noMsoP                                                
emaN.v = mraFnoM                                                
emarFC.traPtooRdionamuH.v = tiurFyretsaMnoMsoP                                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                                
))0 ,01 ,0(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                                                
)eulaV.tiurFliveD.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(nopaeWpiuqE                                                
)(ikaHotuA                                                
neht sMhtlaeH =< htlaeH.dionamuH.v fi                                            
)(tiaw.ksat taeper                                        
001 / tA_lliK.)(vnegteg * htlaeHxaM.dionamuH.v = sMhtlaeH                                        
neht )noMemaN ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts fi                                    
neht noM == emaN.v fi                                
neht 0 > htlaeH.dionamuH.v dna )"dionamuH"(dlihCtsriFdniF:v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v fi                            
od ))(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                        
neht )noM(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
)(tseuQkcehC                    
neht eurt == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fiesle                
dne                    
)1.0(tiaw                        
)tseuQleveL ,tseuQemaN ,"tseuQtratS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
)1.0(tiaw                        
neht 5 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - noitisoP.tseuQemarFC( fi                    
mraFyretsaM.)(vnegteg ton ro 3 =< edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - noitisoP.tseuQemarFC( litnu                    
)tseuQemarFC(sopot                        
)(tiaw.ksat taeper                    
dne                    
dne                        
)tseuQemarFC(sopot                            
esle                        
)tseuQemarFC(sopot                            
neht 0002 =< edutingaM.)noitisoP.tseuQemarFC - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fiesle                        
)tseuQemarFC(PTB                            
neht 0002 > edutingaM.)noitisoP.tseuQemarFC - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi                        
neht PTssapyB fi                    
)(tseuQkcehC                    
eslaf = llikSesU                    
neht eslaf == elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi                
dne                
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
eslaf = tobmiallikS                    
eslaf = llikSesU                    
neht )noMemaN ,eltiTtseuQ(dnif.gnirts ton fi                
txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = eltiTtseuQ                
)(noitcnuf(llacp            
neht mraFyretsaM.)(vnegteg dna "tiurF xolB" == 2edoMmraF fi        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = 2edoMmraF
)eulaV(noitcnuf(degnahCnO:nwodporD
)"tiurF xolB"(eulaVteS:nwodporD
)}
,eslaf = itluM    
,}"nuG" ,"tiurF xolB"{ = seulaV    
,"yretsaM mraF dohteM tceleS" = eltiT    
{ ,"mraFnwodporD"(nwodporDddA:niaM = nwodporD
)}
dne    
eulaV = tA_lliK.)(vnegteg         
)eulaV(noitcnuf = kcabllaC     
,5 = gnidnuoR     
,001 = xaM     
,0 = niM     
,03 = tluafeD     
,"] % [ htlaeH tceleS" = eltiT     
{ ,"redilS"(redilSddA:niaM = redilS
)}
)12 ,"-"(per.gnirts = tnetnoC     
,"mraF yretsaM" = eltiT     
{(hpargaraPddA:niaM
)dne
dne    
dne        
)dne            
)(snwapSymenEeldnah                
dne                
dne                    
dne                        
)emaNymenE ,v(ymenEssecorp                            
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni v ,_ rof                        
neht )emaNymenE(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
od )noMM(sriapi ni emaNymenE ,_ rof                
)soPM(sopot                
)lairetaMtceleS(noMlairetaM                
)(noitcnuf(llacp            
neht lairetaMotuA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
dne    
dne        
dne            
dne                
dne                    
)soP * emarFC.v(sopot                        
neht 01 => edutingaM.)noitisoP.v - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag( fi                    
neht )emaNymenE ,emaN.v(dnif.gnirts fi                
od )noMM(sriapi ni emaNymenE ,_ rof            
od ))(nerdlihCteG:snwapSymenE.]"nigirOdlroW_"[)"ecapskroW"(ecivreSteG:emag(sriap ni v ,_ rof        
)(snwapSymenEeldnah noitcnuf lacol    
dne    
dne        
dne            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqEnU                
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro lairetaMotuA.)(vnegteg ton litnu                
emarFC.traPtooRdionamuH.v = noMsoP                    
emaN.v = mraFnoM                    
eurt = tengaMtratS.)(vnegteg                    
)soP * emarFC.traPtooRdionamuH.v(sopot                    
eslaf = edilloCnaC.daeH.v                    
0 = deepSklaW.dionamuH.v                    
eslaf = edilloCnaC.traPtooRdionamuH.v                    
)(ikaHotuA                    
dne                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                        
neht 001 =< edutingaM.)noitisoP.traPtooRdionamuH.v - noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP( fi                    
)1.0(tiaw.ksat                    
taeper                
neht emaNymenE == emaN.v fi            
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi        
)emaNymenE ,v(ymenEssecorp noitcnuf lacol    
)(noitcnuf(nwaps
)dne
)lairetaMotuA.)(vnegteg(neewTpotS    
eulaV = lairetaMotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"lairetaM mraF" = eltiT { ,"elggoT"(elggoTddA:niaM = elggoT
)dne
eulaV = lairetaMtceleS    
)eulaV(noitcnuf(degnahCnO:noMtsiLlairetaM
)}
,eslaf = itluM     
,tsiLlairetaM = seulaV     
,"lairetaM tceleS" = eltiT     
{ ,"noMtsiLlairetaM"(nwodporDddA:niaM = noMtsiLlairetaM
dne
}      
"ksuT iniM" ,"liaT hsiF" ,"redwopnuG" ,"elacS nogarD" ,"aocoC derujnoC" ,"psiW cinomeD" ,"lateM parcS + rehtaeL"      
{ = tsiLlairetaM
neht 3dlroW fiesle
}      
"gnaF eripmaV" ,"erO amgaM" ,"telporD citsyM" ,"msalpotcE" ,"lairetaM evitcaoidaR" ,"lateM parcS + rehtaeL"     
{ = tsiLlairetaM
neht 2dlroW fiesle
}      
"liaT hsiF" ,"erO amgaM" ,"sgniW legnA" ,"lateM parcS + rehtaeL"     
{ = tsiLlairetaM
neht 1dlroW fi
)}
)12 ,"-"(per.gnirts = tnetnoC     
,"lairetaM gnimraF" = eltiT     
{(hpargaraPddA:niaM
)dne
)mraFotuA.)(vnegteg(neewTpotS    
eulaV = mraFotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"mraF tratS" = eltiT { ,"elggoT"(elggoTddA:niaM = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
)soPekaC(sopot                            
esle                        
)soPekaC(PTB                            
neht PTssapyB fi                        
)37321- ,252 ,7702-(wen.emarFC = soPekaC lacol                        
esle                    
dne                        
dne                            
dne                                
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro mraFotuA.)(vnegteg ton litnu                                    
eurt = gnirBekaC.)(vnegteg                                        
)soP * emarFC.traPtooRdionamuH.v(sopot                                        
eslaf = edilloCnaC.daeH.v                                        
0 = deepSklaW.dionamuH.v                                        
eslaf = edilloCnaC.traPtooRdionamuH.v                                        
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                        
)(ikaHotuA                                        
)(tiaw:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag                                        
 taeper                                    
                                    neht 0 > htlaeH.dionamuH.v dna                                    
 )"dionamuH"(dlihCtsriFdniF:v dna                                    
 )"traPtooRdionamuH"(dlihCtsriFdniF:v dna                                    
 )"rekaB daeH" == emaN.v ro "ffatS gnikaB" == emaN.v ro                                    
 "drauG ekaC" == emaN.v ro "retfarC eikooC" == emaN.v( fi                                
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi                            
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni v ,_ rof                        
                        neht )"rekaB daeH"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro                        
 )"ffatS gnikaB"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro                        
 )"drauG ekaC"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro                        
 )"retfarC eikooC"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
esle                
dne                    
dne                        
))3509.40421- ,407513.941 ,35128.1512-(wen.emarFC(sopot                            
                            neht 0002 => edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag -                            
 noitisoP.)5786408476.37941- ,57817115999.2354 ,578124706276.0991-(wen.emarFC( dna                            
 0 == ycnerapsnarT.rehtO.rorriMgiB.faoLekaC.paM.)"ecapskroW"(ecivreSteG:emag fi                        
esle                    
dne                        
dne                            
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro mraFotuA.)(vnegteg ton litnu                                
)soP * emarFC.traPtooRdionamuH.v(sopot                                    
)06 ,06 ,06(wen.3rotceV = eziS.traPtooRdionamuH.v                                    
0 = deepSklaW.dionamuH.v                                    
eslaf = edilloCnaC.traPtooRdionamuH.v                                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                    
)(ikaHotuA                                    
)(tiaw:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag                                    
 taeper                                
                                neht 0 > htlaeH.dionamuH.v dna                                
 )"dionamuH"(dlihCtsriFdniF:v dna                                
 )"traPtooRdionamuH"(dlihCtsriFdniF:v dna                                
 "ecnirP ekaC" == emaN.v dna mraFotuA.)(vnegteg fi                            
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni v ,_ rof                        
neht )"ecnirP ekaC"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag fi                    
neht )"ecnirP ekaC"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"ecnirP ekaC"(dlihCtsriFdniF:egarotSdetacilpeR.emag fi                
                )"renwapSecnirPekaC"(revreSekovnI:_FmmoC.setomeR.egarotSdetacilpeR.emag                
)(noitcnuf(llacp            
neht 3dlroW dna mraFotuA.)(vnegteg dna "irukataK mraF" == edoMmraF fi        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
dne    
dne        
)dne            
dne                
dne                    
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                        
dne                        
)(yortseD:rotaminA.dionamuH.v                            
neht )'rotaminA'(dlihCtsriFdniF:dionamuH.v fi                        
0 = deepSklaW.dionamuH.v                        
0 = rewoPpmuJ.dionamuH.v                        
eslaf = edilloCnaC.traPtooRdionamuH.v                        
)41(etatSegnahC:dionamuH.v                        
)1.0(tiaw.ksat                        
)11(etatSegnahC:dionamuH.v                        
eslaf = tiS.dionamuH.v                        
eslaf = edilloCnaC.daeH.v                        
dne                        
emarFCtegrat = emarFC.traPtooRdionamuH.v                            
neht emarFCtegrat fi                        
]emaN.v[ekaC = emarFCtegrat lacol                        
neht ]emaN.v[ekaC fi                    
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriap ni v ,_ rof                
)(noitcnuf(llacp            
neht gnirBekaC.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
}
)257.45821- ,3023825.35 ,6141.3222-(wen.emarFC = ]"rekaB daeH"[    
,)8424.99821- ,7159328.73 ,24753.2781-(wen.emarFC = ]"ffatS gnikaB"[    
,)9252.61421- ,7098328.73 ,33465.5751-(wen.emarFC = ]"drauG ekaC"[    
,)1682.39021- ,9509328.73 ,25082.3332-(wen.emarFC = ]"retfarC eikooC"[    
{ = ekaC lacol
)dne
dne    
dne        
)dne            
dne                
dne                    
dne                        
))2 ,02 ,2(wen.emarFC * emarFC.traPtooRdionamuH.v(sopot                            
neht "ymmuM dessesoP" == emaN.v ro "luoS cinomeD" == emaN.v ro "eibmoZ gniviL" == emaN.v ro "notelekS nrobeR" == emaN.v fi                        
od ))(nerdlihCteG:)"egarotSdetacilpeR"(ecivreSteG:emag(sriap ni v ,_ rof                    
                    ))6875 ,461 ,5159-(wen.emarFC(sopot                    
eslaf = gnirBsenoB.)(vnegteg                    
)nopaeWtceleS.)(vnegteg(nopaeWpiuqEnU                    
dne                    
)soPenoB(sopot                        
esle                    
dne                        
)soPenoB(sopot                            
esle                        
)soPenoB(PTB                            
neht 0051 > edutingaM.)noitisoP.soPenoB - soPreyalp( fi                        
noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = soPreyalp lacol                        
neht PTssapyB fi                    
neht ymenEdnuof ton fi                
                dne                
dne                    
dne                        
0 =< htlaeH.dionamuH.v ro tneraP.v ton ro mraFotuA.)(vnegteg ton litnu                            
)soP * emarFC.traPtooRdionamuH.v(sopot                                
eurt = gnirBsenoB.)(vnegteg                                
eslaf = edilloCnaC.daeH.v                                
0 = deepSklaW.dionamuH.v                                
eslaf = edilloCnaC.traPtooRdionamuH.v                                
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                
)(ikaHotuA                                
)1.0(tiaw taeper                            
eurt = ymenEdnuof                            
neht 0 > htlaeH.dionamuH.v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna )"dionamuH"(dlihCtsriFdniF:v fi                        
neht "ymmuM dessesoP" == emaN.v ro "luoS cinomeD" == emaN.v ro "eibmoZ gniviL" == emaN.v ro "notelekS nrobeR" == emaN.v fi                    
od )seimene(sriap ni v ,_ rof                
eslaf = ymenEdnuof lacol                
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol                
)(noitcnuf(llacp            
neht 3dlroW dna mraFotuA.)(vnegteg dna "enoB mraF" == edoMmraF fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
)5734841770.7116 ,573432516031.271 ,573432.6059-(wen.emarFC = soPenoB
)dne
dne    
dne        
)dne            
dne                
dne                    
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL.sreyalP.emag(ytreporpneddihtes                        
dne                        
)(yortseD:rotamina                            
neht rotamina fi                        
)"rotaminA"(dlihCtsriFdniF:dionamuH.v = rotamina lacol                        
0 = deepSklaW.dionamuH.v                        
0 = rewoPpmuJ.dionamuH.v                        
eslaf = edilloCnaC.traPtooRdionamuH.v                        
)41(etatSegnahC:dionamuH.v                        
)1.0(tiaw.ksat                        
)11(etatSegnahC:dionamuH.v                        
eslaf = tiS.dionamuH.v                        
eslaf = edilloCnaC.daeH.v                        
]emaN.v[enoB = emarFC.traPtooRdionamuH.v                        
neht )"dionamuH"(dlihCtsriFdniF:v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v dna ]emaN.v[enoB fi                    
od ))(nerdlihCteG:seimenE.ecapskroW.emag(sriapi ni v ,_ rof                
)(noitcnuf(llacp            
neht gnirBsenoB.)(vnegteg fi        
od )2.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
}
)97268.7816 ,48813818.5 ,18288.0759-(wen.emarFC = ]"ymmuM dessesoP"[    
,)66503.2516 ,36031.271 ,88171.5259-(wen.emarFC = ]"luoS cinomeD"[    
,)2575.4695 ,184256.831 ,1354.65101-(wen.emarFC = ]"eibmoZ gniviL"[    
,)73672.5506 ,36031.241 ,48985.9678-(wen.emarFC = ]"notelekS nrobeR"[    
{ = enoB lacol
)dne
dne    
dne        
dne            
eurt = nuRnac                
)5.0(tiaw.ksat                
)dne                
dne                    
dne                        
dne                            
dne                                
dne                                    
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                                        
eslaf = tengaMtratS.)(vnegteg                                        
esle                                    
elbisiV.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ton ro tneraP.v ton ro 0 =< htlaeH.dionamuH.v ro mraFotuA.)(vnegteg ton litnu                                        
)eguh.htam ,"suidaRnoitalumiS" ,reyalp(ytreporpneddihtes                                            
eurt = tengaMtratS.)(vnegteg                                            
eslaf = edilloCnaC.daeH.v                                            
0 = deepSklaW.dionamuH.v                                            
eslaf = edilloCnaC.traPtooRdionamuH.v                                            
)soP * emarFC.traPtooRdionamuH.v(sopot                                            
emarFC.traPtooRdionamuH.v = noMsoP                                            
)nopaeWtceleS.)(vnegteg(nopaeWpiuqE                                            
)(ikaHotuA                                            
)1.0(tiaw.ksat                                            
taeper                                        
neht )noMemaN ,txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(dnif.gnirts fi                                    
neht noM == emaN.v dna 0 > htlaeH.dionamuH.v fi                                
neht )"dionamuH"(dlihCtsriFdniF:v dna )"traPtooRdionamuH"(dlihCtsriFdniF:v fi                            
od )seimene(sriap ni v ,_ rof                        
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol                        
)(tseuQkcehC                        
neht elbisiVtseuq fiesle                    
dne                        
)tseuQleveL ,tseuQemaN ,"tseuQtratS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                            
neht 02 =< edutingaM.)noitisoP.tseuQemarFC - noitisoP.tooRdionamuh( fi                        
dne                        
)tseuQemarFC(sopot                            
esle                        
dne                            
)tseuQemarFC(sopot                                
neht 0051 < ecnatsid fiesle                            
))5 ,02 ,0(wen.emarFC * tseuQemarFC(PTB                                
neht 0051 > ecnatsid fi                            
edutingaM.)noitisoP.tseuQemarFC - noitisoP.tooRdionamuh( = ecnatsid lacol                            
neht PTssapyB fi                        
)(tseuQkcehC                        
eslaf = tengaMtratS.)(vnegteg                        
neht elbisiVtseuq ton fi                    
dne                    
)"tseuQnodnabA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                        
eslaf = tengaMtratS.)(vnegteg                        
neht )noMemaN ,eltiTtseuq(dnif.gnirts ton fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp = tooRdionamuh lacol                    
elbisiV.tseuQ.niaM.iuGreyalP.reyalp = elbisiVtseuq lacol                    
txeT.eltiT.eltiTtseuQ.reniatnoC.tseuQ.niaM.iuGreyalP.reyalp = eltiTtseuq lacol                    
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                    
)(noitcnuf(nwaps                
eslaf = nuRnac                
neht nuRnac fi            
neht "leveL mraF" == edoMmraF dna mraFotuA.)(vnegteg fi        
od )emiTecnuobed(tiaw elihw    
5.0 = emiTecnuobed lacol    
eurt = nuRnac lacol    
)(noitcnuf(nwaps
)dne
eulaV = edoMmraF
)eulaV(noitcnuf(degnahCnO:nwodporD
)"leveL mraF"(eulaVteS:nwodporD
)}
,eslaf = itluM    
,}"irukataK mraF" ,"enoB mraF" ,"leveL mraF"{ = seulaV    
,"mraF dohteM tceleS" = eltiT    
{ ,"mraFnwodporD"(nwodporDddA:niaM = nwodporD
)}
)12 ,"-"(per.gnirts = tnetnoC     
,"mraF niaM" = eltiT     
{(hpargaraPddA:niaM
)}
dne    
)dne        
)"BRtfGCY2/gg.drocsid//:sptth"(draobpilctes            
)(noitcnuf(llacp        
)(noitcnuf = kcabllaC    
,"knil etivni drocsid ypoC" = eltiT    
{(nottuBddA:niaM
)} "" = nocI ,"gnimraF baT" = eltiT {(baTddA:wodniW = niaM
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
)(yortseD:v                            
neht )emaN.v ,evomeRoTstpircs(dnif.elbat fi                        
}                        
"tsiLreyalP" ,"pSdoolBuneM"                            
,"dleiFecroFmotsuC" ,"sedoC" ,"snalC" ,"xiFguBD6rotoMxolboR"                            
{ = evomeRoTstpircs lacol                        
neht )"tpircSlacoL"(AsI:v fi                    
od ))(stnadnecseDteG:stpircSreyalP.reyalp(sriap ni v ,_ rof                
dne                
dne                    
dne                        
)(yortseD:v                            
neht )emaN.v ,evomeRoTstpircs(dnif.elbat fi                        
}                        
"nuR" ,"gnikooL" ,"DCpmuJ" ,"boBmaC"                            
 ,"4444" ,"egamaDllaF" ,"kcoltfihS" ,"lareneG"                            
{ = evomeRoTstpircs lacol                        
neht )"tpircSlacoL"(AsI:v fi                    
od ))(stnadnecseDteG:retcarahC.reyalp(sriap ni v ,_ rof                
                reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol                
neht sgalFteseR.)(vnegteg fi            
)(noitcnuf(llacp        
od )5(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
eulaV = sgalFteseR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"detceted gnieb tuohtiw ylefas mraF uoy spleh erutaef sihT" = noitpircseD ,"gnimraF taehC itnA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
dne        
dne            
dne                
)dne                    
)(yortseD:v                        
)(noitcnuf(llacp                    
neht )"sdnuoS" == emaN.v ro "liaThsalS" == emaN.v ro "hsalSdrowS" == emaN.v ro "tiHhsalS" == emaN.v ro "gniRdevruC" == emaN.v( dna v fi                
od ))(nerdlihCteG:]"nigirOdlroW_"[ecapskroW.emag(sriap ni v ,i rof            
neht gaLecudeR.)(vnegteg fi        
od )1.0(tiaw elihw    
)(noitcnuf(nwaps
)dne
eulaV = gaLecudeR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"ylefaS mraF gaL ecudeR otuA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)}
dne    
eulaV = YsoP         
)eulaV(noitcnuf = kcabllaC     
,5 = gnidnuoR     
,03 = xaM     
,0 = niM     
,51 = tluafeD     
,"ecnatsiD mraF" = eltiT     
{ ,"redilS"(redilSddA:sgnitteS = redilS
)dne
dne    
dne        
)0 ,YsoP ,0(wen.emarFC = soP            
esle        
)0 ,YsoP ,02(wen.emarFC = soP            
)1.0(tiaw            
)02 ,YsoP ,0(wen.emarFC = soP            
)1.0(tiaw            
)0 ,YsoP ,02-(wen.emarFC = soP            
)1.0(tiaw            
)02- ,YsoP ,0(wen.emarFC = soP            
neht soPnipS.)(vnegteg fi        
od )(tiaw elihw    
)(noitcnuf(nwaps
)dne
eulaV = soPnipS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"mraF nehW noitisoP nipS" = noitpircseD ,"noitisoP nipS" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
)dne        
dne            
dne                
dne                    
dne                        
dne                            
dne                                
1 + tnuoCretsnoM = tnuoCretsnoM                                    
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL(ytreporpneddihtes                                    
dne                                    
)dne                                        
)(yortseD:rotamina                                            
)(noitcnuf(llacp                                        
neht rotamina fi                                    
)"rotaminA"(dlihCtsriFdniF:dionamuh = rotamina lacol                                    
eslaf = edilloCnaC.daeH.ymene                                    
noMsoP = emarFC.traPtoor                                    
)06 ,06 ,06(wen.3rotceV = eziS.traPtoor                                    
eslaf = edilloCnaC.traPtoor                                    
neht tneraP.traPtoor fi                                
neht 0054 =< edutingaM.)noitisoP.noMsoP - noitisoP.traPtoor( dna noMsoP dna )noM == emaN.ymene ro mraFnoM == emaN.ymene( fiesle                            
dne                                
1 + tnuoCretsnoM = tnuoCretsnoM                                    
)eguh.htam ,"suidaRnoitalumiS" ,reyalPlacoL(ytreporpneddihtes                                    
dne                                    
)dne                                        
)(yortseD:rotamina                                            
)(noitcnuf(llacp                                        
neht rotamina fi                                    
)"rotaminA"(dlihCtsriFdniF:dionamuh = rotamina lacol                                    
eslaf = edilloCnaC.daeH.ymene                                    
noMsoP = emarFC.traPtoor                                    
)06 ,06 ,06(wen.3rotceV = eziS.traPtoor                                    
eslaf = edilloCnaC.traPtoor                                    
neht tneraP.traPtoor fi                                
neht 0005 =< edutingaM.)noitisoP.noMsoP - noitisoP.traPtoor( dna noMsoP dna "ffatS yrotcaF" == emaN.ymene fi                            
neht 053 =< ecnatsid dna 0 > htlaeH.dionamuh dna )noM == emaN.ymene ro mraFnoM == emaN.ymene( dna tengaMtratS.)(vnegteg fi                        
edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL - noitisoP.traPtoor( = ecnatsid lacol                        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL dna retcarahC.reyalPlacoL dna traPtoor dna dionamuh fi                    
)"traPtooRdionamuH"(dlihCtsriFdniF:ymene = traPtoor lacol                    
)"dionamuH"(dlihCtsriFdniF:ymene = dionamuh lacol                    
neht )"traPtooRdionamuH"(dlihCtsriFdniF:ymene dna )"dionamuH"(dlihCtsriFdniF:ymene dna retsnoMgnirB.)(vnegteg fi                
                dne                
kaerb                    
neht 2 => tnuoCretsnoM fi                
od )seimene(sriapi ni ymene ,_ rof            
0 = tnuoCretsnoM lacol            
)(nerdlihCteG:seimenE.ecapskroW = seimene lacol            
)(tseuQkcehC            
)(noitcnuf(llacp        
od )1.0(tiaw.ksat elihw    
)(noitcnuf(nwaps
reyalPlacoL.sreyalP = reyalPlacoL lacol
)"ecapskroW"(ecivreSteG:emag = ecapskroW lacol
)"sreyalP"(ecivreSteG:emag = sreyalP lacol
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)dne
eulaV = retsnoMgnirB.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)}eurt = tluafeD ,"boM gnirB" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
lin = ksaTkcattAtsaF        
neht ksaTkcattAtsaF dna eulaV ton fi    
dne    
)pooLkcattAtsaF(nwaps.ksat = ksaTkcattAtsaF        
neht ksaTkcattAtsaF ton dna eulaV fi    
eulaV = kcattAtsaF.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
dne
dne    
)1.0(tiaw.ksat        
dne        
)(nwoDlooCoNkcattA            
neht "noitcnuf" == )nwoDlooCoNkcattA(epyt fi        
od kcattAtsaF.)(vnegteg elihw    
)(pooLkcattAtsaF noitcnuf lacol
ksaTkcattAtsaF lacol
)}eurt = tluafeD ,"kcattA tsaF" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
eslaf = kcattAtsaF.)(vnegteg
)dne
dne	
dne		
dne			
eslaf = PTssapyB				
neht )"ecilahC s'doG"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag ro )"ecilahC s'doG"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag ro )"ssenkraD fo tsiF"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag ro )"ssenkraD fo tsiF"(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag fi			
neht PTpotS.)(vnegteg fi		
od )1(tiaw.ksat elihw	
)(noitcnuf(nwaps
)dne
eulaV = PTpotS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"yradnegeL evaH nehW tropeleT teseR potS" = eltiT { ,"PT ssapyB"(elggoTddA:sgnitteS = elggoT
)dne
 eulaV = PTssapyB    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"tropeleT teseR" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
)(tiaw:taebtraeH.)"ecivreSnuR"(ecivreSteG:emag        
dne        
)dne            
)emarFC.aremaCtnerruC.ecapskrow ,)0 ,0(wen.2rotceV(pU2nottuB:uv                
)1(tiaw                
)emarFC.aremaCtnerruC.ecapskrow ,)0 ,0(wen.2rotceV(nwoD2nottuB:uv                
)(noitcnuf(tcennoC:deldI.reyalp            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
)"resUlautriV"(ecivreSteG:emag = uv lacol            
neht KFAitnA.)(vnegteg fi        
od eurt elihw    
)(noitcnuf(nwaps.ksat
)dne
 eulaV = KFAitnA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"KFA itnA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
dne        
)dne            
)"tnioPnwapSteS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
)(noitcnuf(llacp            
neht eulaV fi        
eulaV = etatSteStsal        
neht etatSteStsal =~ eulaV fi    
eulaV = teS.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
eslaf = etatSteStsal lacol
)} eslaf = tluafeD ,"tnioP nwapS teS otuA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT lacol
)dne
dne    
)dne        
dne            
3VnOnruTotuA.)(vnegteg = etatSverp                
dne                
)"ytilibAetavitcA"(revreSeriF:EmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht 3VnOnruTotuA.)(vnegteg fi                
neht etatSverp =~ 3VnOnruTotuA.)(vnegteg fi            
)(noitcnuf(llacp        
        )1.0(tiaw.ksat        
od eurt elihw    
    eslaf = etatSverp lacol    
)(noitcnuf(nwaps.ksat
)dne
eulaV = 3VnOnruTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"3V ecaR nO nruT otuA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
dne        
dne            
dne                
)emag ,eslaf ,"Y" ,eslaf(tnevEyeKdneS:eb                    
)1.0(tiaw.ksat                    
)emag ,eslaf ,"Y" ,eurt(tnevEyeKdneS:eb                    
)"reganaMtupnIlautriV"(ecivreSteG:emag = eb lacol                    
neht eulaV.demrofsnarTecaR.retcarahc ton                   
dna 1 => eulaV.ygrenEecaR.retcarahc                   
dna )"ygrenEecaR"(dlihCtsriFdniF:retcarahc dna retcarahc fi                
retcarahC.reyalPlacoL.sreyalP.emag = retcarahc lacol                
emiTtnerruc = emiTkcehCtsal                
neht 5.0 => emiTkcehCtsal - emiTtnerruc fi            
)(kcit = emiTtnerruc lacol            
neht 4VnOnruTotuA.)(vnegteg fi        
)1.0(tiaw.ksat        
od eurt elihw    
0 = emiTkcehCtsal lacol    
)(noitcnuf(nwaps.ksat
)dne
eulaV = 4VnOnruTotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"4V ecaR nO nruT otuA" = eltiT { ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
dne        
dne            
eurt = ikaHesUnac                
)emiTecnuobed(tiaw                
)dne                
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
)(noitcnuf(llacp                
}                
"osuB" = ]1[                    
{ = sgra lacol                
eslaf = ikaHesUnac                
neht ikaHesUnac dna )"osuBsaH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag ton fi            
neht IKAHOTUA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
2 = emiTecnuobed lacol    
eurt = ikaHesUnac lacol    
)(noitcnuf(nwaps
)dne
eulaV = IKAHOTUA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"osuB nO nruT otuA" = eltiT{ ,"elggoT"(elggoTddA:sgnitteS = elggoT
)dne
dne    
)dne        
dne            
dnuoFnopaew = nopaeWtceleS.)(vnegteg                
neht dnuoFnopaew fi            
dne            
dne                
kaerb                    
emaN.v = dnuoFnopaew                    
neht nopaeWtceleS.)(vnegteg == piTlooT.v fi                
od ))(nerdlihCteG:kcapkcaB.reyalPlacoL.sreyalP.emag(sriap ni v ,_ rof            
lin = dnuoFnopaew lacol            
nopaeWtceleS.)(vnegteg = nopaeWtsal            
dne            
nruter                
neht nopaeWtsal == nopaeWtceleS.)(vnegteg fi            
)(noitcnuf(llacp        
od )5.0(tiaw.ksat elihw    
lin = nopaeWtsal lacol    
)(noitcnuf(nwaps.ksat
)dne
eulav = nopaeWtceleS.)(vnegteg    
)eulav(noitcnuf(degnahCnO:nwodporD
)"eeleM"(eulaVteS:nwodporD
)}
,eslaf = itluM    
,}"tiurF xolB","drowS","eeleM"{ = seulaV    
,"nopaeW tceleS" = eltiT    
{ ,"mraFnwodporD"(nwodporDddA:sgnitteS = nwodporD
)} "" = nocI ,"mraF gnitteS" = eltiT {(baTddA:wodniW = sgnitteS
)dne
dne    
dnalsItropeleT.)(vnegteg ton litnu        
dne            
))589311491.0 ,90-e73882562.7 ,669879089.0 ,80-e40534422.1 ,1 ,90-e19640928.9- ,669879089.0- ,80-e16049193.1 ,589311491.0 ,192249.083 ,5612248.21 ,5881.10161-(wen.emarFC(sopot                
neht "tsoptuO ikiT" == dnalsItceleS.)(vnegteg fiesle            
))526098269.55541- ,83958552786011.941 ,5739533491424.4101-(wen.emarFC(sopot                
neht "dnalsI ydnaC" == dnalsItceleS.)(vnegteg fiesle            
))57348464.91321- ,87529320215455.37 ,65622282467249.78(wen.emarFC(sopot                
neht "dnalsI aocoC" == dnalsItceleS.)(vnegteg fiesle            
))5739064798.66611- ,792925290625723.91 ,5734372087477.4881-(wen.emarFC(sopot                
neht "dnalsI ekaC" == dnalsItceleS.)(vnegteg fiesle            
))573953865.23201- ,419112298374.05 ,8395855747.2602-(wen.emarFC(sopot                
neht "dnalsI tunaeP" == dnalsItceleS.)(vnegteg fiesle            
))51901- ,66 ,478-(wen.emarFC(sopot                
neht "dnalsI maerC ecI" == dnalsItceleS.)(vnegteg fiesle            
))7355 ,241 ,6159-(wen.emarFC(sopot                
neht "eltsaC detnuaH" == dnalsItceleS.)(vnegteg fiesle            
))6747- ,733 ,15521-(wen.emarFC(sopot                
neht "noisnaM" == dnalsItceleS.)(vnegteg fiesle            
))52656222.9757- ,90647937028.135 ,313023825.47231-(wen.emarFC(sopot                
neht "eltruT gnitaolF" == dnalsItceleS.)(vnegteg fiesle            
))092 ,2601 ,3345(wen.emarFC(sopot                
neht "dnalsI ardyH" == dnalsItceleS.)(vnegteg fiesle            
))5545 ,11 ,59-(wen.emarFC(sopot                
neht "nwoT troP" == dnalsItceleS.)(vnegteg fiesle            
))5213075.35253- ,5786408.52394 ,82316875556.062-(wen.emarFC(sopot                
neht "ykSiniM" == dnalsItceleS.)(vnegteg fiesle            
))573953344450.1992- ,6562744335515.413 ,52604665554.4705-(wen.emarFC(sopot                
neht "aeS ehT nO eltsaC" == dnalsItceleS.)(vnegteg fiesle            
))5265153589.0917- ,6101402908.2861 ,6046186372.1862(wen.emarFC(sopot                
neht "eerT taerG" == dnalsItceleS.)(vnegteg fiesle            
))57395.84253- ,52604613.62394 ,49585006047.882-(wen.emarFC(sopot                
neht "dnalsI ykS iniM" == dnalsItceleS.)(vnegteg fiesle            
))1870085918.3682 ,2550495889954.8 ,3604618168.6184(wen.emarFC(sopot                
neht "dnalsI possU" == dnalsItceleS.)(vnegteg fiesle            
))578640373.57001- ,36515827698.713 ,3651061467.2303-(wen.emarFC(sopot                
neht "dnalsI nettogroF" == dnalsItceleS.)(vnegteg fiesle            
))8812996611.1476- ,98733178683.492 ,8390126114.8416(wen.emarFC(sopot                
neht "eltsaC ecI" == dnalsItceleS.)(vnegteg fiesle            
))578.58823 ,52609821750.521 ,60935779104.329(wen.emarFC(sopot                
neht "pihS desruC" == dnalsItceleS.)(vnegteg fiesle            
))5218231682.0405- ,204991267159.51 ,578692456.7216-(wen.emarFC(sopot                
neht "drazaH knuP" == dnalsItceleS.)(vnegteg fiesle            
))8390647416.4725- ,31307595532.804 ,87003388241.357(wen.emarFC(sopot                
neht "niatnuoM wonS owT" == dnalsItceleS.)(vnegteg fiesle            
))49064225587.187- ,88129440691.294 ,521302330.2265-(wen.emarFC(sopot                
neht "dnalsI eibmoZ" == dnalsItceleS.)(vnegteg fiesle            
))1466081013.9631 ,3977326597.912 ,4325634226.3051-(wen.emarFC(sopot                
neht "miussoloC" == dnalsItceleS.)(vnegteg fiesle            
))71628694045.724- ,84646217161.112 ,85246389621.424(wen.emarFC(sopot                
neht "yrotcaF" == dnalsItceleS.)(vnegteg fiesle            
))4432516036.0123- ,558156501610.37 ,9692920035.8442-(wen.emarFC(sopot                
neht "enoZ neerG" == dnalsItceleS.)(vnegteg fiesle            
))88697143527.578 ,445026730251.51 ,5260414.4822(wen.emarFC(sopot                
neht "mooR ognimalF" == dnalsItceleS.)(vnegteg fiesle            
))43204780723.595 ,7595063830.233 ,82316307337.384-(wen.emarFC(sopot                
neht "noisnaM ognimalF" == dnalsItceleS.)(vnegteg fiesle            
))5739585.8943- ,922954461256.22 ,5734372030.0873(wen.emarFC(sopot                
neht "aerA kraD" == dnalsItceleS.)(vnegteg fiesle            
))5739064225.1772 ,834893337672.92 ,426627554113.11-(wen.emarFC(sopot                
neht "topS tsirF" == dnalsItceleS.)(vnegteg fiesle            
))82884005528.552 ,428913093022.77 ,54465872974.083-(wen.emarFC(sopot                
neht "efaC ehT" == dnalsItceleS.)(vnegteg fiesle            
))86299.4535 ,86742293.7 ,86002.0582-(wen.emarFC(sopot                
neht "dnalsI boM" == dnalsItceleS.)(vnegteg fiesle            
))8747453.82- ,1628878.92 ,35561.2441-(wen.emarFC(sopot                
neht "mooR knahS" == dnalsItceleS.)(vnegteg fiesle            
))3187008544.5014 ,126166563105.95 ,8869714821.7215(wen.emarFC(sopot                
neht "ytiC niatnuoF" == dnalsItceleS.)(vnegteg fiesle            
))5786971487.9181 ,5786976.11 ,5265158.36116(wen.3rotceV ,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht "dnalsI retaW rednU" == dnalsItceleS.)(vnegteg fiesle            
))57869.4058 ,699020439388.21 ,8395803617.7425-(wen.emarFC(sopot                
neht "egalliV amgaM" == dnalsItceleS.)(vnegteg fiesle            
))65627912058.437 ,9695038189156.5 ,521870033.5784(wen.emarFC(sopot                
neht "nosirP" == dnalsItceleS.)(vnegteg fiesle            
))74037891192.083- ,5265106141.7455 ,3187576716.4987-(wen.3rotceV ,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht "3 dnalsI ykS" == dnalsItceleS.)(vnegteg fiesle            
))88655.7661- ,84245.278 ,57228.7064-(wen.3rotceV ,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
  neht "2 dnalsI ykS" == dnalsItceleS.)(vnegteg fiesle            
))3604660810.7662- ,19352015064.337 ,5260935201.9684-(wen.emarFC(sopot                
neht "1 dnalsI ykS" == dnalsItceleS.)(vnegteg fiesle            
))9697612277.2972- ,3900278701882.7 ,1823163026.7241-(wen.emarFC(sopot                
neht "muessoloC" == dnalsItceleS.)(vnegteg fiesle            
))3130238720.1824 ,275168626369.05 ,5260982128.4194-(wen.emarFC(sopot                
neht "droFeniraM" == dnalsItceleS.)(vnegteg fiesle            
))9645060737.9131- ,37203060866.401 ,3596267608.7431(wen.emarFC(sopot                
neht "dnalsI wonS" == dnalsItceleS.)(vnegteg fiesle            
))8869292003.3734 ,887232927919.02 ,22949798751.449(wen.emarFC(sopot                
neht "treseD" == dnalsItceleS.)(vnegteg fiesle            
))9692456545.3083 ,5659295094157.4 ,9171623903.1811-(wen.emarFC(sopot                
neht "egalliV etariP" == dnalsItceleS.)(vnegteg fiesle            
))45722334821.941 ,828892180258.63 ,2763677597.2161-(wen.emarFC(sopot                
neht "elgnuJ" == dnalsItceleS.)(vnegteg fiesle            
))4901730832.2851 ,96236152490.51 ,88645018033.096-(wen.emarFC(sopot                
neht "nwoT elddiM" == dnalsItceleS.)(vnegteg fiesle            
))6515301652.5402 ,1239760866558.6 ,5786924.6652-(wen.emarFC(sopot                
neht "eniraM" == dnalsItceleS.)(vnegteg fiesle            
))4958036640.9241 ,295600316615.61 ,13591059897.979(wen.emarFC(sopot                
neht "lliMdniW" == dnalsItceleS.)(vnegteg fi            
)(tiaw.ksat taeper        
neht eurt == dnalsItropeleT.)(vnegteg fi    
eulaV = dnalsItropeleT.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"dnalsI tropeleT" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
    dne
)dne    
eulaV = dnalsItceleS.)(vnegteg        
)eulaV(noitcnuf(degnahCnO:nwodporD    
)"51.0"(eulaVteS:nwodporD    
)}    
,eslaf = tluafeD        
,eslaf = itluM        
,}        
"tsoptuO ikiT" ,"dnalsI ydnaC" ,"dnalsI aocoC" ,"dnalsI ekaC" ,"dnalsI tunaeP"            
 ,"dnalsI maerC ecI" ,"eltsaC detnuaH" ,"eltruT gnitaolF" ,"dnalsI ardyH"            
 ,"ykSiniM" ,"aeS ehT nO eltsaC" ,"eerT taerG" ,"nwoT troP" ,"noisnaM"            
{ = seulaV        
,"dnalsI tceleS" = eltiT        
{ ,"nwodporD"(nwodporDddA:aGL = nwodporD    
neht 3dlroW fi
dne
)dne    
eulaV = dnalsItceleS.)(vnegteg        
)eulaV(noitcnuf(degnahCnO:nwodporD    
)"51.0"(eulaVteS:nwodporD    
)}    
,eslaf = tluafeD        
,eslaf = itluM        
,}        
"dnalsI ykS iniM" ,"dnalsI possU"            
 ,"dnalsI nettogroF" ,"eltsaC ecI" ,"pihS desruC" ,"drazaH knuP"            
 ,"niatnuoM wonS owT" ,"dnalsI eibmoZ" ,"miussoloC" ,"yrotcaF" ,"enoZ neerG"            
 ,"mooR ognimalF" ,"noisnaM ognimalF" ,"aerA kraD" ,"topS tsirF" ,"efaC ehT"            
{ = seulaV        
,"dnalsI tceleS" = eltiT        
{ ,"nwodporD"(nwodporDddA:aGL = nwodporD    
neht 2dlroW fi
dne
)dne    
eulaV = dnalsItceleS.)(vnegteg        
)eulaV(noitcnuf(degnahCnO:nwodporD    
)"51.0"(eulaVteS:nwodporD    
)}    
,eslaf = tluafeD        
,eslaf = itluM        
,}        
"dnalsI boM" ,"mooR knahS" ,"ytiC niatnuoF" ,"dnalsI retaW rednU"            
 ,"egalliV amgaM" ,"nosirP" ,"3 dnalsI ykS" ,"2 dnalsI ykS"            
 ,"1 dnalsI ykS" ,"muessoloC" ,"droFeniraM" ,"dnalsI wonS" ,"treseD"            
 ,"egalliV etariP" ,"elgnuJ" ,"nwoT elddiM" ,"eniraM" ,"lliMdniW"            
{ = seulaV        
,"dnalsI tceleS" = eltiT        
{ ,"nwodporD"(nwodporDddA:aGL = nwodporD    
neht 1dlroW fi
)}
dne    
dne        
)dne            
dne                
)v(looTpiuqE:dionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
kcapkcaB.reyalPlacoL.sreyalP.emag = tneraP.v                    
neht retcarahC.reyalPlacoL.sreyalP.emag == tneraP.traPrehto fi                
)traPrehto(noitcnuf(tcennoC:dehcuoT.eldnaH.v            
dne            
dne                
)(yalP:noitaminAeldi                    
neht noitaminAeldi fi                
)"eldI"(dlihCtsriFdniF:rellortnoCnoitaminAtiurf = noitaminAeldi lacol                
neht rellortnoCnoitaminAtiurf fi            
)"rellortnoCnoitaminA"(dlihCtsriFdniF:tiurF.v = rellortnoCnoitaminAtiurf lacol            
            )))05 ,05-(modnar.htam ,001 ,)05 ,05-(modnar.htam(wen.3rotceV + noitisoP.traPyramirP.retcarahC.reyalPlacoL.sreyalP.emag(oTevoM:v            
paM.ecapskroW.emag = tneraP.v            
1 + tnuoc = tnuoc            
dne kaerb neht stiurFxam => tnuoc fi            
od )stcejbOtiurf(sriap ni v ,i rof        
0 = tnuoc lacol        
01 = stiurFxam lacol        
)(nerdlihCteG:]1[)"10286395741//:ditessaxbr"(stcejbOteG:emag = stcejbOtiurf lacol        
)(noitcnuf = kcabllaC    
,"tiurF niaR" = eltiT    
{(nottuBddA:aGL
)dne
dne    
dne        
lin = niojer.)(vnegteg            
)(tcennocsiD:niojer.)(vnegteg            
neht niojer.)(vnegteg fi        
esle    
)dne        
dne            
)dIecalP.emag(tropeleT:)"ecivreStropeleT"(ecivreSteG:emag                
neht )"emarFrorrE"(dlihCtsriFdniF:aerAegasseM.dlihc dna )'aerAegasseM'(dlihCtsriFdniF:dlihc dna 'tpmorProrrE' == emaN.dlihc fi            
)dlihc(noitcnuf(tcennoC:deddAdlihC.yalrevOtpmorp.iuGtpmorPxolboR.)"iuGeroC"(ecivreSteG:emag = niojer.)(vnegteg        
neht eulaV fi    
eulaV = kciKniojeRotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"kciK nO niojeR otuA" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
noitacifitoNevomeR.)(vnegteg ton = delbanE.snoitacifitoN.iuGreyalP.reyalPlacoL.sreyalP.emag    
eulaV = noitacifitoNevomeR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"noitacifitoN evomeR" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
txeTevomeR.)(vnegteg ton = delbanE.retnuoCegamaD.IUG.stessA.)"egarotSdetacilpeR"(ecivreSteG:emag    
eulaV = txeTevomeR.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"txeT emaD evomeR" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
dne    
dne        
)dne            
dne                
dne                    
1 = ycnerapsnarT.v                        
neht "laceD" == emaNssalC.v fi                    
od ))(stnadnecseDteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                
dne                
dne                    
1 = ycnerapsnarT.eldnaH.v                        
neht "yrosseccA" == emaNssalC.v fi                    
od ))(stnadnecseDteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                
dne                
dne                    
1 = ycnerapsnarT.v                        
neht "daeH" == emaN.v fi                    
od ))(stnadnecseDteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                
dne                
dne                    
1 = ycnerapsnarT.v                        
neht "traPhseM" == emaNssalC.v fi                    
od ))(stnadnecseDteG:seimenE.)"ecapskroW"(ecivreSteG:emag(sriap ni v ,i rof                
)(noitcnuf(llacp            
neht boMediH.)(vnegteg fi        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
)dne
		eulaV = boMediH.)(vnegteg     
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"boM ediH" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
dne    
)eurt(delbanEgniredneRd3teS:)"ecivreSnuR"(ecivreSteG:emag        
neht eslaf == neercSetihW.)(vnegteg fiesle    
)eslaf(delbanEgniredneRd3teS:)"ecivreSnuR"(ecivreSteG:emag        
neht eurt == neercSetihW.)(vnegteg fi    
eulaV = neercSetihW.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"neercS etihW" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
dne    
dne        
dne            
)005 ,005 ,0 ,1(wen.2miDU = eziS.neercskcalB.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                
esle            
)005 ,005 ,0 ,005(wen.2miDU = eziS.neercskcalB.niaM.iuGreyalP.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                
neht neercSkcalBtratS.)(vnegteg fi            
)(kcit = emiTetadpUtsal            
neht nwodlooCetadpu => emiTetadpUtsal - )(kcit fi        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
5.0 = nwodlooCetadpu lacol
0 = emiTetadpUtsal lacol
)dne
eulaV = neercSkcalBtratS.)(vnegteg	
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"neercS kcalB" = eltiT{ ,"elggoT"(elggoTddA:aGL = elggoT
)dne
dne    
dne        
)eurt ,"renwapSecnirPekaC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
)(kcit = emiTnwapStsal            
neht nwodlooCnwaps => emiTnwapStsal - )(kcit dna PCnwapSotuA.)(vnegteg fi        
od )(tiaw.ksat elihw    
 )(noitcnuf(nwaps
1 = nwodlooCnwaps lacol
0 = emiTnwapStsal lacol
)dne
eulaV = PCnwapSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eurt = tluafeD ,"ecnirP ekaC nommus yllacitamotua lliw uoy ,sretsnom 005 kcatta uoy nehW" = noitpircseD ,"ecnirP ekaC nommuS otuA" = eltiT { ,"elggoT"(elggoTddA:aGL = elggoT
)}
dne    
eurt = maeTegnahCnac        
)dne        
)"seniraM" ,"maeTteS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
)(noitcnuf(llacp        
)emiTecnuobed(tiaw.ksat        
eslaf = maeTegnahCnac        
dne        
nruter            
neht maeTegnahCnac ton fi        
)(noitcnuf = kcabllaC    
,"seniraM oT maeT egnahC" = eltiT    
{(nottuBddA:aGL
2 = emiTecnuobed lacol
eurt = maeTegnahCnac lacol
)}
dne    
eurt = maeTegnahCnac        
)dne        
)"setariP" ,"maeTteS"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
)(noitcnuf(llacp        
)emiTecnuobed(tiaw.ksat        
eslaf = maeTegnahCnac        
dne        
nruter            
neht maeTegnahCnac ton fi        
)(noitcnuf = kcabllaC    
,"setariP oT maeT egnahC" = eltiT    
{(nottuBddA:aGL
2 = emiTecnuobed lacol
eurt = maeTegnahCnac lacol
)dne
eulaV = statSotuA.)(vnegteg    
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"statS otuA" = eltiT { ,"elggoT"(elggoTddA:aGL = elggoT
)}
dne    
eulav = statStnioP        
)eulav(noitcnuf = kcabllaC        
,0 = gnidnuoR        
,0001 = xaM        
,1 = niM        
,1 = tluafeD        
,"" = noitpircseD        
,"statS tnioP" = eltiT        
{ ,"redilS"(redilSddA:aGL = redilS
)dne
dne    
dne        
dne            
dne                
)statStnioP ,tatSdetceles ,"tnioPddA"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                    
neht tatSdetceles fi                
]edoMstatS[sepyTtats = tatSdetceles lacol                
                }                
"tiurF nomeD" = tiurF                    
,"nuG" = nuG                    
,"drowS" = drowS                    
,"esnefeD" = esnefeD                    
,"eeleM" = eeleM                    
{ = sepyTtats lacol                
neht statSotuA.)(vnegteg dna statStnioP => eulaV.stnioP.ataD.reyalp fi            
neht )"stnioP"(dlihCtsriFdniF:ataD.reyalp dna )"ataD"(dlihCtsriFdniF:reyalp dna reyalp fi        
reyalPlacoL.sreyalP.emag = reyalp lacol        
)5.0(tiaw        
od eurt elihw    
)(noitcnuf(nwaps
)dne
eulaV = edoMstatS
)eulaV(noitcnuf(degnahCnO:nwodporD
)""(eulaVteS:nwodporD
)}
,eslaf = itluM    
,}"tiurF" ,"nuG" ,"drowS" ,"esnefeD" ,"eeleM"{ = seulaV    
,"statS tceleS" = eltiT    
{ ,"nwodporD"(nwodporDddA:aGL = nwodporD
dne
dne    
dne        
eslaf = delbanE.e            
neht )"tceffEdleiFfOhtpeD"(AsI:e ro )"tceffEmoolB"(AsI:e ro )"tceffEnoitcerroCroloC"(AsI:e ro )"tceffEsyaRnuS"(AsI:e ro )"tceffErulB"(AsI:e fi        
od ))(nerdlihCteG:l(sriap ni e ,i rof    
dne    
dne        
)v(traPezimitpo            
neht )"traPhseM"(AsI:v ro )"traPssurT"(AsI:v ro )"traPegdeWrenroC"(AsI:v ro )"noinU"(AsI:v ro )"traP"(AsI:v fi        
od ))(stnadnecseDteG:w(sriap ni v ,i rof    
    dne    
dne        
75982785720958301 = DIerutxeT.v            
0 = ecnatcelfeR.v            
"citsalP" = lairetaM.v            
neht )"traPhseM"(AsI:v fiesle        
eslaf = delbanE.v            
neht )"selkrapS"(AsI:v ro )"ekomS"(AsI:v ro )"thgiLtopS"(AsI:v ro )"eriF"(AsI:v fiesle        
1 = suidaRtsalB.v            
1 = erusserPtsalB.v            
neht )"noisolpxE"(AsI:v fiesle        
)0(wen.egnaRrebmuN = emitefiL.v            
neht )"liarT"(AsI:v ro )"rettimEelcitraP"(AsI:v fiesle        
1 = ycnerapsnarT.v            
neht deteeyslaced dna )"erutxeT"(AsI:v ro )"laceD"(AsI:v fiesle        
0 = ecnatcelfeR.v            
"citsalP" = lairetaM.v            
neht )"traPssurT"(AsI:v ro )"traPegdeWrenroC"(AsI:v ro )"noinU"(AsI:v ro )"traP"(AsI:v fi        
)v(traPezimitpo noitcnuf lacol    
    "10leveL" = leveLytilauQ.gniredneR.)(sgnittes    
0 = ssenthgirB.l    
9e9 = dnEgoF.l    
eslaf = swodahSlabolG.l    
0 = ycnerapsnarTretaW.t    
0 = ecnatcelfeRretaW.t    
0 = deepSevaWretaW.t    
0 = eziSevaWretaW.t    
)eslaf ,"noitaroceD" ,t(ytreporpneddihtes    
)2 ,"ygolonhceT" ,l(ytreporpneddihtes    
    niarreT.w = t lacol    
gnithgiL.g = l lacol    
ecapskroW.g = w lacol    
emag = g lacol    
eurt = deteeyslaced lacol    
)(retsooBSPF noitcnuf
)}
dne    
)(retsooBSPF        
)(noitcnuf = kcabllaC    
,"SPF tsooB" = eltiT    
{(nottuBddA:aGL
)}
dne    
dne        
dne            
eurt = elbisiV.iuGsroloc                
neht iuGsroloc fi            
)"sroloC"(dlihCtsriFdniF:niaM.iuGreyalP.reyalPlacoL.sreyalP.emag = iuGsroloc lacol            
)(kcit = emiTsserPnottuBtsal            
neht nwodlooCnottub => emiTsserPnottuBtsal - )(kcit fi        
)(noitcnuf = kcabllaC    
,"roloC nepO" = eltiT    
{(nottuBddA:aGL
2 = nwodlooCnottub lacol
0 = emiTsserPnottuBtsal lacol
)}
dne    
dne        
eurt = elbisiV.seltiT.niaM.iuGreyalP.reyalPlacoL.sreyalP.emag            
neht sseccus fi        
)dne        
))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
}"seltiTteg"{ = sgra lacol        
)(noitcnuf = kcabllaC    
,"eltiT nepO" = eltiT    
{(nottuBddA:aGL
)}
dne    
            )(noitcnuf = kcabllaC    
,"....gnixiF llitS m'I" = noitpircseD    
,"pohS tiurF liveD nepO" = eltiT    
{(nottuBddA:aGL
)}
dne    
     )(noitcnuf = kcabllaC    
,"....gnixiF llitS m'I" = noitpircseD    
,"] egariM [ pohS tiurF liveD nepO" = eltiT    
{(nottuBddA:aGL
)}
dne	
	)(noitcnuf = kcabllaC	
,"....gnixiF llitS m'I" = noitpircseD	
,"metI wohS" = eltiT	
{(nottuBddA:aGL
)}
dne    
)(neewTpotS        
)(noitcnuf = kcabllaC    
,"neewT potS" = eltiT    
{(nottuBddA:aGL
)} "" = nocI ,"reyalP lacoL baT" = eltiT {(baTddA:wodniW = aGL
dne
)(tropeleT    
dne    
dne        
)2(tiaw            
)dne            
dne                
)(renruteRPT                    
neht "" =~ gnihtynAdnuof fi                
)(renruteRPT                
)(noitcnuf(llacp            
od eurt elihw        
 )(tropeleT noitcnuf    
dne    
dne        
dne            
dne                
kaerb                    
)1(tiaw                    
)dne                    
)reyalPlacoL.sreyalP.emag ,DI ,DIecalP(ecnatsnIecalPoTtropeleT:)"ecivreStropeleT"(ecivreSteG:emag                        
)(noitcnuf(llacp                    
)1.0(tiaw                    
)DI ,sDIllA(tresni.elbat                    
neht eurt == elbissoP fi                
dne                
1 + mun = mun                    
dne                    
dne                        
)dne                            
)ruoHlautca ,sDIllA(tresni.elbat                                
}{ = sDIllA                                
)(noitcnuf(llacp = eliFled lacol                            
neht )gnitsixE(rebmunot =~ )ruoHlautca(rebmunot fi                        
esle                    
dne                        
eslaf = elbissoP                            
neht )gnitsixE(gnirtsot == DI fi                        
neht 0 =~ mun fi                    
od )sDIllA(sriap ni gnitsixE,_ rof                
neht )gniyalp.v(rebmunot > )sreyalPxam.v(rebmunot fi            
            )di.v(gnirtsot = DI            
eurt = elbissoP lacol            
od )atad.etiS(sriap ni v,i rof        
0 = mun lacol        
        dne        
rosruCegaPtxen.etiS = gnihtynAdnuof            
neht lin =~ rosruCegaPtxen.etiS dna "llun" =~ rosruCegaPtxen.etiS dna rosruCegaPtxen.etiS fi        
"" = DI lacol        
        dne        
))gnihtynAdnuof .. '=rosruc&001=timil&csA=redrOtros?cilbuP/srevres/' .. DIecalP .. '/semag/1v/moc.xolbor.semag//:sptth'(teGpttH:emag(edoceDNOSJ:ecivreSpttH.emag = etiS            
esle        
))'001=timil&csA=redrOtros?cilbuP/srevres/' .. DIecalP .. '/semag/1v/moc.xolbor.semag//:sptth'(teGpttH:emag(edoceDNOSJ:ecivreSpttH.emag = etiS            
neht "" == gnihtynAdnuof fi        
;etiS lacol        
)(renruteRPT noitcnuf    
eslaf = deteleD lacol    
ruoh.)"t*!"(etad.so = ruoHlautca lacol    
"" = gnihtynAdnuof lacol    
}{ = sDIllA lacol    
dIecalP.emag = DIecalP lacol    
)(poH noitcnuf
)}
dne      
)(poH          
)(noitcnuf = kcabllaC  	
,"revreS poH" = eltiT  	
{(nottuBddA:revreS
)}
dne    
dne        
        )reyalPlacoL.)"sreyalP"(ecivreSteG:emag ,dIecalP.emag(tropeleT:)"ecivreStropeleT"(ecivreSteG:emag            
)(kcit = emiTtropeleTtsal            
neht nwodlooCtropelet => emiTtropeleTtsal - )(kcit fi        
)(noitcnuf = kcabllaC    
,"revreS niojeR" = eltiT    
{(nottuBddA:revreS
3 = nwodlooCtropelet lacol
0 = emiTtropeleTtsal lacol
)}
dne    
dne        
)"!tnemom a ni niaga yrt esaelP"(tnirp            
esle        
)"!deipoC dIboJ"(tnirp            
))dIboJ.emag(gnirtsot(draobpilctes            
)(kcit = emiTypoCtsal            
neht nwodlooCypoc => emiTypoCtsal - )(kcit fi        
)(noitcnuf = kcabllaC    
,"dIboJ ypoC" = eltiT    
{(nottuBddA:revreS
2 = nwodlooCypoc lacol
0 = emiTypoCtsal lacol
)}
dne    
dne        
        )reyalPlacoL.sreyalP.emag ,boJ.)(vnegteg ,dIecalp.emag(ecnatsnIecalPoTtropeleT:)"ecivreStropeleT"(ecivreSteG:emag            
)(kcit = emiTtropeleTtsal            
neht nwodlooCtropelet => emiTtropeleTtsal - )(kcit fi        
)(noitcnuf = kcabllaC    
,"revreS nioJ" = eltiT    
{(nottuBddA:revreS
5 = nwodlooCtropelet lacol
0 = emiTtropeleTtsal lacol
)dne
dne    
dne        
)reyalPlacoL.sreyalP.emag ,boJ.)(vnegteg ,dIecalp.emag(ecnatsnIecalPoTtropeleT:)"ecivreStropeleT"(ecivreSteG:emag            
)(kcit = emiTtropeleTtsal            
neht nwodlooCtropelet => emiTtropeleTtsal - )(kcit dna nioJ.)(vnegteg fi        
od )(tiaw.ksat elihw    
    1 = nwodlooCtropelet lacol    
0 = emiTtropeleTtsal lacol    
)(noitcnuf(nwaps
)dne
eulaV = nioJ.)(vnegteg
)eulaV(noitcnuf(degnahCnO:elggoT
)} eslaf = tluafeD ,"nioJ mapS" = eltiT{ ,"elggoT"(elggoTddA:revreS = elggoT
    )}
dne     
eulaV = boJ.)(vnegteg         
)eulaV(noitcnuf = kcabllaC     
,eslaf = dehsiniF     
,eslaf = ciremuN     
,"dI boJ etsaP" = redlohecalP     
,"" = tluafeD     
,"dI boJ tupnI" = eltiT     
{ ,"tupnI"(tupnIddA:revreS = tupnI
        	)dne
dne    
)"senoB " .. ))"kcehC" ,"senoB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag(gnirtsot .. " :evaH uoY"(cseDteS:enoBsutatS        
od )1(tiaw elihw    
)(noitcnuf(nwaps
)}
"" = tnetnoC    
,"enoB" = eltiT    
{(hpargaraPddA:revreS = enoBsutatS
)dne
dne    
)sutatSdrows(cseDteS:drowSyradnegeL        
dne        
"iddaS" = sutatSdrows            
neht )"3" ,"relaeDdrowSyradnegeL"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag fiesle        
"odnaW" = sutatSdrows            
neht )"2" ,"relaeDdrowSyradnegeL"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag fiesle        
"iusihS" = sutatSdrows            
neht )"1" ,"relaeDdrowSyradnegeL"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag fi        
"sdrowS dnegeL dnuoF toN" = sutatSdrows lacol        
od )1(tiaw elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"drowS yradnegeL" = eltiT    
{(hpargaraPddA:revreS = drowSyradnegeL
)dne
dne    
)sutatSnoom(cseDteS:MF        
dne        
"5/1 :nooM" = sutatSnoom            
neht "0869419079=di?/tessa/moc.xolbor.www//:ptth" == dIerutxeTnoom fiesle        
"5/2 :nooM" = sutatSnoom            
neht "1040519079=di?/tessa/moc.xolbor.www//:ptth" == dIerutxeTnoom fiesle        
"5/3 :nooM" = sutatSnoom            
neht "3373419079=di?/tessa/moc.xolbor.www//:ptth" == dIerutxeTnoom fiesle        
"5/4 :nooM" = sutatSnoom            
neht "2509419079=di?/tessa/moc.xolbor.www//:ptth" == dIerutxeTnoom fiesle        
"5/5 :nooM" = sutatSnoom            
neht "1349419079=di?/tessa/moc.xolbor.www//:ptth" == dIerutxeTnoom fi        
"5/0 :nooM" = sutatSnoom lacol        
dIerutxeTnooM.ykS.)"gnithgiL"(ecivreSteG:emag = dIerutxeTnoom lacol        
od )1(tiaw.ksat elihw    
)(noitcnuf(nwaps.ksat
)}
"" = tnetnoC    
,"nooM lluF" = eltiT    
{(hpargaraPddA:revreS = MF
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)ssergorp .. " :delliK | " .. sutatStnerruc .. " :sutatS"(cseDteS:retnuHetilE            
neht sutatSsuoiverp =~ sutatStnerruc fi        
)"ssergorP","retnuHetilE"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = ssergorp lacol        
'️❌' ro '️✅' dna ))"nabrU"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"erdnaeD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"olbaiD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"nabrU"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag ro )"erdnaeD"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag ro )"olbaiD"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag( = sutatStnerruc lacol        
od )1(tiaw elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"retnuH etilE" = eltiT    
{(hpargaraPddA:revreS = retnuHetilE
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)sutatStnerruc .. " :sutatS"(cseDteS:gniKhguoDkcehC            
neht sutatSsuoiverp =~ sutatStnerruc fi        
'️❌' ro '️✅' dna )"gniK hguoD"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"gniK hguoD"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = sutatStnerruc lacol        
od )1(tiaw elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"gniK hguoD" = eltiT    
{(hpargaraPddA:revreS = gniKhguoDkcehC
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)sutatStnerruc .. " :sutatS"(cseDteS:piRkcehC            
neht sutatSsuoiverp =~ sutatStnerruc fi        
'️❌' ro '️✅' dna )"ardni_pir"(dlihCtsriFdniF:seimenE.)"ecapskroW"(ecivreSteG:emag ro )"mroF eurT ardni_pir"(dlihCtsriFdniF:)"egarotSdetacilpeR"(ecivreSteG:emag = sutatStnerruc lacol        
od )1(tiaw elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"ardnI_piR" = eltiT    
{(hpargaraPddA:revreS = piRkcehC
)dne
dne    
)sutatSllik(cseDteS:ecnirPekaCboM        
dne        
tnuoCllik .. " :lliK" = sutatSllik            
)14 ,93 ,ecnirPekac(bus.gnirts = tnuoCllik lacol            
neht 68 => )ecnirPekac(nel.gnirts fi        
"️✅ :ecnirP ekaC" = sutatSllik lacol        
)"renwapSecnirPekaC"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag = ecnirPekac lacol        
od )1(tiaw elihw    
)(noitcnuf(nwaps
)}
"" = tnetnoC    
,"delliK noisnemiD" = eltiT    
{(hpargaraPddA:revreS = ecnirPekaCboM
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)sutatStnerruc .. ' :sutatS'(cseDteS:dnalsInezorF            
neht sutatSsuoiverp =~ sutatStnerruc fi        
'️❌' ro '️✅' dna )'noisnemiD nezorF'(dlihCtsriFdniF:snoitacoL.nigirOdlroW_.ecapskroW.emag = sutatStnerruc lacol        
od )1(tiaw elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"noisnemiD nezorF" = eltiT    
{(hpargaraPddA:revreS = dnalsInezorF
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)sutatStnerruc .. " :sutatS"(cseDteS:kcehccirotsiherPC            
neht sutatSsuoiverp =~ sutatStnerruc fi        
'️❌' ro '️✅' dna )"dnalsI cirotsiherP"(dlihCtsriFdniF:snoitacoL.nigirOdlroW_.ecapskroW.emag = sutatStnerruc lacol        
od )1(tiaw.ksat elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps.ksat
)}
" :sutatS" = cseD    
,"dnalsI cirotsiherP" = eltiT    
{(hpargaraPddA:revreS = kcehccirotsiherPC
)dne
dne    
dne        
sutatStnerruc = sutatSsuoiverp            
)sutatStnerruc .. ' :sutatS'(cseDteS:kcehcenustiK            
neht sutatSsuoiverp =~ sutatStnerruc fi        
'️❌' ro '️✅' dna )"dnalsIenustiK"(dlihCtsriFdniF:paM.)"ecapskroW"(ecivreSteG:emag = sutatStnerruc lacol        
od )1(tiaw.ksat elihw    
"" = sutatSsuoiverp lacol    
)(noitcnuf(nwaps
)}
" :sutatS" = tnetnoC    
,"dnalsI enustiK" = eltiT    
{(hpargaraPddA:revreS = kcehcenustiK
)dne
)dne    
dne        
dne            
sutatStnerruc = sutatSsuoiverp                
)sutatStnerruc .. ' :sutatS'(cseDteS:kcehcegariM                
neht sutatSsuoiverp =~ sutatStnerruc fi            
'️❌' ro '️✅' dna stsixEdnalsIegarim = sutatStnerruc lacol            
lin =~ )'dnalsI egariM'(dlihCtsriFdniF:snoitacoL.nigirOdlroW_.ecapskroW.emag = stsixEdnalsIegarim lacol            
            )1(tiaw            
od eurt elihw        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
"" = sutatSsuoiverp lacol
)}
" :sutatS" = tnetnoC    
,"dnalsI egariM" = eltiT    
{(hpargaraPddA:revreS = kcehcegariM
)dne
dne    
)1(tiaw        
)(emiTetadpU        
od eurt elihw    
)(noitcnuf(nwaps
dne
)" )s( dnoceS "..dnoceS.." )m( etuniM "..etuniM.." )h( ruoH "..ruoH(cseDteS:ssssemmiT    
06 % ))0^06( / emiTemaG(roolf.htam = dnoceS lacol    
06 % ))1^06( / emiTemaG(roolf.htam = etuniM lacol    
42 % ))2^06( / emiTemaG(roolf.htam = ruoH lacol    
)5.0 + emiTemaGdetubirtsiD.ecapskrow(roolf.htam = emiTemaG lacol    
)(emiTetadpU noitcnuf
)}
"" = tnetnoC    
,"emiT" = eltiT    
{(hpargaraPddA:revreS = ssssemmiT
)dne
dne    
)1(tiaw        
)(SOetadpU        
od eurt elihw    
)(noitcnuf(nwaps
dne
)"] " .. edoc .. " [ "..enozemit.." - "..emitetad(cseDteS:emiT    
dne    
edoCnoigeRyrtnuoc.)(vnegteg = edoc        
esle    
dne        
"nwonknU" = edoCnoigeRyrtnuoc.)(vnegteg            
esle        
edoc = edoCnoigeRyrtnuoc.)(vnegteg            
neht tluser fi        
)dne        
)reyalp(cnysAreyalProFnoigeRyrtnuoCteG:ecivreSnoitazilacoL nruter            
)(noitcnuf(llacp = edoc ,tluser        
neht edoCnoigeRyrtnuoc.)(vnegteg ton fi    
    edoc ,tluser lacol    
emaN.reyalp = eman lacol    
reyalPlacoL.sreyalP = reyalp lacol    
)"sreyalP"(ecivreSteG:emag = sreyalP lacol    
)"ecivreSnoitazilacoL"(ecivreSteG:emag = ecivreSnoitazilacoL lacol    
    )raey.etad ,htnom.etad ,yad.etad ,"d40%/d20%/d20%"(tamrof.gnirts = emitetad lacol    
)mpma ,ces.etad ,nim.etad ,1 + )21 % )1 - ruoh(( ,"s% i20%:i20%:i20%"(tamrof.gnirts = enozemit lacol    
"MP" ro "MA" dna 21 < ruoh = mpma lacol    
42 % )ruoh.etad( = ruoh lacol    
)"t*"(etad.so = etad lacol    
)(SOetadpU noitcnuf
)}
"" = tnetnoC    
,"enoZ emiT" = eltiT    
{(hpargaraPddA:revreS = emiT
)} "" = nocI ,"revreS dnA sutatS baT" = eltiT {(baTddA:wodniW = revreS
)}
dne    
dne        
eslaf = gniyuBsi            
)5.0(tiaw            
                        ))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
}"yuB" = ]2[ ,"reniarTgrobyC" = ]1[{ = sgra lacol            
eurt = gniyuBsi            
neht gniyuBsi ton fi        
)(noitcnuf = kcabllaC    
,")F0052( ecaR grobyC yuB" = eltiT    
{(nottuBddA:pohS
)}
dne    
))2sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
)5.0(tiaw        
        ))1sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
}4 = ]3[ ,"egnahC" = ]2[ ,"msalpotcE" = ]1[{ = 2sgra lacol        
}4 = ]3[ ,"kcehCyuB" = ]2[ ,"msalpotcE" = ]1[{ = 1sgra lacol        
)(noitcnuf = kcabllaC    
,"ecaR luohG yuB" = eltiT    
{(nottuBddA:pohS
)}
dne     
)"2","lloreR","draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag     	
)"1","lloreR","draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag         
            )(noitcnuf = kcabllaC     
,")F0003( ecaR lloreR yuB" = eltiT     
{(nottuBddA:pohS
)}
dne     
)"2","dnufeR","draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag         
)"1","dnufeR","draweRdraebkcalB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag         
            )(noitcnuf = kcabllaC     
,")F0052( tatS dnufeR yuB" = eltiT     
{(nottuBddA:pohS
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"pohS csiM" = eltiT    
{(hpargaraPddA:pohS
)}
dne	
)"uroS","ikaHyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag		
)(noitcnuf = kcabllaC	
,"] ileB 000,001$ [ uroS" = eltiT	
{(nottuBddA:pohS
)}
dne	
)"yuB","klaTneK"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag        
)(noitcnuf = kcabllaC	
,"] ileB 000,057$ [ ikah noitavresbO" = eltiT	
{(nottuBddA:pohS
)}
dne	
)"osuB","ikaHyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag		
)(noitcnuf = kcabllaC	
,"] ileB 000,52$ [ ikaH osuB" = eltiT	
{(nottuBddA:pohS
)}
dne	
)"oppeG","ikaHyuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag		
)(noitcnuf = kcabllaC	
,"] ileB 000,01$ [ pmujykS" = eltiT	
{(nottuBddA:pohS
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"pohS seitilibA" = eltiT    
{(hpargaraPddA:pohS
)}
dne    
)"trAeniugnaSyuB"(revreSekovnI:_FmmoC        
)2.0(tiaw        
)eurt ,"trAeniugnaSyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"trA eniugnaS" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"namuhdoGyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"namuH doG" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"nolaTnogarDyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"nolaT nogarD" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"walCcirtcelEyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"walC cirtcelE" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC        
)2.0(tiaw        
)eurt ,"etaraKnamkrahSyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"etaraK namkrahS" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"petShtaeDyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"petS htaeD" = eltiT    
{(nottuBddA:pohS
)}
dne    
)"namuhrepuSyuB"(revreSekovnI:_FmmoC        
_FmmoC.setomeR.egarotSdetacilpeR = _FmmoC lacol        
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol        
)(noitcnuf = kcabllaC    
,"namuHrepuS" = eltiT    
{(nottuBddA:pohS
)}
dne    
dne        
nruter            
neht 2sseccus ton fi        
)dne        
)"2" ,"walCnogarD" ,"draweRdraebkcalB"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = 2tluser ,2sseccus lacol        
dne        
nruter            
neht 1sseccus ton fi        
)dne        
)"1" ,"walCnogarD" ,"draweRdraebkcalB"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = 1tluser ,1sseccus lacol        
)(noitcnuf = kcabllaC    
,"htaerB nogarD" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
            neht sseccus ton fi        
)dne        
)"ortcelEyuB"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"ortcelE" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
            neht sseccus ton fi        
)dne        
)"etaraKnamhsiFyuB"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"etaraK namhsiF" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
            neht sseccus ton fi        
)dne        
)"geLkcalByuB"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"geL kcalB" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
)12 ,"-"(per.gnirts = tnetnoC    
,"pohS gnithgiF" = eltiT    
{(hpargaraPddA:pohS
)}
dne    
dne        
neht sseccus ton fi        
)dne        
)"uoZlevarT"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"aeS drihT tropeleT" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
            neht sseccus ton fi        
)dne        
)"asorsserDlevarT"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"dlroW weN tropeleT" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:setomeR = etomeR_FmmoC lacol
)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
neht sseccus ton fi        
)dne        
)"niaMlevarT"(revreSekovnI:etomeR_FmmoC nruter            
)(noitcnuf(llacp = tluser ,sseccus lacol        
)(noitcnuf = kcabllaC    
,"dlroW dlO tropeleT" = eltiT    
{(nottuBddA:pohS
)"_FmmoC"(dlihCroFtiaW:)"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = etomeR_FmmoC lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)}
dne    
dne        
)dne            
)stseuqeRneewteByaled(tiaw                
)v(edoCmeedeR                
)(noitcnuf(nwaps            
od )xes(sriap ni v ,i rof        
5.0 = stseuqeRneewteByaled lacol        
dne        
)eulaV(revreSekovnI:meedeR.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
)eulaV(edoCmeedeR noitcnuf        
)(noitcnuf = kcabllaC    
,"edoC meedeR" = eltiT    
{(nottuBddA:pohS
}
,"STIURF_NRAE"    
,"TIURF4THGIF"    
,"iuaMniatpaC2buS"    
,"OEHedocratS"    
,"suBcigaM"    
,"1PXE_TOBORREMAG2BUS"    
,"eroixA"    
,"gnimaGiatnaT"    
,"eniaMtaHwartS"    
,"ecAtaerGehT"    
,"gnimagttik"    
,"999reF2buS"    
,"orP_si_uynE"    
,"KWCJ"    
,"yxxulB"    
,"321retsaMbooN2buS"    
,"kcorgiaD2buS"    
,"eibooNlaiciffO2buS"    
,"deknarPteG"    
,"dliuBssoB"    
,"seraDdliW"    
{ = xes
)} "" = nocI ,"pohS baT" = eltiT {(baTddA:wodniW = pohS
)}
 lortnoCtfeL.edoCyeK.munE = yeKeziminiM    
,"yffuL" = emehT    
 ,eslaf = cilyrcA    
,)023 ,555(tesffOmorf.2miDU = eziS    
,551 = htdiWbaT    
,"oddiK yb" = eltiTbuS    
,"tiurF xolB-buH uriH" = eltiT    
{(wodniWetaerC:tneulF = wodniW
)())"aul.tneulFyrarbiL/niam/sdaeh/sfer/yrarbiL/kcarCauL/moc.tnetnocresubuhtig.war//:sptth"(teGpttH:emag(gnirtsdaol = tneulF
)"--]]IU dedaoL[[--"(tnirp
dne
dne    
dne        
)dne            
)stegrat ,tegraTniam(revreSeriF:tnevEtih                
)1.0(revreSeriF:tnevEkcatta                
)(noitcnuf(llacp            
)"tiHretsigeR/ER"(dlihCroFtiaW:)"teN"(dlihCroFtiaW:)"seludoM"(dlihCroFtiaW:egarots = tnevEtih lacol            
)"kcattAretsigeR/ER"(dlihCroFtiaW:)"teN"(dlihCroFtiaW:)"seludoM"(dlihCroFtiaW:egarots = tnevEkcatta lacol            
)"egarotSdetacilpeR"(ecivreSteG:emag = egarots lacol            
neht tegraTniam fi        
dne        
dne            
dne                
daeh = tegraTniam                    
)} daeh ,ymene { ,stegrat(tresni.elbat                    
neht daeh fi                
)"daeH"(dlihCtsriFdniF:ymene = daeh lacol                
neht )"taoBsI"(etubirttAteG:ymene ton fi            
od )egnaRnIseimene(sriapi ni ymene ,_ rof        
lin ,}{ = tegraTniam ,stegrat lacol        
esle    
dne        
dne            
1 + tnuoCkcatta = tnuoCkcatta                
)tnuoCkcatta ,noitcerid(revreSeriF:etomeRkcilCtfeL.nopaeWdeppiuqe                
tinU.)noitisoP.)(toviPteG:retcarahc - noitisoP.traPtoor( = noitcerid lacol                
neht traPtoor fi            
)"traPtooRdionamuH"(dlihCtsriFdniF:ymene = traPtoor lacol            
od )egnaRnIseimene(sriapi ni ymene ,_ rof        
  1 = tnuoCkcatta lacol        
neht )"etomeRkcilCtfeL"(dlihCtsriFdniF:nopaeWdeppiuqe fi    
)06 ,retcarahc(egnaRnIseimenEteG = egnaRnIseimene lacol    
dne nruter neht nopaeWdeppiuqe ton fi    
dne    
dne        
kaerb            
meti = nopaeWdeppiuqe            
neht )"looT"(AsI:meti fi        
od ))(nerdlihCteG:retcarahc(sriapi ni meti ,_ rof    
nopaeWdeppiuqe lacol    
dne nruter neht retcarahc ton fi    
retcarahC.reyalp = retcarahc lacol    
)(nwoDlooCoNkcattA noitcnuf
dne
stegrat nruter    
dne    
dne        
dne            
dne                
)retcarahC.reyalPrehto ,stegrat(tresni.elbat                    
neht egnar =< ecnatsid fi                
edutingaM.)soPreyalp - noitisoP.traPtoor( = ecnatsid lacol                
neht )retcarahC.reyalPrehto(evilAytitnEsI dna traPtoor fi            
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPrehto = traPtoor lacol            
neht retcarahC.reyalPrehto dna reyalp =~ reyalPrehto fi        
od )sreyalp(sriapi ni reyalPrehto ,_ rof    
dne    
dne        
dne            
)ymene ,stegrat(tresni.elbat                
neht egnar =< ecnatsid fi            
edutingaM.)soPreyalp - noitisoP.traPtoor( = ecnatsid lacol            
neht )ymene(evilAytitnEsI dna traPtoor fi        
)"traPtooRdionamuH"(dlihCtsriFdniF:ymene = traPtoor lacol        
od )seimene(sriapi ni ymene ,_ rof    
noitisoP.)(toviPteG:retcarahc = soPreyalp lacol    
}{ = stegrat lacol    
)(sreyalPteG:)"sreyalP"(ecivreSteG:emag = sreyalp lacol    
)(nerdlihCteG:seimenE.)"ecapskroW"(ecivreSteG:emag = seimene lacol    
)egnar ,retcarahc(egnaRnIseimenEteG noitcnuf lacol
dne
0 > htlaeH.dionamuh dna dionamuh nruter    
)"dionamuH"(dlihCtsriFdniF:ytitne = dionamuh lacol    
dne eslaf nruter neht ytitne ton fi    
)ytitne(evilAytitnEsI noitcnuf lacol
reyalPlacoL.sreyalP.emag = reyalp lacol
)dne
dne    
dne        
dne            
emiTtnerruc = etadpUsoPtsal                
))006 ,006-(modnar.htam ,)003 ,0(modnar.htam ,)006 ,006-(modnar.htam(wen.emarFC = soP                
neht 5.0 => etadpUsoPtsal - emiTtnerruc fi            
)(kcit = emiTtnerruc lacol            
neht )(tsaeBaeSkcehC dna tseBaeSotuA.)(vnegteg fi        
od )1.0(tiaw.ksat elihw    
)(kcit = etadpUsoPtsal lacol    
)(noitcnuf(nwaps
)dne
dne    
dne        
)(kcit = llaCtsal            
)dne            
)eurt ,"neK"(revreSeriF:EmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
)(noitcnuf(llacp            
neht lavretnIllac > llaCtsal - )(kcit dna )4V_lairT_lliK.)(vnegteg ro mraFotuA.)(vnegteg( fi        
od )(tiaw elihw    
1 = lavretnIllac lacol    
0 = llaCtsal lacol    
)(noitcnuf(nwaps
)dne
)dne    
)dne        
dne            
dne                
dne                    
eslaf = edilloCnaC.v                        
neht )"traPesaB"(AsI:v fi                    
od ))(stnadnecseDteG:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag(sriap ni v ,_ rof                
neht            
reyalPtropeleT.)(vnegteg               
ro rebaSotuA.)(vnegteg               
ro atihsuTotuA.)(vnegteg               
ro KDCteGotuA.)(vnegteg               
ro ratiuGllukSotuA.)(vnegteg               
ro ikaHwobniaRotuA.)(vnegteg               
ro lairTretfAreyalPlliKotuA.)(vnegteg               
ro ecaRlairTotuA.)(vnegteg               
ro raeGoTtropeleT.)(vnegteg               
ro tnioptsehgihotneewT.)(vnegteg               
ro eragiMtropeleT.)(vnegteg               
ro 2_niarTtseuQ.)(vnegteg               
ro luohGotuA.)(vnegteg               
ro grobyCotuA.)(vnegteg               
ro 2VecaRedargpU.)(vnegteg               
ro iveLlliK.)(vnegteg               
 ro noisnemiDnezorFotuA.)(vnegteg               
 ro tseBaeSotuA.)(vnegteg               
 ro krahsrorreTotuA.)(vnegteg               
 ro edagirBdnarGetariPzleR.)(vnegteg               
 ro edagirBetariPzleR.)(vnegteg               
 ro taoBhsiFzleR.)(vnegteg               
 ro taoBliaS.)(vnegteg               
 ro noegnuD_otuA.)(vnegteg               
 ro ssoBllAmraFotuA.)(vnegteg               
 ro ssoBmraFotuA.)(vnegteg               
 ro noitavresbOotuA.)(vnegteg               
 ro 2VikaHnoitavresbOotuA.)(vnegteg               
 ro mraFrebmEezalB.)(vnegteg               
 ro edargpUnolaTnogarD.)(vnegteg               
 ro tseuQmialCojoD.)(vnegteg               
 ro draebkraDotuA.)(vnegteg               
 ro gniKhguoDotuA.)(vnegteg               
 ro repaeRluoSotuA.)(vnegteg               
 ro ardnIpiRotuA.)(vnegteg               
 ro ikaHdaPhcuoTotuA.)(vnegteg               
 ro retnuHetilEotuA.)(vnegteg               
 ro diaRetariPotuA.)(vnegteg               
 ro yrotcaFotuA.)(vnegteg               
 ro aeSdrihTotuA.)(vnegteg               
 ro dlroWweNotuA.)(vnegteg               
 ro tiurFoTtropeleT.)(vnegteg               
 ro eeleMteGotuA.)(vnegteg               
 ro mraFyretsaM.)(vnegteg               
 ro lairetaMotuA.)(vnegteg               
 ro mraFotuA.)(vnegteg               
 ro dnalsItropeleT.)(vnegteg fi            
)(noitcnuf(tcennoC:deppetS.)"ecivreSnuR"(ecivreSteG:emag        
)(noitcnuf(llacp    
)(noitcnuf(nwaps
)dne
dne    
)dne        
dne            
dne                
)(yortseD:pilCydob                    
neht pilCydob fi                
)"pilCydoB"(dlihCtsriFdniF:traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = pilCydob lacol                
esle            
dne                
)0 ,0 ,0(wen.3rotceV = yticoleV.pilcoN                    
)000001 ,000001 ,000001(wen.3rotceV = ecroFxaM.pilcoN                    
traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = tneraP.pilcoN                    
"pilCydoB" = emaN.pilcoN                    
)"yticoleVydoB"(wen.ecnatsnI = pilcoN lacol                    
neht )"pilCydoB"(dlihCtsriFdniF:traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ton fi                
neht            
reyalPtropeleT.)(vnegteg               
ro rebaSotuA.)(vnegteg               
ro atihsuTotuA.)(vnegteg               
ro KDCteGotuA.)(vnegteg               
ro ratiuGllukSotuA.)(vnegteg               
ro ikaHwobniaRotuA.)(vnegteg               
ro lairTretfAreyalPlliKotuA.)(vnegteg               
ro ecaRlairTotuA.)(vnegteg               
ro raeGoTtropeleT.)(vnegteg               
ro tnioptsehgihotneewT.)(vnegteg               
ro eragiMtropeleT.)(vnegteg               
ro 2_niarTtseuQ.)(vnegteg               
ro luohGotuA.)(vnegteg               
ro grobyCotuA.)(vnegteg               
ro 2VecaRedargpU.)(vnegteg               
ro iveLlliK.)(vnegteg               
 ro noisnemiDnezorFotuA.)(vnegteg               
 ro tseBaeSotuA.)(vnegteg               
 ro krahsrorreTotuA.)(vnegteg               
 ro edagirBdnarGetariPzleR.)(vnegteg               
 ro edagirBetariPzleR.)(vnegteg               
 ro taoBhsiFzleR.)(vnegteg               
 ro taoBliaS.)(vnegteg               
 ro noegnuD_otuA.)(vnegteg               
 ro ssoBllAmraFotuA.)(vnegteg               
 ro ssoBmraFotuA.)(vnegteg               
 ro noitavresbOotuA.)(vnegteg               
 ro 2VikaHnoitavresbOotuA.)(vnegteg               
 ro mraFrebmEezalB.)(vnegteg               
 ro edargpUnolaTnogarD.)(vnegteg               
 ro tseuQmialCojoD.)(vnegteg               
 ro draebkraDotuA.)(vnegteg               
 ro gniKhguoDotuA.)(vnegteg               
 ro repaeRluoSotuA.)(vnegteg               
 ro ardnIpiRotuA.)(vnegteg               
 ro ikaHdaPhcuoTotuA.)(vnegteg               
 ro retnuHetilEotuA.)(vnegteg               
 ro diaRetariPotuA.)(vnegteg               
 ro yrotcaFotuA.)(vnegteg               
 ro aeSdrihTotuA.)(vnegteg               
 ro dlroWweNotuA.)(vnegteg               
 ro tiurFoTtropeleT.)(vnegteg               
 ro eeleMteGotuA.)(vnegteg               
 ro mraFyretsaM.)(vnegteg               
 ro lairetaMotuA.)(vnegteg               
 ro mraFotuA.)(vnegteg               
 ro dnalsItropeleT.)(vnegteg fi            
)(noitcnuf(llacp        
od )(tiaw.ksat elihw    
)(noitcnuf(nwaps
dne
)dne    
dne        
eslaf = pilC.)(vnegteg            
eslaf = neewTpotS.)(vnegteg            
dne            
)(yortseD:pilCydob                
neht pilCydob fi            
)"pilCydoB"(dlihCtsriFdniF:traPtooRdionamuh dna traPtooRdionamuh = pilCydob lacol            
dne            
eslaf = derohcnA.traPtooRdionamuh                
emarFC.traPtooRdionamuh = emarFC.traPtooRdionamuh                
)1.0(tiaw.ksat                
eurt = derohcnA.traPtooRdionamuh                
neht traPtooRdionamuh fi            
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahc dna retcarahc = traPtooRdionamuh lacol            
retcarahC.reyalp dna reyalp = retcarahc lacol            
reyalPlacoL.)"sreyalP"(ecivreSteG:emag = reyalp lacol            
            dne            
lin = neewt                
)(lecnaC:neewt                
neht neewt fi            
            eurt = neewTpotS.)(vnegteg            
neht tegrat ton fi        
)(noitcnuf(llacp    
)tegrat(neewTpotS noitcnuf
dne
)dne    
dne        
cnufneewt nruter            
dne            
neewt nruter                
neht neewt ton fi            
dne            
)                
Z.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
,YtegraT                    
,X.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
(wen.emarFC = emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
)(tiaW:detelpmoC.neewt                
dne                
)(lecnaC:neewt                    
)(potS:cnufneewt noitcnuf                
)(yalP:neewt                
)                
}soP_neewT = emarFC{                    
,Oa                    
,]"traPtooRdionamuH"[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                    
(etaerC:Na = neewt                
)                
raeniL.elytSgnisaE.munE                    
,deepSneewT / edutingaM.)noitisoP.)"traPtooRdionamuH"(dlihCroFtiaW:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - soPtegrat(                    
(wen.ofnIneewT = Oa lacol                
)"ecivreSneewT"(ecivreSteG:emag = Na lacol                
}{ = cnufneewt lacol                
esle            
)                
Z.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
,YtegraT                    
,X.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
(wen.emarFC = emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
)(tiaW:detelpmoC.neewt                
dne                
)(lecnaC:neewt                    
)(potS:cnufneewt noitcnuf                
)(yalP:neewt                
)                
}YtlaufeDhtiWemarFCtegrat = emarFC{                    
,Oa                    
,]"traPtooRdionamuH"[retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag                    
(etaerC:Na = neewt                
)                
raeniL.elytSgnisaE.munE                    
,deepSneewT / edutingaM.)noitisoP.)"traPtooRdionamuH"(dlihCroFtiaW:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - soPtegrat(                    
(wen.ofnIneewT = Oa lacol                
)"ecivreSneewT"(ecivreSteG:emag = Na lacol                
}{ = cnufneewt lacol                
)                
Z.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
,YtlaufeD                    
,X.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                    
(wen.emarFC = emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
neht 5 > edutingaM.)noitisoP.YtlaufeDhtiWemarFCtegrat - noitisoP.1b( dna YerognI fi            
eurt = YerognI            
)            
Z.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
,YtlaufeD                
,X.emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
(wen.emarFC = 1b            
dne            
)Ma(ecnartnEtseuqer                
)dne                
)(lecnaC:neewt                    
)(noitcnuf(llacp                
neht Ma fi            
)soP_neewT(retropeleTtseraeNkcehC = Ma lacol            
dne            
soP_neewT = emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
neht 003 =< ecnatsiD fi            
edutingaM.)noitisoP.)"traPtooRdionamuH"(dlihCroFtiaW:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag - soPtegrat( = ecnatsiD            
emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = emarfcdlo            
noitisoP.soP_neewT = soPtegrat            
)Z.soP_neewT ,YtlaufeD ,X.soP_neewT(wen.emarFC = YtlaufeDhtiWemarFCtegrat            
Y.soP_neewT = YtegraT            
Y.soP_neewT = YtlaufeD            
dne            
053 = deepSneewT                
neht deepSneewT ton fi            
neht traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag dna            
 0 > htlaeH.dionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag dna            
 )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag dna            
 )"dionamuH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag dna            
 retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag dna            
 reyalPlacoL.)"sreyalP"(ecivreSteG:emag fi        
)(noitcnuf(llacp    
)soP_neewT(sopot noitcnuf
   dne
)5.0(tiaw.ksat    
    )Z.emarfcdlo ,05 + Y.emarfcdlo ,X.emarfcdlo(wen.emarFC = emarFC.rahc    
traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = rahc lacol    
emarFC.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag = emarfcdlo lacol    
    ))sgra(kcapnu(revreSekovnI:_FmmoC.setomeR.egarotSdetacilpeR.emag    
}Ja ,"ecnartnEtseuqer"{ = sgra lacol    
)Ja(ecnartnEtseuqer noitcnuf
    dne
dne    
esoohc nruter        
neht 3nim =< 2nim fi    
edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - sopscv( = 3nim lacol    
dne    
dne        
]r[snoitacoLelbaT = esoohc            
neht nim =< v fi        
od )2snoitacoLelbaT(sriap ni v ,r rof    
esoohc lacol    
dne    
dne        
v = 2nim            
v = nim            
neht nim < v fi        
od )2snoitacoLelbaT(sriap ni v ,r rof    
dne    
edutingaM.)sopscv - v( = ]r[2snoitacoLelbaT        
od )snoitacoLelbaT(sriap ni v ,r rof    
}{ = 2snoitacoLelbaT lacol    
dne    
}        
)6291- ,5 ,5683(wen.3rotceV = ]"ecartnE dnalsI retaW rednU"[            
,)0281 ,5 ,46116(wen.3rotceV = ]"dnalsI retaW rednU"[            
,)083- ,7455 ,5987-(wen.3rotceV = ]"2 dnalsI ykS"[            
,)4571- ,378 ,2564-(wen.3rotceV = ]"1 dnalsI ykS"[            
{ = snoitacoLelbaT        
neht 1dlroW fiesle    
}        
)331- ,38 ,9056-(wen.3rotceV = ]"dnalsI eibmoZ"[            
,)35823 ,521 ,329(wen.3rotceV = ]"pihS desruC"[            
,)768 ,51 ,3822(wen.3rotceV = ]"mooR ognimalF"[            
,)795 ,133 ,713-(wen.3rotceV = ]"noisnaM ognimalF"[            
{ = snoitacoLelbaT        
neht 2dlroW fiesle    
}        
)301 ,79841 ,68282(wen.3rotceV = ]"emiT fO elpmeT"[            
,)39- ,32 ,9135(wen.3rotceV = ]"etariP lufituaeB"[            
,)1688- ,233 ,10021-(wen.3rotceV = ]"eltruT gnitaolF"[            
,)0313- ,513 ,2905-(wen.3rotceV = ]"aeS ehT nO etlsaC"[            
,)143- ,3101 ,9565(wen.3rotceV = ]"ardyH"[            
,)1557- ,473 ,17421-(wen.3rotceV = ]"noisnaM"[            
{ = snoitacoLelbaT        
neht 3dlroW fi    
}{ = snoitacoLelbaT lacol    
dne    
eurt = 3dlroW        
neht 5363249447 == y fiesle    
eurt = 2dlroW        
neht 3812722444 == y fiesle    
eurt = 1dlroW        
neht 9455193572 == y fi    
3dlroW ,2dlroW ,1dlroW lacol    
dIecalP.emag = y lacol    
eguh.htam = 2nim lacol    
eguh.htam = nim lacol    
noitisoP.Ia = sopscv lacol    
eulaV.leveL.ataD.reyalPlacoL.sreyalP.emag = leveLyM lacol    
)Ia(retropeleTtseraeNkcehC noitcnuf
dne
)dne    
dne        
emiTtnerruc = emiTpiuqEtsal            
dne            
dne                
dne                    
)dionamuHlooT(looTpiuqE:dionamuH.retcarahC.reyalPlacoL.sreyalP.emag                        
neht dionamuHlooT fi                    
)emaN.v(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag = dionamuHlooT lacol                    
neht )"gninekawA" == emaN.v ro "ydoB retaW" == emaN.v ro "tsaeB aeS nommuS" == emaN.v( ton dna )'looT'(AsI:v fi                
od ))(nerdlihCteG:kcapkcaB.reyalPlacoL.sreyalP.emag(sriap ni v ,_ rof            
neht nwodlooCpiuqe => emiTpiuqEtsal - emiTtnerruc fi        
)(kcit = emiTtnerruc lacol        
)(noitcnuf(llacp    
)(nopaeWllApiuqE noitcnuf
2.0 = nwodlooCpiuqe lacol
0 = emiTpiuqEtsal lacol
dne
dne    
dne        
}            
dne                
)(lecnaC:neewt                    
)(noitcnuf = potS                
{ nruter            
emiTtnerruc = emiTBPTtsal            
)(yalP:neewt            
)}sop = emarFC{ ,ofni ,taob(etaerC:s_neewt = neewt lacol            
esle        
}dne )(noitcnuf = potS{ nruter            
neht 52 =< ecnatsid fi        
)raeniL.elytSgnisaE.munE ,deeps / ecnatsid(wen.ofnIneewT = ofni lacol        
taoBdeepS.)(vnegteg = deeps lacol        
edutingaM.)noitisoP.sop - noitisoP.emarFC.taob( = ecnatsid lacol        
)"ecivreSneewT"(ecivreSteG:emag = s_neewt lacol        
neht nwodlooCbpt => emiTBPTtsal - emiTtnerruc fi    
)(kcit = emiTtnerruc lacol    
)taob ,sop(BPT noitcnuf
5.0 = nwodlooCbpt lacol
0 = emiTBPTtsal lacol
dne
dne    
emiTtnerruc = emiTneewTtsal        
)(yalP:neewt        
)        
} soP = emarFC {            
,)raeniL.elytSgnisaE.munE ,deepS / ecnatsiD(wen.ofnIneewT            
,traPtooRdionamuH.retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag            
(etaerC:)"ecivreSneewT"(ecivreSteG:emag = neewt lacol        
        0001 = deepS lacol        
edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.soP( = ecnatsiD lacol        
neht nwodlooCneewt => emiTneewTtsal - emiTtnerruc fi    
)(kcit = emiTtnerruc lacol    
)soP(soptsaf noitcnuf
5.0 = nwodlooCneewt lacol
0 = emiTneewTtsal lacol
dne
dne    
902v = emarFC.traPtoor        
traPtooRdionamuH.retcarahC.reyalp = traPtoor lacol        
neht )"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp fi    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)902v(ZPTB noitcnuf
dne
0002 =< edutingaM.)noitisoP.traPtooRdionamuh - noitisoP.p( litnu    
)5.0(tiaw.ksat        
dne        
p = emarFC.traPtooRdionamuh            
noitisoP.traPtooRdionamuh = noitisoPtsal            
neht 1 > edutingaM.)noitisoPtsal - noitisoP.traPtooRdionamuh( fi        
eslaf = elbisiV.tseuQ.iuGreyalp        
p = emarFC.traPtooRdionamuh        
0 = htlaeH.dionamuh        
taeper    
noitisoP.traPtooRdionamuh = noitisoPtsal lacol    
noitisoP.p = noitisoPtegrat lacol    
niaM.iuGreyalP.reyalp = iuGreyalp lacol    
dionamuH.retcarahC.reyalp = dionamuh lacol    
traPtooRdionamuH.retcarahC.reyalp = traPtooRdionamuh lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)p(PTB noitcnuf
dne
dne    
emiTtnerruc = emiTpiuqEtsal        
dne        
dne            
)loot(looTpiuqE:dionamuH.retcarahC.reyalPlacoL.sreyalP.emag                
neht loot fi            
)eSlooT(dlihCtsriFdniF:kcapkcaB.reyalPlacoL.sreyalP.emag = loot lacol            
neht piuqEotuAtoN.)(vnegteg ton fi        
        neht nwodlooCpiuqe => emiTpiuqEtsal - emiTtnerruc fi    
)(kcit = emiTtnerruc lacol    
)eSlooT(nopaeWpiuqE noitcnuf
5.0 = nwodlooCpiuqe lacol
0 = emiTpiuqEtsal lacol
dne
dne    
emiTtnerruc = emiTpiuqEnUtsal        
dne        
eslaf = piuqEotuAtoN.)(vnegteg            
kcapkcaB.reyalPlacoL.sreyalP.emag = tneraP.]nopaeW[retcarahC.reyalPlacoL.sreyalP.emag            
eurt = piuqEotuAtoN.)(vnegteg            
neht )nopaeW(dlihCtsriFdniF:retcarahC.reyalPlacoL.sreyalP.emag fi        
neht nwodlooCpiuqEnu => emiTpiuqEnUtsal - emiTtnerruc fi    
)(kcit = emiTtnerruc lacol    
)nopaeW(nopaeWpiuqEnU noitcnuf
5.0 = nwodlooCpiuqEnu lacol
0 = emiTpiuqEnUtsal lacol
dne
dne    
dne        
emiTtnerruc = emiTikaHtsal            
)"osuB"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
neht nwodlooCikah => emiTikaHtsal - emiTtnerruc fi        
)(kcit = emiTtnerruc lacol        
neht )"osuBsaH"(dlihCtsriFdniF:retcarahC.reyalPlacoL.)"sreyalP"(ecivreSteG:emag ton fi    
)(ikaHotuA noitcnuf
1 = nwodlooCikah lacol
0 = emiTikaHtsal lacol
dne
dne    
dne        
"tluafeD" = PS            
)7196- ,074 ,54531-(wen.emarFC = soPM            
} "etariP lacigolohtyM" { = noMM            
neht "ksuT iniM" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)4095 ,47 ,964-(wen.emarFC = soPM            
} "erianoilliB lotsiP" { = noMM            
neht "redwopnuG" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)931 ,383 ,4956(wen.emarFC = soPM            
} "roirraW werC nogarD" { = noMM            
neht "elacS nogarD" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)526041963.18521- ,96455341744639.87 ,8812944064436.026(wen.emarFC = soPM            
} "roirraW aocoC" ,"relttaB raB etalocohC" { = noMM            
neht "aocoC derujnoC" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)0498- ,233 ,39901-(wen.emarFC = soPM            
} "niatpaC namhsiF" ,"rediaR namhsiF" { = noMM            
neht "liaT hsiF" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)5734372030.02601- ,9124289604377.133 ,52651587.57911-(wen.emarFC = soPM            
} "etariP tseroF" ,"etariP elgnuJ" { = noMM            
neht "lateM parcS + rehtaeL" == lairetaMtceleS fi        
neht 3dlroW fiesle    
dne        
"tluafeD" = PS            
)7131- ,7 ,3306-(wen.emarFC = soPM            
} "eripmaV" { = noMM            
neht "gnaF eripmaV" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)65- ,37 ,592(wen.emarFC = soPM            
} "ffatS yrotcaF" { = noMM            
neht "lairetaM evitcaoidaR" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)24501- ,932 ,5833-(wen.emarFC = soPM            
} "rethgiF retaW" { = noMM            
neht "telporD citsyM" == lairetaMtceleS fiesle        
)00081 ,noitisoPtegrat(ecnartnEtseuqeRdluohs            
)5786971487.9181 ,489807673243243.5 ,5265158.36116(wen.3rotceV = noitisoPtegrat lacol            
"tluafeD" = PS            
)5260935.95133 ,18288921859.521 ,91763672853.119(wen.emarFC = soPM            
} "reciffO pihS" ,"drawetS pihS" ,"reenignE pihS" ,"dnahkceD pihS" { = noMM            
neht "msalpotcE" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)9595- ,87 ,8245-(wen.emarFC = soPM            
} "etariP avaL" ,"ajniN amgaM" { = noMM            
neht "erO amgaM" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)573906948026.6233- ,57869766951100.37 ,5213544189505.0102-(wen.emarFC = soPM            
} "niatpaC eniraM" { = noMM            
neht "lateM parcS + rehtaeL" == lairetaMtceleS fi        
neht 2dlroW fiesle    
dne        
)00071 ,noitisoPtegrat(ecnartnEtseuqeRdluohs            
)5786971487.9181 ,489807673243243.5 ,5265158.36116(wen.3rotceV = noitisoPtegrat lacol            
"tluafeD" = PS            
)9651 ,91 ,32116(wen.emarFC = soPM            
} "droL namhsiF" ,"odnammoC namhsiF" ,"roirraW namhsiF" { = noMM            
neht "liaT hsiF" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)0288 ,48 ,5185-(wen.emarFC = soPM            
} "larimdA amgaM" ,"ypS yratiliM" ,"reidloS yratiliM" { = noMM            
neht "erO amgaM" == lairetaMtceleS fiesle        
"tluafeD" = PS            
)0534 ,51 ,5411-(wen.emarFC = soPM            
} "etariP" ,"eturB" { = noMM            
neht "lateM parcS + rehtaeL" == lairetaMtceleS fiesle        
)00001 ,noitisoPtegrat(ecnartnEtseuqeRdluohs            
)88655.7661- ,84245.278 ,57228.7064-(wen.3rotceV = noitisoPtegrat lacol            
"tluafeD" = PS            
)2191- ,548 ,8964-(wen.emarFC = soPM            
} "doG rednuhT" ,"repsyW" ,"reidloS layoR" ,"dauqS layoR" ,"adnahS" { = noMM            
neht "sgniW legnA" == lairetaMtceleS fi        
neht 1dlroW fi    
dne    
dne        
)noitisoPtegrat ,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag            
neht dlohserhTecnatsid => ecnatsid fi        
edutingaM.)noitisoPtegrat - noitisoP.traPtooRdionamuh( = ecnatsid lacol        
)dlohserhTecnatsid ,noitisoPtegrat(ecnartnEtseuqeRdluohs noitcnuf lacol    
dne nruter neht traPtooRdionamuh ton fi    
)"traPtooRdionamuH"(dlihCtsriFdniF:retcarahC.reyalp dna retcarahC.reyalp = traPtooRdionamuh lacol    
reyalPlacoL.sreyalP.emag = reyalp lacol    
)(noMlairetaM noitcnuf
dne
dne    
dne        
)172293999.0- ,0 ,1997868430.0 ,0 ,1 ,0 ,1997868430.0- ,0 ,172293999.0- ,80351.8741 ,352754.221 ,340.55861-(wen.emarFC = noMemarFC            
)104860159.0 ,0 ,564089803.0 ,0- ,1 ,0 ,564089803.0- ,0- ,104860159.0 ,43496.9751 ,504695.401 ,4191.56661-(wen.emarFC = tseuQemarFC            
"reyalS llukS" = noMemaN            
"3tseuQikiT" = tseuQemaN            
2 = tseuQleveL            
"reyalS llukS" = noM            
neht 5752 => leveLyM fiesle        
)440764964.0 ,0 ,800059288.0- ,0 ,1 ,0 ,800059288.0 ,0 ,440764964.0 ,76487.8841 ,58290.601 ,5260.12561-(wen.emarFC = noMemarFC            
)104860159.0 ,0 ,564089803.0 ,0- ,1 ,0 ,564089803.0- ,0- ,104860159.0 ,43496.9751 ,504695.401 ,4191.56661-(wen.emarFC = tseuQemarFC            
"retnuH tnepreS" = noMemaN            
"3tseuQikiT" = tseuQemaN            
1 = tseuQleveL            
"retnuH tnepreS" = noM            
neht 4752 =< leveLyM dna 0552 => leveLyM fiesle        
)573489859282.1301 ,3070799645287.532 ,5786976.14661-(wen.emarFC = noMemarFC            
)5260935258375.1501 ,54939788823686.55 ,521870.93561-(wen.emarFC = tseuQemarFC            
"noipmahC elsI" = noMemaN            
"2tseuQikiT" = tseuQemaN            
2 = tseuQleveL            
"noipmahC elsI" = noM            
neht 0552 =< leveLyM dna 5252 => leveLyM fiesle        
)26515306860988.291- ,57869719565760.48 ,57817162.10961-(wen.emarFC = noMemarFC            
)21823637406314.371- ,85298410433531.16 ,578640847.74561-(wen.emarFC = tseuQemarFC            
"yoB dnalsI" = noMemaN            
"1tseuQikiT" = tseuQemaN            
2 = tseuQleveL            
"yoB dnalsI" = noM            
neht 4252 =< leveLyM dna 5742 => leveLyM fiesle        
)6567436577364.462- ,48469839999831.611 ,521354418.24461-(wen.emarFC = noMemarFC            
)21823637406314.371- ,85298410433531.16 ,578640847.74561-(wen.emarFC = tseuQemarFC            
"waltuO elsI" = noMemaN            
"1tseuQikiT" = tseuQemaN            
1 = tseuQleveL            
"waltuO elsI" = noM            
neht 4742 =< leveLyM dna 0542 => leveLyM fiesle        
            )573906.83541- ,43204785467742.17 ,8395855226002.088-(wen.emarFC = noMemarFC            
)5739069433.64441- ,294922068439873.02 ,5260930040.0511-(wen.emarFC = tseuQemarFC            
"nomeD wonS" = noMemaN            
"1tseuQydnaC" = tseuQemaN            
2 = tseuQleveL            
"nomeD wonS" = noM            
neht 9442 =< leveLyM dna 5242 => leveLyM fiesle        
)578692404.26541- ,550602163325610.62 ,5739012663005.0131-(wen.emarFC = noMemarFC            
)5739069433.64441- ,294922068439873.02 ,5260930040.0511-(wen.emarFC = tseuQemarFC            
"etariP ydnaC" = noMemaN            
"1tseuQydnaC" = tseuQemaN            
1 = tseuQleveL            
"etariP ydnaC" = noM            
neht 4242 =< leveLyM dna 0042 => leveLyM fiesle        
)5265158745.67821- ,5260466086742.77 ,26515301136568.431(wen.emarFC = noMemarFC            
)5786929205.47721- ,247010161396396.03 ,2242375736605.051(wen.emarFC = tseuQemarFC            
"lebeR ydnaC" = noMemaN            
"2tseuQcohC" = tseuQemaN            
2 = tseuQleveL            
"lebeR ydnaC" = noM            
neht 9932 =< leveLyM dna 5732 => leveLyM fiesle        
)5260419638.00621- ,60414941358850.67 ,5265674881.561(wen.emarFC = noMemarFC            
)5786929205.47721- ,247010161396396.03 ,2242375736605.051(wen.emarFC = tseuQemarFC            
"feihT teewS" = noMemaN            
"2tseuQcohC" = tseuQemaN            
1 = tseuQleveL            
"feihT teewS" = noM            
neht 4732 =< leveLyM dna 0532 => leveLyM fiesle        
)573901261.36421- ,44377290590881.77 ,578171675095.285(wen.emarFC = noMemarFC            
)5734893332.10221- ,722230853100678.92 ,83901730363822.332(wen.emarFC = tseuQemarFC            
"relttaB raB etalocohC" = noMemaN            
"1tseuQcohC" = tseuQemaN            
2 = tseuQleveL            
"relttaB raB etalocohC" = noM            
neht 9432 =< leveLyM dna 5232 => leveLyM fiesle        
)5213596783.25321- ,91242849699475.08 ,52604196382355.12-(wen.emarFC = noMemarFC            
)5734893332.10221- ,722230853100678.92 ,83901730363822.332(wen.emarFC = tseuQemarFC            
"roirraW aocoC" = noMemaN            
"1tseuQcohC" = tseuQemaN            
1 = tseuQleveL            
"roirraW aocoC" = noM            
neht 4232 =< leveLyM dna 0032 => leveLyM fiesle        
)5213549392.96821- ,573484125488.28 ,578124232881.6122-(wen.emarFC = noMemarFC            
)64440869.0- ,80-e14911246.2 ,685877052.0- ,80-e11740994.1 ,1 ,80-e26011947.4 ,685877052.0 ,80-e34124122.4 ,64440869.0- ,1935.24821- ,9331897.73 ,20619.7291-(wen.emarFC = tseuQemarFC            
"rekaB daeH" = noMemaN            
"2tseuQekaC" = tseuQemaN            
2 = tseuQleveL            
"rekaB daeH" = noM            
neht 9922 =< leveLyM dna 5722 => leveLyM fiesle        
)5739585053.89921- ,9352583705816.77 ,5734325639908.7881-(wen.emarFC = noMemarFC            
)64440869.0- ,80-e14911246.2 ,685877052.0- ,80-e11740994.1 ,1 ,80-e26011947.4 ,685877052.0 ,80-e34124122.4 ,64440869.0- ,1935.24821- ,9331897.73 ,20619.7291-(wen.emarFC = tseuQemarFC            
"ffatS gnikaB" = noMemaN            
"2tseuQekaC" = tseuQemaN            
1 = tseuQleveL            
"ffatS gnikaB" = noM            
neht 4722 =< leveLyM dna 0522 => leveLyM fiesle        
)5786450185.44221- ,662270471791377.34 ,5739538600703.8951-(wen.emarFC = noMemarFC            
)139675759.0 ,80-e5312302.5- ,818771882.0- ,80-e11213915.7 ,1 ,80-e7811039.6 ,818771882.0 ,80-e35020308.8- ,139675759.0 ,5927.82021- ,4522897.73 ,70023.1202-(wen.emarFC = tseuQemarFC            
"drauG ekaC" = noMemaN            
"1tseuQekaC" = tseuQemaN            
2 = tseuQleveL            
"drauG ekaC" = noM            
neht 9422 =< leveLyM dna 5222 => leveLyM fiesle        
)57395803.52121- ,96408945362897.73 ,57817631.4732-(wen.emarFC = noMemarFC            
)139675759.0 ,80-e5312302.5- ,818771882.0- ,80-e11213915.7 ,1 ,80-e7811039.6 ,818771882.0 ,80-e35020308.8- ,139675759.0 ,5927.82021- ,4522897.73 ,70023.1202-(wen.emarFC = tseuQemarFC            
"retfarC eikooC" = noMemaN            
"1tseuQekaC" = tseuQemaN            
1 = tseuQleveL            
"retfarC eikooC" = noM            
neht 4222 =< leveLyM dna 0022 => leveLyM fiesle        
)5260414477.09211- ,30707428759840.211 ,52651530160.855-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,834898597.56901- ,363276625918.56 ,35493452846.028-(wen.emarFC = tseuQemarFC            
"rednammoC maerC ecI" = noMemaN            
"tseuQdnalsImaerCecI" = tseuQemaN            
2 = tseuQleveL            
"rednammoC maerC ecI" = noM            
neht 9912 =< leveLyM dna 0512 => leveLyM fiesle        
)52130759.91901- ,74037844275918.56 ,52130285642.278-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,834898597.56901- ,363276625918.56 ,35493452846.028-(wen.emarFC = tseuQemarFC            
"fehC maerC ecI" = noMemaN            
"tseuQdnalsImaerCecI" = tseuQemaN            
1 = tseuQleveL            
"fehC maerC ecI" = noM            
neht 9412 =< leveLyM dna 5212 => leveLyM fiesle        
)5786924.22401- ,38845784861301.83 ,52609300453.9581-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,57812.49101- ,232839761401.83 ,6041968093.4012-(wen.emarFC = tseuQemarFC            
"tnediserP tunaeP" = noMemaN            
"tseuQdnalsIstuN" = tseuQemaN            
2 = tseuQleveL            
"tnediserP tunaeP" = noM            
neht 4212 =< leveLyM dna 0012 => leveLyM fiesle        
)5781711599.92001- ,52182368489127.74 ,573953349142.3412-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,57812.49101- ,232839761401.83 ,6041968093.4012-(wen.emarFC = tseuQemarFC            
"tuocS tunaeP" = noMemaN            
"tseuQdnalsIstuN" = tseuQemaN            
1 = tseuQleveL            
"tuocS tunaeP" = noM            
neht 9902 =< leveLyM dna 5702 => leveLyM fiesle        
)526515874.5026 ,527714903725152.6 ,5739064220.2859-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,33564.8706 ,181710.271 ,61399.6159-(wen.emarFC = tseuQemarFC            
"ymmuM dessesoP" = noMemaN            
"2tseuQdetnuaH" = tseuQemaN            
2 = tseuQleveL            
"ymmuM dessesoP" = noM            
neht 4702 =< leveLyM dna 0502 => leveLyM fiesle        
)5260461399.8516 ,83958088728401.271 ,5213070278.5059-(wen.emarFC = noMemarFC            
 )0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,33564.8706 ,181710.271 ,61399.6159-(wen.emarFC = tseuQemarFC            
"luoS cinomeD" = noMemaN            
"2tseuQdetnuaH" = tseuQemaN            
1 = tseuQleveL            
"luoS cinomeD" = noM            
neht 9402 =< leveLyM dna 5202 => leveLyM fiesle        
)5781768880.8385 ,88697664876626.831 ,5739538131.44101-(wen.emarFC = noMemarFC            
)0 ,0 ,1- ,0- ,1 ,0 ,1 ,0 ,0 ,77290.6655 ,880512.141 ,8612.9749-(wen.emarFC = tseuQemarFC            
"eibmoZ gniviL" = noMemaN            
"1tseuQdetnuaH" = tseuQemaN            
2 = tseuQleveL            
"eibmoZ gniviL" = noM            
neht 4202 =< leveLyM dna 0002 => leveLyM fiesle        
)52604618168.9516 ,83953349199227.561 ,5218236327.3678-(wen.emarFC = noMemarFC            
)0 ,0 ,1- ,0- ,1 ,0 ,1 ,0 ,0 ,77290.6655 ,880512.141 ,8612.9749-(wen.emarFC = tseuQemarFC            
"notelekS nrobeR" = noMemaN            
"1tseuQdetnuaH" = tseuQemaN            
1 = tseuQleveL            
"notelekS nrobeR" = noM            
neht 9991 =< leveLyM dna 5791 => leveLyM fiesle        
)573437771.9589- ,578692456545.193 ,578692409.75431-(wen.emarFC = noMemarFC            
)2005131780.0- ,0 ,668691699.0- ,0 ,1 ,0 ,668691699.0 ,0 ,2005131780.0- ,35910.2099- ,930179.983 ,8183.08621-(wen.emarFC = tseuQemarFC            
"etariP reeteksuM" = noMemaN            
"2dnalsItseroFpeeD" = tseuQemaN            
2 = tseuQleveL            
"etariP reeteksuM" = noM            
neht 4791 =< leveLyM dna 5291 => leveLyM fiesle        
)5260419638.58401- ,52182837.133 ,52651061.65221-(wen.emarFC = noMemarFC            
)2005131780.0- ,0 ,668691699.0- ,0 ,1 ,0 ,668691699.0 ,0 ,2005131780.0- ,35910.2099- ,930179.983 ,8183.08621-(wen.emarFC = tseuQemarFC            
"etariP elgnuJ" = noMemaN            
"2dnalsItseroFpeeD" = tseuQemaN            
1 = tseuQleveL            
"etariP elgnuJ" = noM            
neht 4291 =< leveLyM dna 0091 => leveLyM fiesle        
)521354981.1996- ,57869245180.105 ,578124706.08631-(wen.emarFC = noMemarFC            
   )742431707.0 ,0 ,192970707.0 ,0- ,1 ,0 ,192970707.0- ,0- ,742431707.0 ,73104.5267- ,594884.133 ,40.43231-(wen.emarFC = tseuQemarFC            
"etariP lacigolohtyM" = noMemaN            
"dnalsItseroFpeeD" = tseuQemaN            
2 = tseuQleveL            
"etariP lacigolohtyM" = noM            
neht 9981 =< leveLyM dna 0581 => leveLyM fiesle        
)52604665085.9677- ,9645013341873.233 ,526515874.47231-(wen.emarFC = noMemarFC            
)742431707.0 ,0 ,192970707.0 ,0- ,1 ,0 ,192970707.0- ,0- ,742431707.0 ,73104.5267- ,594884.133 ,40.43231-(wen.emarFC = tseuQemarFC            
"etariP tseroF" = noMemaN            
"dnalsItseroFpeeD" = tseuQemaN            
1 = tseuQleveL            
"etariP tseroF" = noM            
neht 9481 =< leveLyM dna 5281 => leveLyM fiesle        
 )5265153011.2009- ,52604196804183.253 ,578171107.49901-(wen.emarFC = noMemarFC            
   )312259288.0- ,0 ,755364964.0- ,0 ,1 ,0 ,755364964.0 ,0 ,312259288.0- ,25681.1678- ,559278.033 ,3656.18501-(wen.emarFC = tseuQemarFC            
"niatpaC namhsiF" = noMemaN            
"3dnalsItseroFpeeD" = tseuQemaN            
2 = tseuQleveL            
"niatpaC namhsiF" = noM            
neht 4281 =< leveLyM dna 0081 => leveLyM fiesle        
)5265106615.8638- ,57343772436267.133 ,5781763625.70401-(wen.emarFC = noMemarFC            
   )312259288.0- ,0 ,755364964.0- ,0 ,1 ,0 ,755364964.0 ,0 ,312259288.0- ,25681.1678- ,559278.033 ,3656.18501-(wen.emarFC = tseuQemarFC            
"rediaR namhsiF" = noMemaN            
"3dnalsItseroFpeeD" = tseuQemaN            
1 = tseuQleveL            
"rediaR namhsiF" = noM            
neht 9971 =< leveLyM dna 5771 => leveLyM fiesle        
)5218236895.1007- ,65153011360425.061 ,526046186377.6563(wen.emarFC = noMemarFC            
)3187571550.0476- ,848813932137.82 ,52182889.9712(wen.emarFC = tseuQemarFC            
2 = tseuQleveL            
"dnalsIeerTeniraM" = tseuQemaN            
"larimdA raeR eniraM" = noMemaN            
"larimdA raeR eniraM" = noM            
neht 4771 =< leveLyM dna 5271 => leveLyM fiesle        
)52130280908.9517- ,30702267819331.37 ,5218700.6822(wen.emarFC = noMemarFC            
)747929569.0- ,0 ,897408852.0- ,0 ,1 ,0 ,897408852.0 ,0 ,747929569.0- ,8945.1476- ,5186518.72 ,62145.0812(wen.emarFC = tseuQemarFC            
"erodommoC eniraM" = noMemaN            
"dnalsIeerTeniraM" = tseuQemaN            
1 = tseuQleveL            
"erodommoC eniraM" = noM            
neht 4271 =< leveLyM dna 0071 => leveLyM fiesle        
        )8395339132008.188 ,57869719049.8701 ,52135446587.8364(wen.emarFC = noMemarFC            
)5218700854496.857 ,5739064272405.4001 ,5734320478.3125(wen.emarFC = tseuQemarFC            
"tnaliassA suomoneV" = noMemaN            
2 = tseuQleveL            
"tseuQwerCmoneV" = tseuQemaN            
"tnaliassA suomoneV" = noM            
 neht 9961 =< leveLyM dna 0561 => leveLyM fiesle        
)5734898597.507 ,5786455346.2001 ,57390178296.4854(wen.emarFC = noMemarFC            
)5218700854496.857 ,5739064272405.4001 ,5734320478.3125(wen.emarFC = tseuQemarFC            
"recrofnE ardyH" = noMemaN            
1 = tseuQleveL            
"tseuQwerCmoneV" = tseuQemaN            
"recrofnE ardyH" = noM            
neht 9461 =< leveLyM dna 5261 => leveLyM fiesle        
)2651535321414.315 ,573953344408.484 ,52656795219.7186(wen.emarFC = noMemarFC            
)573906474115.317- ,27167556954618.721 ,52187524169.8376(wen.emarFC = tseuQemarFC            
"rehcrA werC nogarD" = noMemaN            
2 = tseuQleveL            
"tseuQwerCnogarD" = tseuQemaN            
"rehcrA werC nogarD" = noM            
 neht 4261 =< leveLyM dna 0061 => leveLyM fiesle        
)2604665554405.249- ,16990725179551.65 ,57864553417.0296(wen.emarFC = noMemarFC            
)573906474115.317- ,27167556954618.721 ,52187524169.8376(wen.emarFC = tseuQemarFC            
"roirraW werC nogarD" = noMemaN            
"tseuQwerCnogarD" = tseuQemaN            
1 = tseuQleveL            
"roirraW werC nogarD" = noM            
neht 9951 =< leveLyM dna 5751 => leveLyM fiesle        
)578176315.3106 ,30754397578932.68 ,3549814451033.781-(wen.emarFC = noMemarFC            
)726929569.0 ,0 ,897408852.0 ,0- ,1 ,0 ,897408852.0- ,0- ,726929569.0 ,48985.1855 ,3564309.24 ,776470.092-(wen.emarFC = tseuQemarFC            
"erianoilliB lotsiP" = noMemaN            
"tseuQtroPetariP" = tseuQemaN            
2 = tseuQleveL            
"erianoilliB lotsiP" = noM            
neht 4751 =< leveLyM dna 5251 => leveLyM fiesle        
)5739585001.4855 ,57343251603.74 ,2299666383699.542-(wen.emarFC = noMemarFC            
)726929569.0 ,0 ,897408852.0 ,0- ,1 ,0 ,897408852.0- ,0- ,726929569.0 ,48985.1855 ,3564309.24 ,776470.092-(wen.emarFC = tseuQemarFC            
"erianoilliM etariP" = noMemaN            
"tseuQtroPetariP" = tseuQemaN            
1 = tseuQleveL            
"erianoilliM etariP" = noM            
neht 4251 =< leveLyM dna 0051 => leveLyM fi        
neht 3dlroW fiesle    
dne        
)10501- ,252 ,1923-(wen.emarFC = noMemarFC            
)64101- ,042 ,4503-(wen.emarFC = tseuQemarFC            
"rethgiF retaW" = noMemaN            
"tseuQnettogroF" = tseuQemaN            
2 = tseuQleveL            
"rethgiF retaW" = noM            
neht 0541 => leveLyM fiesle        
)5218757624.5779- ,18705077415476.46 ,5218236322.8203-(wen.emarFC = noMemarFC            
)673072099.0 ,0 ,46651931.0 ,0- ,1 ,0 ,46651931.0- ,0- ,673072099.0 ,3918.24101- ,182445.532 ,85444.4503-(wen.emarFC = tseuQemarFC            
"reidloS aeS" = noMemaN            
"tseuQnettogroF" = tseuQemaN            
1 = tseuQleveL            
"reidloS aeS" = noM            
neht 9441 =< leveLyM dna 5241 => leveLyM fiesle        
)57390173088.0886- ,66274480473491.96 ,57864037370.7045(wen.emarFC = noMemarFC            
)909785339.0- ,0 ,205943853.0 ,0 ,1 ,0 ,205943853.0- ,0 ,909785339.0- ,48980.6846- ,8187997.62 ,2856.7665(wen.emarFC = tseuQemarFC            
"rekruL wonS" = noMemaN            
"tseuQtsorF" = tseuQemaN            
2 = tseuQleveL            
"rekruL wonS" = noM            
neht 4241 =< leveLyM dna 5731 => leveLyM fiesle        
dne            
))22475835938.231- ,517230699430.0005 ,8864501855.8056-(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)5218283.9716- ,54981492020079.26 ,57390642.6695(wen.emarFC = noMemarFC            
)909785339.0- ,0 ,205943853.0 ,0 ,1 ,0 ,205943853.0- ,0 ,909785339.0- ,48980.6846- ,8187997.62 ,2856.7665(wen.emarFC = tseuQemarFC            
"roirraW citcrA" = noMemaN            
"tseuQtsorF" = tseuQemaN            
1 = tseuQleveL            
"roirraW citcrA" = noM            
neht 4731 =< leveLyM dna 0531 => leveLyM fiesle        
dne            
))52130238.25823 ,2455500679.621 ,60414425212.329(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)5265627.51333 ,3596731140934.181 ,5739533449710.6301(wen.emarFC = noMemarFC            
)521.44233 ,171290.521 ,75908.869(wen.emarFC = tseuQemarFC            
"reciffO pihS" = noMemaN            
"2tseuQpihS" = tseuQemaN            
2 = tseuQleveL            
"reciffO pihS" = noM            
neht 9431 =< leveLyM dna 5231 => leveLyM fiesle        
dne            
))52130238.25823 ,2455500679.621 ,60414425212.329(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
      )52651530.63433 ,83958557999555.921 ,2656795735834.919(wen.emarFC = noMemarFC            
         )521.44233 ,171290.521 ,75908.869(wen.emarFC = tseuQemarFC            
"drawetS pihS" = noMemaN            
"2tseuQpihS" = tseuQemaN            
1 = tseuQleveL            
"drawetS pihS" = noM            
neht 4231 =< leveLyM dna 0031 => leveLyM fiesle        
             dne            
))52130238.25823 ,2455500679.621 ,60414425212.329(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
   )57869.97723 ,87050779310445.34 ,5213596736874.919(wen.emarFC = noMemarFC            
   )6106.11923 ,171290.521 ,72108.7301(wen.emarFC = tseuQemarFC            
"reenignE pihS" = noMemaN            
"1tseuQpihS" = tseuQemaN            
2 = tseuQleveL            
"reenignE pihS" = noM            
neht 9921 =< leveLyM dna 5721 => leveLyM fiesle        
dne            
))52130238.25823 ,2455500679.621 ,60414425212.329(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
    )57390642.95033 ,52656222350297.051 ,5734893801110.2121(wen.emarFC = noMemarFC            
         )6106.11923 ,171290.521 ,72108.7301(wen.emarFC = tseuQemarFC            
"dnahkceD pihS" = noMemaN            
"1tseuQpihS" = tseuQemaN            
1 = tseuQleveL            
"dnahkceD pihS" = noM            
neht 4721 =< leveLyM dna 0521 => leveLyM fiesle        
)578171154.1074- ,11787607088737.94 ,57869245133.3125-(wen.emarFC = noMemarFC            
)312259288.0- ,0 ,755364964.0- ,0 ,1 ,0 ,755364964.0 ,0 ,312259288.0- ,75434.9925- ,1292260.51 ,47130.8245-(wen.emarFC = tseuQemarFC            
"etariP avaL" = noMemaN            
"tseuQediSeriF" = tseuQemaN            
2 = tseuQleveL            
"etariP avaL" = noM            
neht 9421 =< leveLyM dna 0021 => leveLyM fiesle        
)57395386002.8085- ,27110218447856.67 ,5265158276.9445-(wen.emarFC = noMemarFC            
)312259288.0- ,0 ,755364964.0- ,0 ,1 ,0 ,755364964.0 ,0 ,312259288.0- ,75434.9925- ,1292260.51 ,47130.8245-(wen.emarFC = tseuQemarFC            
"ajniN amgaM" = noMemaN            
"tseuQediSeriF" = tseuQemaN            
1 = tseuQleveL            
"ajniN amgaM" = noM            
neht 9911 =< leveLyM dna 5711 => leveLyM fiesle        
)573901261.3275- ,307074287077159.51 ,57812996663.1436-(wen.emarFC = noMemarFC            
)875279354.0 ,0 ,946510198.0 ,0- ,1 ,0 ,946510198.0- ,0- ,875279354.0 ,25879.2094- ,7582242.51 ,58860.4606-(wen.emarFC = tseuQemarFC            
"roirraW denroH" = noMemaN            
"tseuQediSecI" = tseuQemaN            
2 = tseuQleveL            
"roirraW denroH" = noM            
neht 4711 =< leveLyM dna 5211 => leveLyM fiesle        
)57348980293.3154- ,354413747907159.51 ,5786976174.7075-(wen.emarFC = noMemarFC            
)875279354.0 ,0 ,946510198.0 ,0- ,1 ,0 ,946510198.0- ,0- ,875279354.0 ,25879.2094- ,7582242.51 ,58860.4606-(wen.emarFC = tseuQemarFC            
"etanidrobuS baL" = noMemaN            
"tseuQediSecI" = tseuQemaN            
1 = tseuQleveL            
"etanidrobuS baL" = noM            
neht 4211 =< leveLyM dna 0011 => leveLyM fiesle        
)52609305614.9915- ,6093520108936.574 ,5781711547.2411(wen.emarFC = noMemarFC            
)601406473.0- ,0 ,88481729.0- ,0 ,1 ,0 ,88481729.0 ,0 ,601406473.0- ,82952.2735- ,409911.004 ,628858.906(wen.emarFC = tseuQemarFC            
"roirraW retniW" = noMemaN            
"tseuQniatnuoMwonS" = tseuQemaN            
2 = tseuQleveL            
"roirraW retniW" = noM            
neht 9901 =< leveLyM dna 0501 => leveLyM fiesle        
)57864037896.3655- ,4953344450783.724 ,5781768833741.945(wen.emarFC = noMemarFC            
)601406473.0- ,0 ,88481729.0- ,0 ,1 ,0 ,88481729.0 ,0 ,601406473.0- ,82952.2735- ,409911.004 ,628858.906(wen.emarFC = tseuQemarFC            
"repoorT wonS" = noMemaN            
"tseuQniatnuoMwonS" = tseuQemaN            
1 = tseuQleveL            
"repoorT wonS" = noM            
neht 9401 =< leveLyM dna 0001 => leveLyM fiesle        
)5260930097956.0431- ,87050779836481.23 ,57869766.7306-(wen.emarFC = noMemarFC            
)64124292.0- ,0 ,35982659.0 ,0 ,1 ,0 ,35982659.0- ,0 ,64124292.0- ,160732.597- ,4003295.74 ,25160.7945-(wen.emarFC = tseuQemarFC            
"eripmaV" = noMemaN            
"tseuQeibmoZ" = tseuQemaN            
2 = tseuQleveL            
"eripmaV" = noM            
neht 999 =< leveLyM dna 579 => leveLyM fiesle        
)57817110786.829- ,35498191437969.87 ,57864558677.7565-(wen.emarFC = noMemarFC            
)64124292.0- ,0 ,35982659.0 ,0 ,1 ,0 ,35982659.0- ,0 ,64124292.0- ,160732.597- ,4003295.74 ,25160.7945-(wen.emarFC = tseuQemarFC            
"eibmoZ" = noMemaN            
"tseuQeibmoZ" = tseuQemaN            
1 = tseuQleveL            
"eibmoZ" = noM            
neht 479 =< leveLyM dna 059 => leveLyM fiesle        
)526567905796.4523- ,87524633285671.08 ,5265101970132.1681-(wen.emarFC = noMemarFC            
)862700668.0 ,0 ,214130005.0- ,0 ,1 ,0 ,214130005.0 ,0 ,862700668.0 ,21860.6123- ,2370417.17 ,93697.0442-(wen.emarFC = tseuQemarFC            
"niatpaC eniraM" = noMemaN            
"3tseuQeniraM" = tseuQemaN            
2 = tseuQleveL            
"niatpaC eniraM" = noM            
neht 949 =< leveLyM dna 009 => leveLyM fiesle        
)521823111980.0703- ,52130238772798.57 ,521354413273.1282-(wen.emarFC = noMemarFC            
)862700668.0 ,0 ,214130005.0- ,0 ,1 ,0 ,214130005.0 ,0 ,862700668.0 ,21860.6123- ,2370417.17 ,93697.0442-(wen.emarFC = tseuQemarFC            
"tnanetueiL eniraM" = noMemaN            
"3tseuQeniraM" = tseuQemaN            
1 = tseuQleveL            
"tnanetueiL eniraM" = noM            
neht 998 =< leveLyM dna 578 => leveLyM fiesle        
)578124706276074.72- ,61582764144368.18 ,52604613476870.37(wen.emarFC = noMemarFC            
)9632279130.0- ,01-e78023770.1- ,177884999.0 ,01-e63327129.8 ,1 ,01-e33562363.1 ,177884999.0- ,01-e18847069.8 ,9632279130.0- ,123666.819 ,8095501.37 ,806896.236(wen.emarFC = tseuQemarFC            
"ffatS yrotcaF" = noMemaN            
2 = tseuQleveL            
"tseuQ2aerA" = tseuQemaN            
"ffatS yrotcaF" = noM            
neht 478 =< leveLyM dna 008 => leveLyM fiesle        
)5265101970601.2231 ,21870033882416.731 ,526046603466.8601(wen.emarFC = noMemarFC            
)609302931.0 ,0 ,67362099.0- ,0 ,1 ,0 ,67362099.0 ,0 ,609302931.0 ,898282.819 ,989967.17 ,11834.836(wen.emarFC = tseuQemarFC            
"etariP nawS" = noMemaN            
"tseuQ2aerA" = tseuQemaN            
1 = tseuQleveL            
"etariP nawS" = noM            
neht 997 =< leveLyM dna 577 => leveLyM fiesle        
)526567483916.4241 ,22423288668851.08 ,8864558104423.4001-(wen.emarFC = noMemarFC            
)58959422.0- ,0 ,590863479.0 ,0 ,1 ,0 ,590863479.0- ,0 ,58959422.0- ,88181.6381 ,6699967.17 ,815345.924-(wen.emarFC = tseuQemarFC            
"yranecreM" = noMemaN            
"tseuQ1aerA" = tseuQemaN            
2 = tseuQleveL            
"yranecreM" = noM            
neht 477 =< leveLyM dna 527 => leveLyM fiesle        
)5218705077.5432 ,495381367913977.25 ,2604191127623.827-(wen.emarFC = noMemarFC            
)58959422.0- ,0 ,590863479.0 ,0 ,1 ,0 ,590863479.0- ,0 ,58959422.0- ,88181.6381 ,6699967.17 ,815345.924-(wen.emarFC = tseuQemarFC            
"rediaR" = noMemaN            
"tseuQ1aerA" = tseuQemaN            
1 = tseuQleveL            
"rediaR" = noM            
neht 427 =< leveLyM dna 007 => leveLyM fi        
neht 2dlroW fiesle    
dne        
)57390.0594 ,44325639950205.24 ,52651066159.1445(wen.emarFC = noMemarFC            
)183131780.0 ,0 ,668691699.0- ,0 ,1 ,0 ,668691699.0 ,0 ,183131780.0 ,3920.0504 ,5710053.73 ,28918.9525(wen.emarFC = tseuQemarFC            
"niatpaC yellaG" = noMemaN            
"tseuQniatnuoF" = tseuQemaN            
2 = tseuQleveL            
"niatpaC yellaG" = noM            
neht 056 => leveLyM fiesle        
)578697148214.0393 ,49017829153109.87 ,52656279120.1555(wen.emarFC = noMemarFC            
)183131780.0 ,0 ,668691699.0- ,0 ,1 ,0 ,668691699.0 ,0 ,183131780.0 ,3920.0504 ,5710053.73 ,28918.9525(wen.emarFC = tseuQemarFC            
"etariP yellaG" = noMemaN            
"tseuQniatnuoF" = tseuQemaN            
1 = tseuQleveL            
"etariP yellaG" = noM            
neht 946 =< leveLyM dna 526 => leveLyM fiesle        
)5265622756326.0971- ,5260466.5465 ,57869714357.6387-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,49199.1141- ,6266.4365 ,29518.6097-(wen.emarFC = tseuQemarFC            
"reidloS layoR" = noMemaN            
"tseuQ2pxEykS" = tseuQemaN            
2 = tseuQleveL            
"reidloS layoR" = noM            
neht 426 =< leveLyM dna 055 => leveLyM fiesle        
)578640842453.7641- ,52187003331.8565 ,52604144252.4267-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,49199.1141- ,6266.4365 ,29518.6097-(wen.emarFC = tseuQemarFC            
"dauqS layoR" = noMemaN            
"tseuQ2pxEykS" = tseuQemaN            
1 = tseuQleveL            
"dauqS layoR" = noM            
neht 945 =< leveLyM dna 525 => leveLyM fiesle        
dne            
))74037891192.083- ,5265106141.7455 ,3187576716.4987-(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)1354986606512.794- ,57395808304.6655 ,57390647984.8767-(wen.emarFC = noMemarFC            
)899295224.0- ,0 ,816913609.0- ,0 ,1 ,0 ,816913609.0 ,0 ,899295224.0- ,691674.183- ,34091.4455 ,41890.9587-(wen.emarFC = tseuQemarFC            
"adnahS" = noMemaN            
"tseuQ1pxEykS" = tseuQemaN            
2 = tseuQleveL            
"adnahS" = noM            
neht 425 =< leveLyM dna 574 => leveLyM fiesle        
dne            
))88655.7661- ,84245.278 ,57228.7064-(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)5734893389703.7291- ,5260935779672.548 ,57869240.0174-(wen.emarFC = noMemarFC            
)958191699.0 ,0 ,1034881780.0 ,0- ,1 ,0 ,1034881780.0- ,0- ,958191699.0 ,34669.9491- ,596478.348 ,76888.1274-(wen.emarFC = tseuQemarFC            
"drauG s'doG" = noMemaN            
"tseuQ1pxEykS" = tseuQemaN            
1 = tseuQleveL            
"drauG s'doG" = noM            
neht 474 =< leveLyM dna 054 => leveLyM fiesle        
dne            
))5786971487.9181 ,5786976.11 ,5265158.36116(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)578171623439.3941 ,224706740038284.81 ,5218236.22916(wen.emarFC = noMemarFC            
)4372087993.9651 ,384542244794.81 ,57343256.22116(wen.emarFC = tseuQemarFC            
"odnammoC namhsiF" = noMemaN            
"tseuQnamhsiF" = tseuQemaN            
2 = tseuQleveL            
"odnammoC namhsiF" = noM            
neht 944 =< leveLyM dna 004 => leveLyM fiesle        
dne            
))5786971487.9181 ,5786976.11 ,5265158.36116(wen.3rotceV,"ecnartnEtseuqer"(revreSekovnI:_FmmoC.setomeR.)"egarotSdetacilpeR"(ecivreSteG:emag                
neht 00001 > edutingaM.)noitisoP.traPtooRdionamuH.retcarahC.reyalPlacoL.sreyalP.emag - noitisoP.tseuQemarFC( dna mraFotuA.)(vnegteg fi            
)5260982644757.3451 ,224706740038284.81 ,52187003.87806(wen.emarFC = noMemarFC            
)4372087993.9651 ,384542244794.81 ,57343256.22116(wen.emarFC = tseuQemarFC            
"roirraW namhsiF" = noMemaN            
"tseuQnamhsiF" = tseuQemaN            
1 = tseuQleveL            
"roirraW namhsiF" = noM            
neht 993 =< leveLyM dna 573 => leveLyM fiesle        
)573958.8288 ,43209420314262.68 ,5260461868.2085-(wen.emarFC = noMemarFC            
)964959994.0- ,0 ,318840668.0- ,0 ,1 ,0 ,318840668.0 ,0 ,964959994.0- ,59392.5158 ,4800059.01 ,21073.3135-(wen.emarFC = tseuQemarFC            
"ypS yratiliM" = noMemaN            
"tseuQamgaM" = tseuQemaN            
2 = tseuQleveL            
"ypS yratiliM" = noM            
neht 473 =< leveLyM dna 523 => leveLyM fiesle        
)57869292.4548 ,797148214455180.11 ,52187055461.1145-(wen.emarFC = noMemarFC            
)964959994.0- ,0 ,318840668.0- ,0 ,1 ,0 ,318840668.0 ,0 ,964959994.0- ,59392.5158 ,4800059.01 ,21073.3135-(wen.emarFC = tseuQemarFC            
"reidloS yratiliM" = noMemaN            
"tseuQamgaM" = tseuQemaN            
1 = tseuQleveL            
"reidloS yratiliM" = noM            
neht 423 =< leveLyM dna 003 => leveLyM fiesle        
)526041494130.9333- ,495381362288083.65 ,526567431838.2921-(wen.emarFC = noMemarFC            
)892730515.0- ,0 ,127761758.0 ,0 ,1 ,0 ,127761758.0- ,0 ,892730515.0- ,43574.6892- ,77200053.6 ,36640.0851-(wen.emarFC = tseuQemarFC            
"rotaidalG" = noMemaN            
"tseuQmuessoloC" = tseuQemaN            
2 = tseuQleveL            
"rotaidalG" = noM            
neht 992 =< leveLyM dna 572 => leveLyM fiesle        
)5260930566.0472- ,33111469658386.15 ,57348412.0281-(wen.emarFC = noMemarFC            
)892730515.0- ,0 ,127761758.0 ,0 ,1 ,0 ,127761758.0- ,0 ,892730515.0- ,43574.6892- ,77200053.6 ,36640.0851-(wen.emarFC = tseuQemarFC            
"roirraW agoT" = noMemaN            
"tseuQmuessoloC" = tseuQemaN            
1 = tseuQleveL            
"roirraW agoT" = noM            
neht 472 =< leveLyM dna 052 => leveLyM fiesle        
)5739533491992.668 ,935727078104336.51 ,5265674365.4565(wen.emarFC = noMemarFC            
)2174724980.0- ,90-e90748360.2- ,613399599.0 ,90-e96844761.5- ,1 ,90-e95871806.1 ,613399599.0- ,90-e81929200.5- ,2174724980.0- ,415021.574 ,12571556.1 ,51139.8035(wen.emarFC = tseuQemarFC            
"renosirP suoregnaD" = noMemaN            
"tseuQrenosirP" = tseuQemaN            
2 = tseuQleveL            
"renosirP suoregnaD" = noM            
neht 942 =< leveLyM dna 012 => leveLyM fiesle        
)1870502533732.474 ,9593170118504023.0- ,5218236379.8905(wen.emarFC = noMemarFC            
)2174724980.0- ,90-e90748360.2- ,613399599.0 ,90-e96844761.5- ,1 ,90-e95871806.1 ,613399599.0- ,90-e81929200.5- ,2174724980.0- ,415021.574 ,12571556.1 ,51139.8035(wen.emarFC = tseuQemarFC            
"renosirP" = noMemaN            
"tseuQrenosirP" = tseuQemaN            
1 = tseuQleveL            
"renosirP" = noM            
neht 902 =< leveLyM dna 091 => leveLyM fiesle        
)526093004530.9222- ,9645065476793.193 ,5265627448.9525-(wen.emarFC = noMemarFC            
)862700668.0 ,0 ,214130005.0- ,0 ,1 ,0 ,214130005.0 ,0 ,862700668.0 ,56144.9162- ,195863.617 ,72035.9384-(wen.emarFC = tseuQemarFC            
"retsaM kraD" = noMemaN            
"tseuQykS" = tseuQemaN            
2 = tseuQleveL            
"retsaM kraD" = noM            
neht 981 =< leveLyM dna 571 => leveLyM fiesle        
)52609300922.9982- ,52651066102447.592 ,52130702.3594-(wen.emarFC = noMemarFC            
)862700668.0 ,0 ,214130005.0- ,0 ,1 ,0 ,214130005.0 ,0 ,862700668.0 ,56144.9162- ,195863.617 ,72035.9384-(wen.emarFC = tseuQemarFC            
"tidnaB ykS" = noMemaN            
"tseuQykS" = tseuQemaN            
1 = tseuQleveL            
"tidnaB ykS" = noM            
neht 471 =< leveLyM dna 051 => leveLyM fiesle        
)52604144257.3724 ,56462692440256.22 ,52130759032.1884-(wen.emarFC = noMemarFC            
)0 ,0 ,1 ,0 ,1 ,0 ,1- ,0 ,0 ,81086.4234 ,5830053.72 ,34685.9305-(wen.emarFC = tseuQemarFC            
"reciffO ytteP feihC" = noMemaN            
"2tseuQeniraM" = tseuQemaN            
1 = tseuQleveL            
"reciffO ytteP feihC" = noM            
neht 941 =< leveLyM dna 021 => leveLyM fiesle        
)5265106610760.0551- ,57348985975.441 ,5265153532146.1021(wen.emarFC = noMemarFC            
)586240243.0- ,0 ,193486939.0- ,0 ,1 ,0 ,193486939.0 ,0 ,586240243.0- ,69709.8921- ,8139151.88 ,15447.9831(wen.emarFC = tseuQemarFC            
"namwonS" = noMemaN            
"tseuQwonS" = tseuQemaN            
2 = tseuQleveL            
"namwonS" = noM            
neht 911 =< leveLyM dna 001 => leveLyM fiesle        
)521302335649.3931- ,87576247377272.78 ,526093009743.4531(wen.emarFC = noMemarFC            
)586240243.0- ,0 ,193486939.0- ,0 ,1 ,0 ,193486939.0 ,0 ,586240243.0- ,69709.8921- ,8139151.88 ,15447.9831(wen.emarFC = tseuQemarFC            
"tidnaB wonS" = noMemaN            
"tseuQwonS" = tseuQemaN            
1 = tseuQleveL            
"tidnaB wonS" = noM            
neht 99 =< leveLyM dna 09 => leveLyM fiesle        
)57812423700.1734 ,629898334422416.8 ,5265622282.8061(wen.emarFC = noMemarFC            
)396551918.0 ,0 ,562175375.0 ,0- ,1 ,0 ,562175375.0- ,0- ,396551918.0 ,95334.2934 ,20700041.5 ,746884.498(wen.emarFC = tseuQemarFC            
"reciffO treseD" = noMemaN            
"tseuQtreseD" = tseuQemaN            
2 = tseuQleveL            
"reciffO treseD" = noM            
neht 98 =< leveLyM dna 57 => leveLyM fiesle        
)5739585.1844 ,94208876476844.6 ,5786408997.429(wen.emarFC = noMemarFC            
)396551918.0 ,0 ,562175375.0 ,0- ,1 ,0 ,562175375.0- ,0- ,396551918.0 ,95334.2934 ,20700041.5 ,746884.498(wen.emarFC = tseuQemarFC            
"tidnaB treseD" = noMemaN            
"tseuQtreseD" = tseuQemaN            
1 = tseuQleveL            
"tidnaB treseD" = noM            
neht 47 =< leveLyM dna 06 => leveLyM fiesle        
)57817683129.2234 ,414420520588908.41 ,573432047380.0411-(wen.emarFC = noMemarFC            
)726929569.0 ,0 ,897408852.0 ,0- ,1 ,0 ,897408852.0- ,0- ,726929569.0 ,8945.1383 ,20810001.4 ,38470.1411-(wen.emarFC = tseuQemarFC            
"eturB" = noMemaN            
"1tseuQygguB" = tseuQemaN            
2 = tseuQleveL            
"eturB" = noM            
neht 95 =< leveLyM dna 04 => leveLyM fiesle        
)521354460190.6983 ,609821703250257.31 ,573437724315.3011-(wen.emarFC = noMemarFC            
)726929569.0 ,0 ,897408852.0 ,0- ,1 ,0 ,897408852.0- ,0- ,726929569.0 ,8945.1383 ,20810001.4 ,38470.1411-(wen.emarFC = tseuQemarFC            
"etariP" = noMemaN            
"1tseuQygguB" = tseuQemaN            
1 = tseuQleveL            
"etariP" = noM            
neht 93 =< leveLyM dna 03 => leveLyM fiesle        
)5786450607324.525- ,96929257645364.04 ,5781299666388.9211-(wen.emarFC = noMemarFC            
)0 ,0 ,1- ,0- ,1 ,0 ,1 ,0 ,0 ,838773.351 ,5711055.53 ,11980.8951-(wen.emarFC = tseuQemarFC            
"alliroG" = noMemaN            
"tseuQelgnuJ" = tseuQemaN            
2 = tseuQleveL            
"alliroG" = noM            
neht 92 =< leveLyM dna 51 => leveLyM fiesle        
)90246074697564.11 ,49069480210358.76 ,52604660815.8441-(wen.emarFC = noMemarFC            
)0 ,0 ,1- ,0- ,1 ,0 ,1 ,0 ,0 ,838773.351 ,5711055.53 ,11980.8951-(wen.emarFC = tseuQemarFC            
"yeknoM" = noMemaN            
"tseuQelgnuJ" = tseuQemaN            
1 = tseuQleveL            
"yeknoM" = noM            
neht 41 =< leveLyM dna 01 => leveLyM fiesle        
)5213028.0651 ,51254361805200.72 ,573484646269.5401(wen.emarFC = noMemarFC            
)445007939.0 ,0 ,963899143.0 ,0- ,1 ,0 ,963899143.0- ,0- ,445007939.0 ,1324.0551 ,8605944.51 ,59173.9501(wen.emarFC = tseuQemarFC            
"tidnaB" = noMemaN            
"1tseuQtidnaB" = tseuQemaN            
1 = tseuQleveL            
"tidnaB" = noM            
neht 9 =< leveLyM dna 1 => leveLyM fi        
neht 1dlroW fi    
eulaV.leveL.ataD.reyalPlacoL.)"sreyalP"(ecivreSteG:emag = leveLyM    
 )(tseuQkcehC noitcnuf
retcarahC.reyalPlacoL.sreyalP.emag litnu
)(tiaw    
taeper
dne
)"emaG detroppusnU"(kciK:reyalPlacoL.sreyalP.emag    
esle
dne    
eurt = 3dlroW        
neht 5363249447 == dIecalp fiesle    
eurt = 2dlroW        
neht 3812722444 == dIecalp fiesle    
eurt = 1dlroW        
neht 9455193572 == dIecalp fi    
neht ]dIecalp[paMdlrow fi
}
eurt = ]5363249447[    
,eurt = ]3812722444[    
,eurt = ]9455193572[    
{ = paMdlrow lacol
dIecalP.emag = dIecalp lacol
dne
dne    
)(potS:)rekahSaremaC(eriuqer        
neht rekahSaremaC fi    
)"rekahSaremaC"(dlihCtsriFdniF:litU = rekahSaremaC lacol    
neht litU fi
)5 ,"litU"(dlihCroFtiaW:egarotSdetacilpeR = litU lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
dne
dne    
)dne )(noitcnuf ,CPNdeyalpsiDegnahC.eludom(noitcnufkooh        
neht "noitcnuf" == )CPNdeyalpsiDegnahC.eludom(epyt dna eludom dna sseccus fi    
)eludoMediuG ,eriuqer(llacp = eludom ,sseccus lacol    
neht eludoMediuG fi
)"eludoMediuG"(dlihCtsriFdniF:egarotSdetacilpeR = eludoMediuG lacol
dne
dne    
dne        
)dne )(noitcnuf ,tluser(noitcnufkooh            
neht "noitcnuf" == )tluser(epyt dna sseccus fi        
)nwapseR ,eriuqer(llacp = tluser ,sseccus lacol        
neht nwapseR fi    
)"nwapseR"(dlihCtsriFdniF:reniatnoCtceffE = nwapseR lacol    
dne    
dne        
)dne )(noitcnuf ,tluser(noitcnufkooh            
neht "noitcnuf" == )tluser(epyt dna sseccus fi        
)htaeD ,eriuqer(llacp = tluser ,sseccus lacol        
neht htaeD fi    
)"htaeD"(dlihCtsriFdniF:reniatnoCtceffE = htaeD lacol    
neht reniatnoCtceffE fi
)"reniatnoC"(dlihCtsriFdniF:tceffE.egarotSdetacilpeR dna )"tceffE"(dlihCtsriFdniF:egarotSdetacilpeR = reniatnoCtceffE lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
dne
emiTtnerruc = emiTnoitacifitoNtsal    
)}    
5 = noitaruD        
,"gnidaoL" = txeT        
,"buH uriH" = eltiT        
{ ,"noitacifitoNdneS"(eroCteS:iuGretratS.emag    
neht nwodlooCnoitacifiton => emiTnoitacifitoNtsal - emiTtnerruc fi
)(kcit = emiTtnerruc lacol
01 = nwodlooCnoitacifiton lacol
0 = emiTnoitacifitoNtsal lacol
)5 ,"niaM"(dlihCroFtiaW:iuGreyalP = iuGniaM lacol
)5 ,"iuGreyalP"(dlihCroFtiaW:reyalP = iuGreyalP lacol
 )5 ,"_FmmoC"(dlihCroFtiaW:setomeR = FmmoC lacol
)5 ,"setomeR"(dlihCroFtiaW:egarotSdetacilpeR = setomeR lacol
reyalPlacoL.sreyalP = reyalP lacol
)"ecivreSpttH"(ecivreSteG:emag = ecivreSpttH lacol
)"ecivreSnuR"(ecivreSteG:emag = ecivreSnuR lacol
)"resUlautriV"(ecivreSteG:emag = resUlautriV lacol
)"egarotSdetacilpeR"(ecivreSteG:emag = egarotSdetacilpeR lacol
)"sreyalP"(ecivreSteG:emag = sreyalP lacol
dne
)(tiaW:dedaoL.emag    
neht )(dedaoLsI:emag ton fi"
local decoded = b64decode(obf_code)
load(decoded:reverse())()
